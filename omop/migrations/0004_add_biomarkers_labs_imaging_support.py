# Generated by Django 5.2.5 on 2025-08-28 23:33

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('omop', '0003_add_comprehensive_genomics_support'),
    ]

    operations = [
        migrations.CreateModel(
            name='ClinicalLabTest',
            fields=[
                ('lab_test_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('test_name', models.CharField(help_text='Laboratory test name', max_length=200)),
                ('loinc_code', models.CharField(blank=True, help_text='LOINC code', max_length=20)),
                ('test_category', models.CharField(choices=[('HEME', 'Hematology'), ('CHEM', 'Clinical Chemistry'), ('IMMUNO', 'Immunology'), ('MOLEC', 'Molecular Diagnostics'), ('TUMOR', 'Tumor Markers'), ('COAG', 'Coagulation'), ('ENDO', 'Endocrine'), ('CARDIO', 'Cardiac Markers')], help_text='Category of laboratory test', max_length=20)),
                ('organ_system', models.CharField(blank=True, choices=[('HEPATIC', 'Hepatic Function'), ('RENAL', 'Renal Function'), ('CARDIAC', 'Cardiac Function'), ('HEMATOLOGIC', 'Hematologic'), ('METABOLIC', 'Metabolic'), ('IMMUNOLOGIC', 'Immunologic'), ('ENDOCRINE', 'Endocrine'), ('INFECTIOUS', 'Infectious Disease')], help_text='Primary organ system', max_length=50)),
                ('test_date', models.DateField(help_text='Date of laboratory test')),
                ('collection_time', models.TimeField(blank=True, help_text='Collection time', null=True)),
                ('fasting_status', models.BooleanField(blank=True, help_text='Fasting status required', null=True)),
                ('numeric_result', models.FloatField(blank=True, help_text='Numeric result', null=True)),
                ('result_unit', models.CharField(blank=True, help_text='Result unit', max_length=50)),
                ('text_result', models.CharField(blank=True, help_text='Text/categorical result', max_length=200)),
                ('reference_range_low', models.FloatField(blank=True, help_text='Reference range low', null=True)),
                ('reference_range_high', models.FloatField(blank=True, help_text='Reference range high', null=True)),
                ('abnormal_flag', models.CharField(blank=True, choices=[('N', 'Normal'), ('H', 'High'), ('L', 'Low'), ('HH', 'Critical High'), ('LL', 'Critical Low'), ('A', 'Abnormal')], help_text='Abnormal flag', max_length=10)),
                ('eligibility_test', models.BooleanField(default=False, help_text='Used for trial eligibility')),
                ('safety_monitoring', models.BooleanField(default=False, help_text='Safety monitoring parameter')),
                ('baseline_test', models.BooleanField(default=False, help_text='Baseline test for trial')),
                ('ctcae_grade', models.IntegerField(blank=True, choices=[(0, 'Grade 0 - Normal'), (1, 'Grade 1 - Mild'), (2, 'Grade 2 - Moderate'), (3, 'Grade 3 - Severe'), (4, 'Grade 4 - Life-threatening'), (5, 'Grade 5 - Death')], help_text='CTCAE toxicity grade', null=True)),
                ('specimen_type', models.CharField(blank=True, help_text='Specimen type', max_length=50)),
                ('collection_method', models.CharField(blank=True, help_text='Collection method', max_length=100)),
                ('processing_delay', models.IntegerField(blank=True, help_text='Processing delay in hours', null=True)),
                ('analyzer_name', models.CharField(blank=True, help_text='Laboratory analyzer', max_length=100)),
                ('methodology', models.CharField(blank=True, help_text='Testing methodology', max_length=100)),
                ('laboratory_name', models.CharField(blank=True, help_text='Testing laboratory', max_length=200)),
                ('hemolyzed', models.BooleanField(blank=True, help_text='Hemolyzed specimen', null=True)),
                ('lipemic', models.BooleanField(blank=True, help_text='Lipemic specimen', null=True)),
                ('icteric', models.BooleanField(blank=True, help_text='Icteric specimen', null=True)),
            ],
            options={
                'db_table': 'clinical_lab_test',
            },
        ),
        migrations.CreateModel(
            name='ClinicalTrialBiomarker',
            fields=[
                ('biomarker_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('biomarker_type', models.CharField(choices=[('TMB', 'Tumor Mutational Burden'), ('PD_L1', 'PD-L1 Expression'), ('MSI', 'Microsatellite Instability'), ('HER2_IHC', 'HER2 Immunohistochemistry'), ('HER2_FISH', 'HER2 Fluorescence In Situ Hybridization'), ('ER_STATUS', 'Estrogen Receptor Status'), ('PR_STATUS', 'Progesterone Receptor Status'), ('TIL', 'Tumor Infiltrating Lymphocytes'), ('BRCA_STATUS', 'BRCA Mutation Status'), ('NTRK_FUSION', 'NTRK Gene Fusion'), ('CDK4_6', 'CDK4/6 Expression'), ('PI3K_AKT', 'PI3K/AKT Pathway')], help_text='Type of biomarker', max_length=50)),
                ('test_date', models.DateField(help_text='Date of biomarker testing')),
                ('test_method', models.CharField(choices=[('IHC', 'Immunohistochemistry'), ('FISH', 'Fluorescence In Situ Hybridization'), ('NGS', 'Next Generation Sequencing'), ('PCR', 'Polymerase Chain Reaction'), ('WES', 'Whole Exome Sequencing'), ('WGS', 'Whole Genome Sequencing'), ('FLOW_CYTOMETRY', 'Flow Cytometry'), ('ELISA', 'Enzyme-Linked Immunosorbent Assay')], help_text='Testing methodology', max_length=100)),
                ('numeric_value', models.FloatField(blank=True, help_text='Numeric result value', null=True)),
                ('unit', models.CharField(blank=True, help_text='Unit of measurement', max_length=50)),
                ('categorical_result', models.CharField(blank=True, choices=[('POSITIVE', 'Positive'), ('NEGATIVE', 'Negative'), ('HIGH', 'High'), ('LOW', 'Low'), ('INTERMEDIATE', 'Intermediate'), ('EQUIVOCAL', 'Equivocal'), ('MSI_HIGH', 'MSI-High'), ('MSI_LOW', 'MSI-Low'), ('MSS', 'Microsatellite Stable'), ('HER2_0', 'HER2 0'), ('HER2_1PLUS', 'HER2 1+'), ('HER2_2PLUS', 'HER2 2+'), ('HER2_3PLUS', 'HER2 3+'), ('AMPLIFIED', 'Amplified'), ('NOT_AMPLIFIED', 'Not Amplified')], help_text='Categorical interpretation', max_length=50)),
                ('threshold_met', models.BooleanField(blank=True, help_text='Meets clinical threshold', null=True)),
                ('threshold_value', models.FloatField(blank=True, help_text='Threshold value used', null=True)),
                ('threshold_description', models.CharField(blank=True, help_text='Description of threshold criteria', max_length=200)),
                ('assay_name', models.CharField(blank=True, help_text='Specific assay/kit used', max_length=200)),
                ('assay_manufacturer', models.CharField(blank=True, help_text='Assay manufacturer', max_length=200)),
                ('assay_version', models.CharField(blank=True, help_text='Assay version', max_length=50)),
                ('specimen_type', models.CharField(blank=True, help_text='Specimen type tested', max_length=100)),
                ('tissue_site', models.CharField(blank=True, help_text='Tissue site', max_length=100)),
                ('tumor_content', models.FloatField(blank=True, help_text='Tumor content percentage', null=True)),
                ('laboratory', models.CharField(blank=True, help_text='Testing laboratory', max_length=200)),
                ('lab_certification', models.CharField(blank=True, help_text='Laboratory certification', max_length=100)),
                ('quality_score', models.CharField(blank=True, help_text='Quality assessment', max_length=50)),
                ('trial_eligibility_biomarker', models.BooleanField(default=True, help_text='Used for trial eligibility')),
                ('companion_diagnostic', models.BooleanField(default=False, help_text='FDA-approved companion diagnostic')),
                ('drug_target', models.CharField(blank=True, help_text='Associated drug target', max_length=200)),
                ('loinc_code', models.CharField(blank=True, help_text='LOINC code', max_length=20)),
                ('snomed_code', models.CharField(blank=True, help_text='SNOMED code', max_length=20)),
            ],
            options={
                'db_table': 'clinical_trial_biomarker',
            },
        ),
        migrations.CreateModel(
            name='CuratedBiomarkerVocabulary',
            fields=[
                ('vocabulary_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('biomarker_name', models.CharField(help_text='Standard biomarker name', max_length=200)),
                ('biomarker_aliases', models.TextField(blank=True, help_text='Alternative names/synonyms')),
                ('biomarker_category', models.CharField(choices=[('PROTEIN', 'Protein Expression'), ('GENOMIC', 'Genomic Alteration'), ('IMMUNE', 'Immune Marker'), ('METABOLIC', 'Metabolic Marker'), ('BURDEN', 'Tumor Burden'), ('HORMONE', 'Hormone Receptor'), ('GROWTH', 'Growth Factor Receptor')], help_text='Biomarker category', max_length=50)),
                ('loinc_code', models.CharField(blank=True, help_text='LOINC code if available', max_length=20)),
                ('snomed_code', models.CharField(blank=True, help_text='SNOMED code if available', max_length=20)),
                ('hgnc_gene_symbol', models.CharField(blank=True, help_text='HGNC gene symbol', max_length=20)),
                ('cancer_types', models.TextField(blank=True, help_text='Applicable cancer types')),
                ('clinical_utility', models.TextField(help_text='Clinical utility description')),
                ('positive_threshold', models.FloatField(blank=True, help_text='Threshold for positive result', null=True)),
                ('high_threshold', models.FloatField(blank=True, help_text='Threshold for high expression', null=True)),
                ('units', models.CharField(blank=True, help_text='Standard units', max_length=50)),
                ('preferred_assays', models.TextField(blank=True, help_text='Preferred/validated assays')),
                ('fda_approved_assays', models.TextField(blank=True, help_text='FDA-approved companion diagnostics')),
                ('common_eligibility_criterion', models.BooleanField(default=False, help_text='Commonly used eligibility criterion')),
                ('stratification_factor', models.BooleanField(default=False, help_text='Used as stratification factor')),
                ('companion_diagnostic', models.BooleanField(default=False, help_text='FDA companion diagnostic')),
                ('evidence_level', models.CharField(blank=True, choices=[('LEVEL_1', 'Level 1 - FDA approved'), ('LEVEL_2A', 'Level 2A - Professional guidelines'), ('LEVEL_2B', 'Level 2B - Expert consensus'), ('LEVEL_3', 'Level 3 - Emerging evidence'), ('LEVEL_4', 'Level 4 - Investigational')], help_text='Evidence level for clinical utility', max_length=20)),
                ('site_specific_codes', models.JSONField(blank=True, help_text='Site-specific codes and mappings', null=True)),
                ('local_reference_ranges', models.JSONField(blank=True, help_text='Local reference ranges by laboratory', null=True)),
                ('created_date', models.DateField(auto_now_add=True, help_text='Date added to vocabulary')),
                ('last_updated', models.DateField(auto_now=True, help_text='Last update date')),
                ('curator', models.CharField(blank=True, help_text='Curator/reviewer', max_length=200)),
            ],
            options={
                'db_table': 'curated_biomarker_vocabulary',
            },
        ),
        migrations.CreateModel(
            name='ImagingMeasurement',
            fields=[
                ('imaging_measurement_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('measurement_name', models.CharField(help_text='Name of measurement', max_length=200)),
                ('anatomic_region', models.CharField(blank=True, help_text='Anatomical region', max_length=100)),
                ('laterality', models.CharField(blank=True, choices=[('R', 'Right'), ('L', 'Left'), ('B', 'Bilateral'), ('M', 'Midline'), ('U', 'Unknown'), ('N', 'Not Applicable')], help_text='Laterality if applicable', max_length=20)),
                ('numeric_value', models.FloatField(blank=True, help_text='Numeric measurement value', null=True)),
                ('unit', models.CharField(blank=True, help_text='Unit of measurement', max_length=20)),
                ('categorical_value', models.CharField(blank=True, help_text='Categorical result', max_length=100)),
                ('lesion_type', models.CharField(blank=True, choices=[('TARGET', 'Target Lesion'), ('NON_TARGET', 'Non-target Lesion'), ('NEW', 'New Lesion'), ('UNKNOWN', 'Unknown')], help_text='Type of lesion for RECIST', max_length=50)),
                ('lesion_number', models.IntegerField(blank=True, help_text='Lesion identification number', null=True)),
                ('longest_diameter', models.FloatField(blank=True, help_text='Longest diameter in mm', null=True)),
                ('perpendicular_diameter', models.FloatField(blank=True, help_text='Perpendicular diameter in mm', null=True)),
                ('volume', models.FloatField(blank=True, help_text='Volume in mm³', null=True)),
                ('response_category', models.CharField(blank=True, choices=[('CR', 'Complete Response'), ('PR', 'Partial Response'), ('SD', 'Stable Disease'), ('PD', 'Progressive Disease'), ('NE', 'Not Evaluable'), ('MR', 'Mixed Response')], help_text='Response assessment', max_length=20)),
                ('percent_change', models.FloatField(blank=True, help_text='Percent change from baseline', null=True)),
                ('measurement_confidence', models.CharField(blank=True, choices=[('HIGH', 'High Confidence'), ('MODERATE', 'Moderate Confidence'), ('LOW', 'Low Confidence')], help_text='Confidence in measurement', max_length=20)),
                ('reader_name', models.CharField(blank=True, help_text='Name of reader/radiologist', max_length=200)),
                ('measurement_date', models.DateField(help_text='Date measurement was performed')),
                ('enhancement_pattern', models.CharField(blank=True, help_text='Enhancement pattern', max_length=100)),
                ('signal_intensity', models.CharField(blank=True, help_text='Signal intensity characteristics', max_length=100)),
                ('perfusion_parameters', models.JSONField(blank=True, help_text='Perfusion parameters JSON', null=True)),
            ],
            options={
                'db_table': 'imaging_measurement',
            },
        ),
        migrations.CreateModel(
            name='ImagingStudy',
            fields=[
                ('imaging_study_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('study_uid', models.CharField(help_text='DICOM Study Instance UID', max_length=64, unique=True)),
                ('accession_number', models.CharField(blank=True, help_text='Accession number', max_length=50)),
                ('study_date', models.DateField(help_text='Date of imaging study')),
                ('study_time', models.TimeField(blank=True, help_text='Time of imaging study', null=True)),
                ('modality', models.CharField(choices=[('CT', 'Computed Tomography'), ('MRI', 'Magnetic Resonance Imaging'), ('PET', 'Positron Emission Tomography'), ('PET_CT', 'PET/CT'), ('US', 'Ultrasound'), ('XR', 'X-Ray'), ('MG', 'Mammography'), ('NM', 'Nuclear Medicine'), ('FL', 'Fluoroscopy'), ('AG', 'Angiography')], help_text='Primary imaging modality', max_length=20)),
                ('study_description', models.CharField(blank=True, help_text='Study description', max_length=200)),
                ('body_part_examined', models.CharField(blank=True, help_text='Body part examined', max_length=100)),
                ('contrast_agent', models.CharField(choices=[('NONE', 'No Contrast'), ('IOD', 'Iodinated Contrast'), ('GAD', 'Gadolinium-based'), ('BAR', 'Barium-based'), ('MB', 'Microbubble'), ('RI', 'Radioisotope')], default='NONE', help_text='Contrast agent used', max_length=20)),
                ('contrast_dose', models.FloatField(blank=True, help_text='Contrast dose in mL', null=True)),
                ('acquisition_protocol', models.CharField(blank=True, help_text='Acquisition protocol', max_length=200)),
                ('indication', models.TextField(blank=True, help_text='Clinical indication for imaging')),
                ('referring_physician', models.CharField(blank=True, help_text='Referring physician', max_length=200)),
                ('image_quality', models.CharField(blank=True, choices=[('EXCELLENT', 'Excellent'), ('GOOD', 'Good'), ('ADEQUATE', 'Adequate'), ('POOR', 'Poor'), ('NON_DIAGNOSTIC', 'Non-diagnostic')], help_text='Overall image quality', max_length=50)),
                ('artifacts_present', models.BooleanField(default=False, help_text='Imaging artifacts present')),
                ('artifact_description', models.TextField(blank=True, help_text='Description of artifacts')),
                ('dicom_available', models.BooleanField(default=True, help_text='DICOM data available')),
                ('image_count', models.IntegerField(blank=True, help_text='Number of images in study', null=True)),
                ('data_size_mb', models.FloatField(blank=True, help_text='Data size in MB', null=True)),
                ('storage_location', models.CharField(blank=True, help_text='Storage location/URL', max_length=500)),
                ('baseline_imaging', models.BooleanField(default=False, help_text='Baseline imaging for trial')),
                ('follow_up_imaging', models.BooleanField(default=False, help_text='Follow-up imaging for trial')),
                ('response_assessment', models.BooleanField(default=False, help_text='Used for response assessment')),
            ],
            options={
                'db_table': 'imaging_study',
            },
        ),
        migrations.AddField(
            model_name='measurement',
            name='baseline_value',
            field=models.BooleanField(default=False, help_text='Baseline value for clinical trial'),
        ),
        migrations.AddField(
            model_name='measurement',
            name='delta_check_flag',
            field=models.BooleanField(blank=True, help_text='Delta check alert flag', null=True),
        ),
        migrations.AddField(
            model_name='measurement',
            name='drug_concentration',
            field=models.FloatField(blank=True, help_text='Drug concentration level', null=True),
        ),
        migrations.AddField(
            model_name='measurement',
            name='eligibility_criterion',
            field=models.BooleanField(default=False, help_text='Used as eligibility criterion'),
        ),
        migrations.AddField(
            model_name='measurement',
            name='hemolysis_flag',
            field=models.BooleanField(blank=True, help_text='Hemolysis interference flag', null=True),
        ),
        migrations.AddField(
            model_name='measurement',
            name='icterus_flag',
            field=models.BooleanField(blank=True, help_text='Icterus interference flag', null=True),
        ),
        migrations.AddField(
            model_name='measurement',
            name='lab_test_category',
            field=models.CharField(blank=True, choices=[('HEME', 'Hematology'), ('CHEM', 'Clinical Chemistry'), ('IMMUNO', 'Immunology'), ('MOLEC', 'Molecular Diagnostics'), ('TUMOR', 'Tumor Markers'), ('COAG', 'Coagulation'), ('ENDO', 'Endocrine'), ('CARDIO', 'Cardiac Markers')], help_text='Laboratory test category', max_length=20),
        ),
        migrations.AddField(
            model_name='measurement',
            name='lipemia_flag',
            field=models.BooleanField(blank=True, help_text='Lipemia interference flag', null=True),
        ),
        migrations.AddField(
            model_name='measurement',
            name='panic_value_flag',
            field=models.BooleanField(blank=True, help_text='Panic/critical value flag', null=True),
        ),
        migrations.AddField(
            model_name='measurement',
            name='percent_change',
            field=models.FloatField(blank=True, help_text='Percent change from previous', null=True),
        ),
        migrations.AddField(
            model_name='measurement',
            name='previous_value',
            field=models.FloatField(blank=True, help_text='Previous measurement value', null=True),
        ),
        migrations.AddField(
            model_name='measurement',
            name='safety_parameter',
            field=models.BooleanField(default=False, help_text='Safety monitoring parameter'),
        ),
        migrations.AddField(
            model_name='measurement',
            name='therapeutic_range_high',
            field=models.FloatField(blank=True, help_text='Therapeutic range upper bound', null=True),
        ),
        migrations.AddField(
            model_name='measurement',
            name='therapeutic_range_low',
            field=models.FloatField(blank=True, help_text='Therapeutic range lower bound', null=True),
        ),
        migrations.AddField(
            model_name='measurement',
            name='tumor_marker_trend',
            field=models.CharField(blank=True, choices=[('INCREASING', 'Increasing'), ('DECREASING', 'Decreasing'), ('STABLE', 'Stable'), ('FLUCTUATING', 'Fluctuating')], help_text='Tumor marker trend', max_length=20),
        ),
        migrations.AlterField(
            model_name='biomarkermeasurement',
            name='biomarker_category',
            field=models.CharField(choices=[('PROTEIN', 'Protein Expression'), ('GENOMIC', 'Genomic Biomarker'), ('METABOLIC', 'Metabolic Biomarker'), ('IMMUNE', 'Immune Biomarker'), ('FUNCTIONAL', 'Functional Biomarker'), ('HORMONE_RECEPTOR', 'Hormone Receptor'), ('GROWTH_FACTOR', 'Growth Factor Receptor'), ('TUMOR_BURDEN', 'Tumor Burden Marker')], help_text='Category of biomarker', max_length=50),
        ),
        migrations.AddIndex(
            model_name='measurement',
            index=models.Index(fields=['lab_test_category'], name='measurement_lab_tes_6a0fdc_idx'),
        ),
        migrations.AddIndex(
            model_name='measurement',
            index=models.Index(fields=['eligibility_criterion'], name='measurement_eligibi_9112ca_idx'),
        ),
        migrations.AddIndex(
            model_name='measurement',
            index=models.Index(fields=['safety_parameter'], name='measurement_safety__dbf7ac_idx'),
        ),
        migrations.AddIndex(
            model_name='measurement',
            index=models.Index(fields=['baseline_value'], name='measurement_baselin_223ff3_idx'),
        ),
        migrations.AddIndex(
            model_name='measurement',
            index=models.Index(fields=['loinc_code'], name='measurement_loinc_c_bfe5c5_idx'),
        ),
        migrations.AddIndex(
            model_name='measurement',
            index=models.Index(fields=['biomarker_type'], name='measurement_biomark_2ba62e_idx'),
        ),
        migrations.AddIndex(
            model_name='measurement',
            index=models.Index(fields=['panic_value_flag'], name='measurement_panic_v_3119ec_idx'),
        ),
        migrations.AddField(
            model_name='clinicallabtest',
            name='measurement',
            field=models.ForeignKey(blank=True, help_text='Related OMOP measurement record', null=True, on_delete=django.db.models.deletion.SET_NULL, to='omop.measurement'),
        ),
        migrations.AddField(
            model_name='clinicallabtest',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='clinical_lab_tests', to='omop.person'),
        ),
        migrations.AddField(
            model_name='clinicallabtest',
            name='test_concept',
            field=models.ForeignKey(help_text='OMOP concept for test', on_delete=django.db.models.deletion.PROTECT, related_name='lab_tests', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='clinicaltrialbiomarker',
            name='biomarker_measurement',
            field=models.ForeignKey(blank=True, help_text='Related biomarker measurement', null=True, on_delete=django.db.models.deletion.SET_NULL, to='omop.biomarkermeasurement'),
        ),
        migrations.AddField(
            model_name='clinicaltrialbiomarker',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trial_biomarkers', to='omop.person'),
        ),
        migrations.AddField(
            model_name='curatedbiomarkervocabulary',
            name='concept',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='curated_biomarkers', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='imagingmeasurement',
            name='measurement_concept',
            field=models.ForeignKey(help_text='OMOP concept for measurement type', on_delete=django.db.models.deletion.PROTECT, related_name='imaging_measurements', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='imagingmeasurement',
            name='measurement_record',
            field=models.ForeignKey(blank=True, help_text='Related OMOP measurement record', null=True, on_delete=django.db.models.deletion.SET_NULL, to='omop.measurement'),
        ),
        migrations.AddField(
            model_name='imagingmeasurement',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='imaging_measurements', to='omop.person'),
        ),
        migrations.AddField(
            model_name='imagingstudy',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='imaging_studies', to='omop.person'),
        ),
        migrations.AddField(
            model_name='imagingstudy',
            name='procedure_occurrence',
            field=models.ForeignKey(blank=True, help_text='Related OMOP procedure occurrence', null=True, on_delete=django.db.models.deletion.SET_NULL, to='omop.procedureoccurrence'),
        ),
        migrations.AddField(
            model_name='imagingmeasurement',
            name='imaging_study',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='measurements', to='omop.imagingstudy'),
        ),
        migrations.AddIndex(
            model_name='clinicallabtest',
            index=models.Index(fields=['person'], name='clinical_la_person__c7099a_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicallabtest',
            index=models.Index(fields=['test_date'], name='clinical_la_test_da_e90c02_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicallabtest',
            index=models.Index(fields=['test_category'], name='clinical_la_test_ca_7858a0_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicallabtest',
            index=models.Index(fields=['eligibility_test'], name='clinical_la_eligibi_4e8e80_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicallabtest',
            index=models.Index(fields=['safety_monitoring'], name='clinical_la_safety__837cfb_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicallabtest',
            index=models.Index(fields=['baseline_test'], name='clinical_la_baselin_492ccb_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicallabtest',
            index=models.Index(fields=['abnormal_flag'], name='clinical_la_abnorma_4b5e21_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicallabtest',
            index=models.Index(fields=['ctcae_grade'], name='clinical_la_ctcae_g_2a2b38_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicallabtest',
            index=models.Index(fields=['loinc_code'], name='clinical_la_loinc_c_2fcf1d_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicaltrialbiomarker',
            index=models.Index(fields=['person'], name='clinical_tr_person__88dff0_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicaltrialbiomarker',
            index=models.Index(fields=['biomarker_type'], name='clinical_tr_biomark_297e33_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicaltrialbiomarker',
            index=models.Index(fields=['test_date'], name='clinical_tr_test_da_f051ca_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicaltrialbiomarker',
            index=models.Index(fields=['categorical_result'], name='clinical_tr_categor_a7b21f_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicaltrialbiomarker',
            index=models.Index(fields=['threshold_met'], name='clinical_tr_thresho_cc4e22_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicaltrialbiomarker',
            index=models.Index(fields=['trial_eligibility_biomarker'], name='clinical_tr_trial_e_fea92c_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicaltrialbiomarker',
            index=models.Index(fields=['companion_diagnostic'], name='clinical_tr_compani_f62233_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='clinicaltrialbiomarker',
            unique_together={('person', 'biomarker_type', 'test_date', 'assay_name')},
        ),
        migrations.AddIndex(
            model_name='curatedbiomarkervocabulary',
            index=models.Index(fields=['biomarker_name'], name='curated_bio_biomark_e2667a_idx'),
        ),
        migrations.AddIndex(
            model_name='curatedbiomarkervocabulary',
            index=models.Index(fields=['biomarker_category'], name='curated_bio_biomark_23437d_idx'),
        ),
        migrations.AddIndex(
            model_name='curatedbiomarkervocabulary',
            index=models.Index(fields=['loinc_code'], name='curated_bio_loinc_c_027fcb_idx'),
        ),
        migrations.AddIndex(
            model_name='curatedbiomarkervocabulary',
            index=models.Index(fields=['common_eligibility_criterion'], name='curated_bio_common__b14c95_idx'),
        ),
        migrations.AddIndex(
            model_name='curatedbiomarkervocabulary',
            index=models.Index(fields=['companion_diagnostic'], name='curated_bio_compani_5bf0de_idx'),
        ),
        migrations.AddIndex(
            model_name='curatedbiomarkervocabulary',
            index=models.Index(fields=['evidence_level'], name='curated_bio_evidenc_6d6efa_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='curatedbiomarkervocabulary',
            unique_together={('biomarker_name', 'biomarker_category')},
        ),
        migrations.AddIndex(
            model_name='imagingstudy',
            index=models.Index(fields=['person'], name='imaging_stu_person__20820a_idx'),
        ),
        migrations.AddIndex(
            model_name='imagingstudy',
            index=models.Index(fields=['study_date'], name='imaging_stu_study_d_51cdad_idx'),
        ),
        migrations.AddIndex(
            model_name='imagingstudy',
            index=models.Index(fields=['modality'], name='imaging_stu_modalit_2241d0_idx'),
        ),
        migrations.AddIndex(
            model_name='imagingstudy',
            index=models.Index(fields=['baseline_imaging'], name='imaging_stu_baselin_e78909_idx'),
        ),
        migrations.AddIndex(
            model_name='imagingstudy',
            index=models.Index(fields=['response_assessment'], name='imaging_stu_respons_6bd022_idx'),
        ),
        migrations.AddIndex(
            model_name='imagingstudy',
            index=models.Index(fields=['study_uid'], name='imaging_stu_study_u_d9b006_idx'),
        ),
        migrations.AddIndex(
            model_name='imagingmeasurement',
            index=models.Index(fields=['person'], name='imaging_mea_person__56c8bc_idx'),
        ),
        migrations.AddIndex(
            model_name='imagingmeasurement',
            index=models.Index(fields=['imaging_study'], name='imaging_mea_imaging_b8a048_idx'),
        ),
        migrations.AddIndex(
            model_name='imagingmeasurement',
            index=models.Index(fields=['measurement_date'], name='imaging_mea_measure_9bb08f_idx'),
        ),
        migrations.AddIndex(
            model_name='imagingmeasurement',
            index=models.Index(fields=['lesion_type'], name='imaging_mea_lesion__75c547_idx'),
        ),
        migrations.AddIndex(
            model_name='imagingmeasurement',
            index=models.Index(fields=['response_category'], name='imaging_mea_respons_ed1c49_idx'),
        ),
        migrations.AddIndex(
            model_name='imagingmeasurement',
            index=models.Index(fields=['measurement_concept'], name='imaging_mea_measure_5d9101_idx'),
        ),
    ]
