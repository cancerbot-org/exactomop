# Generated by Django 5.2.5 on 2025-08-30 16:31

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('omop', '0007_update_treatment_regimen_constraints'),
    ]

    operations = [
        migrations.CreateModel(
            name='BiospecimenCollection',
            fields=[
                ('biospecimen_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('collection_date', models.DateField(help_text='Date of biospecimen collection')),
                ('collection_method', models.CharField(choices=[('SURGICAL_RESECTION', 'Surgical Resection'), ('CORE_BIOPSY', 'Core Needle Biopsy'), ('FINE_NEEDLE_ASPIRATION', 'Fine Needle Aspiration'), ('LIQUID_BIOPSY', 'Liquid Biopsy'), ('BONE_MARROW_BIOPSY', 'Bone Marrow Biopsy'), ('PLEURAL_FLUID', 'Pleural Fluid'), ('ASCITES', 'Ascitic Fluid'), ('CSF', 'Cerebrospinal Fluid')], help_text='Method of biospecimen collection', max_length=50)),
                ('specimen_type', models.CharField(choices=[('FRESH_TISSUE', 'Fresh Tissue'), ('FROZEN_TISSUE', 'Frozen Tissue'), ('FFPE_TISSUE', 'FFPE Tissue'), ('BLOOD', 'Blood'), ('PLASMA', 'Plasma'), ('SERUM', 'Serum'), ('BUFFY_COAT', 'Buffy Coat'), ('URINE', 'Urine'), ('OTHER_FLUID', 'Other Body Fluid')], help_text='Type of biospecimen', max_length=50)),
                ('laterality', models.CharField(blank=True, choices=[('R', 'Right'), ('L', 'Left'), ('B', 'Bilateral'), ('M', 'Midline'), ('U', 'Unknown'), ('N', 'Not Applicable')], help_text='Laterality of collection site', max_length=10)),
                ('tumor_content', models.FloatField(blank=True, help_text='Tumor content percentage', null=True)),
                ('necrosis_percentage', models.FloatField(blank=True, help_text='Necrosis percentage', null=True)),
                ('specimen_quality', models.CharField(blank=True, choices=[('EXCELLENT', 'Excellent'), ('GOOD', 'Good'), ('FAIR', 'Fair'), ('POOR', 'Poor'), ('INADEQUATE', 'Inadequate')], help_text='Overall specimen quality', max_length=20)),
                ('processing_time_hours', models.FloatField(blank=True, help_text='Time from collection to processing (hours)', null=True)),
                ('storage_temperature', models.CharField(blank=True, help_text='Storage temperature', max_length=20)),
                ('fixation_type', models.CharField(blank=True, help_text='Fixation type for tissue', max_length=50)),
                ('fixation_time_hours', models.FloatField(blank=True, help_text='Fixation time in hours', null=True)),
                ('genomic_testing', models.BooleanField(blank=True, help_text='Used for genomic testing', null=True)),
                ('proteomics_testing', models.BooleanField(blank=True, help_text='Used for proteomics testing', null=True)),
                ('immunohistochemistry', models.BooleanField(blank=True, help_text='Used for IHC', null=True)),
                ('biobank_id', models.CharField(blank=True, help_text='Biobank specimen ID', max_length=100)),
                ('laboratory_id', models.CharField(blank=True, help_text='Laboratory specimen ID', max_length=100)),
            ],
            options={
                'db_table': 'biospecimen_collection',
            },
        ),
        migrations.CreateModel(
            name='CancerStagingMap',
            fields=[
                ('staging_map_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('source_staging_system', models.CharField(help_text='Source staging system', max_length=50)),
                ('source_stage_value', models.CharField(help_text='Stage value in source system', max_length=50)),
                ('target_staging_system', models.CharField(help_text='Target staging system', max_length=50)),
                ('target_stage_value', models.CharField(help_text='Equivalent stage value in target system', max_length=50)),
                ('mapping_confidence', models.CharField(choices=[('EXACT', 'Exact Match'), ('APPROXIMATE', 'Approximate'), ('POSSIBLE', 'Possible Match')], default='EXACT', help_text='Confidence in staging mapping', max_length=20)),
                ('mapping_source', models.CharField(blank=True, help_text='Source of staging mapping', max_length=100)),
                ('effective_start_date', models.DateField(blank=True, help_text='Start date for mapping validity', null=True)),
                ('effective_end_date', models.DateField(blank=True, help_text='End date for mapping validity', null=True)),
            ],
            options={
                'db_table': 'cancer_staging_map',
            },
        ),
        migrations.CreateModel(
            name='ClinicalTrial',
            fields=[
                ('clinical_trial_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('nct_number', models.CharField(blank=True, help_text='ClinicalTrials.gov NCT number', max_length=20)),
                ('trial_title', models.CharField(help_text='Official trial title', max_length=500)),
                ('trial_acronym', models.CharField(blank=True, help_text='Trial acronym/short name', max_length=100)),
                ('enrollment_date', models.DateField(help_text='Date of trial enrollment')),
                ('randomization_date', models.DateField(blank=True, help_text='Date of randomization', null=True)),
                ('trial_completion_date', models.DateField(blank=True, help_text='Date of trial completion', null=True)),
                ('trial_phase', models.CharField(choices=[('PHASE_0', 'Phase 0'), ('PHASE_I', 'Phase I'), ('PHASE_II', 'Phase II'), ('PHASE_III', 'Phase III'), ('PHASE_IV', 'Phase IV'), ('PILOT', 'Pilot Study')], help_text='Clinical trial phase', max_length=10)),
                ('trial_type', models.CharField(choices=[('INTERVENTIONAL', 'Interventional'), ('OBSERVATIONAL', 'Observational'), ('EXPANDED_ACCESS', 'Expanded Access')], help_text='Type of clinical trial', max_length=30)),
                ('randomized', models.BooleanField(blank=True, help_text='Whether trial is randomized', null=True)),
                ('blinded', models.BooleanField(blank=True, help_text='Whether trial is blinded', null=True)),
                ('placebo_controlled', models.BooleanField(blank=True, help_text='Whether trial is placebo-controlled', null=True)),
                ('treatment_arm', models.CharField(blank=True, help_text='Treatment arm assignment', max_length=100)),
                ('treatment_arm_code', models.CharField(blank=True, help_text='Treatment arm code', max_length=20)),
                ('control_arm', models.BooleanField(blank=True, help_text='Whether patient is in control arm', null=True)),
                ('investigational_drug', models.CharField(blank=True, help_text='Investigational drug name', max_length=200)),
                ('drug_mechanism', models.CharField(blank=True, help_text='Drug mechanism of action', max_length=200)),
                ('primary_endpoint', models.TextField(blank=True, help_text='Primary study endpoint')),
                ('patient_outcome', models.CharField(blank=True, choices=[('COMPLETED', 'Completed Trial'), ('WITHDRAWN', 'Withdrawn'), ('DISCONTINUED', 'Discontinued Treatment'), ('LOST_TO_FOLLOWUP', 'Lost to Follow-up'), ('DEATH', 'Death')], help_text='Patient outcome in trial', max_length=30)),
                ('serious_adverse_events', models.BooleanField(blank=True, help_text='Whether serious AEs occurred', null=True)),
                ('grade_3_4_toxicity', models.BooleanField(blank=True, help_text='Whether grade 3-4 toxicity occurred', null=True)),
                ('sponsor', models.CharField(blank=True, help_text='Trial sponsor', max_length=200)),
                ('study_site', models.CharField(blank=True, help_text='Study site', max_length=200)),
                ('principal_investigator', models.CharField(blank=True, help_text='Principal investigator', max_length=200)),
            ],
            options={
                'db_table': 'clinical_trial',
            },
        ),
        migrations.CreateModel(
            name='ICDOMorphologyConcept',
            fields=[
                ('icdo_morphology_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('icdo_morphology_code', models.CharField(help_text='ICD-O morphology code (####/#)', max_length=10, unique=True)),
                ('icdo_morphology_name', models.CharField(help_text='ICD-O morphology name', max_length=255)),
                ('histologic_type', models.CharField(help_text='Histologic type category', max_length=100)),
                ('histologic_subtype', models.CharField(blank=True, help_text='Histologic subtype', max_length=100)),
                ('behavior_code', models.CharField(choices=[('0', 'Benign'), ('1', 'Uncertain/Borderline'), ('2', 'In Situ'), ('3', 'Malignant')], help_text='ICD-O behavior code', max_length=1)),
                ('behavior_description', models.CharField(choices=[('BENIGN', 'Benign'), ('UNCERTAIN', 'Uncertain/Borderline'), ('IN_SITU', 'In Situ'), ('MALIGNANT', 'Malignant')], help_text='Behavior description', max_length=50)),
                ('grade_applicable', models.BooleanField(default=True, help_text='Whether grading applies to this morphology')),
                ('staging_applicable', models.BooleanField(default=True, help_text='Whether staging applies to this morphology')),
                ('who_classification', models.CharField(blank=True, help_text='WHO tumor classification', max_length=100)),
                ('major_category', models.CharField(help_text='Major morphology category', max_length=100)),
            ],
            options={
                'db_table': 'icdo_morphology_concept',
            },
        ),
        migrations.CreateModel(
            name='ICDOTopographyConcept',
            fields=[
                ('icdo_topography_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('icdo_site_code', models.CharField(help_text='ICD-O topography code (C##.#)', max_length=10, unique=True)),
                ('icdo_site_name', models.CharField(help_text='ICD-O topography name', max_length=255)),
                ('major_site', models.CharField(help_text='Major anatomical site category', max_length=100)),
                ('site_group', models.CharField(blank=True, help_text='Site group classification', max_length=100)),
                ('body_system', models.CharField(blank=True, choices=[('RESPIRATORY', 'Respiratory System'), ('DIGESTIVE', 'Digestive System'), ('GENITOURINARY', 'Genitourinary System'), ('HEMATOPOIETIC', 'Hematopoietic System'), ('ENDOCRINE', 'Endocrine System'), ('NERVOUS', 'Nervous System'), ('MUSCULOSKELETAL', 'Musculoskeletal System'), ('SKIN', 'Skin'), ('BREAST', 'Breast'), ('REPRODUCTIVE', 'Reproductive System'), ('OTHER', 'Other/Multiple')], help_text='Body system classification', max_length=50)),
                ('laterality_applicable', models.BooleanField(default=False, help_text='Whether laterality applies to this site')),
            ],
            options={
                'db_table': 'icdo_topography_concept',
            },
        ),
        migrations.CreateModel(
            name='Modifier',
            fields=[
                ('modifier_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('modifier_of_event_id', models.BigIntegerField(help_text='ID of the event being modified')),
                ('modifier_value_as_number', models.FloatField(blank=True, help_text='Numeric value of the modifier', null=True)),
                ('modifier_value_as_string', models.CharField(blank=True, help_text='String value of the modifier', max_length=255)),
                ('modifier_datetime', models.DateTimeField(blank=True, help_text='Datetime of modifier', null=True)),
                ('provider_id', models.IntegerField(blank=True, help_text='Provider who recorded modifier', null=True)),
                ('visit_occurrence_id', models.IntegerField(blank=True, help_text='Visit when modifier was recorded', null=True)),
                ('modifier_source_value', models.CharField(blank=True, help_text='Source value for modifier', max_length=50)),
            ],
            options={
                'db_table': 'modifier',
            },
        ),
        migrations.CreateModel(
            name='OncologyEpisodeDetail',
            fields=[
                ('episode_detail_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('detail_date', models.DateField(help_text='Date of this episode detail')),
                ('days_from_diagnosis', models.IntegerField(blank=True, help_text='Days from initial cancer diagnosis', null=True)),
                ('days_from_treatment_start', models.IntegerField(blank=True, help_text='Days from current treatment start', null=True)),
                ('disease_status', models.CharField(choices=[('NEWLY_DIAGNOSED', 'Newly Diagnosed'), ('STABLE_DISEASE', 'Stable Disease'), ('RESPONDING', 'Responding to Treatment'), ('PROGRESSIVE', 'Progressive Disease'), ('RECURRENT', 'Recurrent Disease'), ('REMISSION', 'In Remission'), ('REFRACTORY', 'Refractory Disease')], help_text='Current disease status', max_length=30)),
                ('progression_type', models.CharField(blank=True, choices=[('LOCAL', 'Local Progression'), ('REGIONAL', 'Regional Progression'), ('DISTANT', 'Distant Metastases'), ('NEW_PRIMARY', 'New Primary'), ('BIOCHEMICAL', 'Biochemical Progression')], help_text='Type of disease progression', max_length=30)),
                ('new_metastatic_sites', models.JSONField(blank=True, default=list, help_text='New metastatic sites as JSON list')),
                ('total_metastatic_sites', models.IntegerField(blank=True, help_text='Total number of metastatic sites', null=True)),
                ('ecog_performance_status', models.IntegerField(blank=True, choices=[(0, 'ECOG 0'), (1, 'ECOG 1'), (2, 'ECOG 2'), (3, 'ECOG 3'), (4, 'ECOG 4')], help_text='ECOG Performance Status (0-4)', null=True)),
                ('karnofsky_score', models.IntegerField(blank=True, help_text='Karnofsky Performance Score', null=True)),
                ('overall_survival_days', models.IntegerField(blank=True, help_text='Overall survival in days', null=True)),
                ('progression_free_survival_days', models.IntegerField(blank=True, help_text='Progression-free survival in days', null=True)),
                ('time_to_progression_days', models.IntegerField(blank=True, help_text='Time to progression in days', null=True)),
                ('treatment_line_at_assessment', models.IntegerField(blank=True, help_text='Treatment line at time of assessment', null=True)),
                ('on_treatment', models.BooleanField(blank=True, help_text='Whether patient is currently on treatment', null=True)),
            ],
            options={
                'db_table': 'oncology_episode_detail',
            },
        ),
        migrations.CreateModel(
            name='OncologyModifier',
            fields=[
                ('oncology_modifier_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('modifier_datetime', models.DateTimeField(blank=True, null=True)),
                ('cancer_modifier_type', models.CharField(choices=[('STAGING', 'Cancer Staging'), ('BIOMARKER', 'Biomarker Result'), ('GENETICS', 'Genetic Finding'), ('MORPHOLOGY', 'Tumor Morphology'), ('TOPOGRAPHY', 'Tumor Location'), ('RESPONSE', 'Treatment Response'), ('PROGRESSION', 'Disease Progression')], help_text='Type of oncology modifier', max_length=50)),
                ('staging_basis', models.CharField(blank=True, choices=[('CLINICAL', 'Clinical'), ('PATHOLOGIC', 'Pathologic'), ('POST_THERAPY', 'Post-therapy'), ('AUTOPSY', 'Autopsy')], help_text='Basis for staging assessment', max_length=20)),
                ('biomarker_test_method', models.CharField(blank=True, help_text='Method used for biomarker testing', max_length=100)),
                ('biomarker_result_interpretation', models.CharField(blank=True, help_text='Clinical interpretation of biomarker result', max_length=50)),
                ('response_criteria', models.CharField(blank=True, help_text='Response criteria used (RECIST, WHO, etc.)', max_length=50)),
                ('response_assessment_method', models.CharField(blank=True, help_text='Method used for response assessment', max_length=100)),
            ],
            options={
                'db_table': 'oncology_modifier',
            },
        ),
        migrations.CreateModel(
            name='OncologyVocabulary',
            fields=[
                ('oncology_vocabulary_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('vocabulary_id', models.CharField(help_text='Vocabulary identifier', max_length=50)),
                ('concept_code', models.CharField(help_text='Concept code in vocabulary', max_length=50)),
                ('concept_name', models.CharField(help_text='Concept name', max_length=255)),
                ('oncology_domain', models.CharField(choices=[('TOPOGRAPHY', 'Tumor Topography'), ('MORPHOLOGY', 'Tumor Morphology'), ('STAGING', 'Cancer Staging'), ('BIOMARKER', 'Biomarker'), ('TREATMENT', 'Cancer Treatment'), ('RESPONSE', 'Treatment Response'), ('GENETICS', 'Genetic Marker')], help_text='Oncology domain classification', max_length=50)),
                ('icdo_site_code', models.CharField(blank=True, help_text='ICD-O topography code', max_length=10)),
                ('icdo_morphology_code', models.CharField(blank=True, help_text='ICD-O morphology code', max_length=10)),
                ('icdo_behavior_code', models.CharField(blank=True, help_text='ICD-O behavior code', max_length=1)),
                ('ajcc_chapter', models.CharField(blank=True, help_text='AJCC chapter/cancer site', max_length=50)),
                ('uicc_edition', models.CharField(blank=True, help_text='UICC TNM edition', max_length=20)),
                ('valid_start_date', models.DateField(help_text='Start date for concept validity')),
                ('valid_end_date', models.DateField(default='2099-12-31', help_text='End date for concept validity')),
                ('invalid_reason', models.CharField(blank=True, help_text='Reason for invalidity', max_length=1)),
            ],
            options={
                'db_table': 'oncology_vocabulary',
            },
        ),
        migrations.CreateModel(
            name='RadiationOccurrence',
            fields=[
                ('radiation_occurrence_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('radiation_occurrence_start_date', models.DateField()),
                ('radiation_occurrence_end_date', models.DateField(blank=True, null=True)),
                ('radiation_technique', models.CharField(choices=[('EXTERNAL_BEAM', 'External Beam Radiation'), ('BRACHYTHERAPY', 'Brachytherapy'), ('RADIOACTIVE_IMPLANT', 'Radioactive Implant'), ('STEREOTACTIC', 'Stereotactic Radiosurgery'), ('PROTON_THERAPY', 'Proton Therapy'), ('ELECTRON_THERAPY', 'Electron Therapy')], help_text='Radiation delivery technique', max_length=50)),
                ('total_dose', models.FloatField(blank=True, help_text='Total radiation dose', null=True)),
                ('fractions_delivered', models.IntegerField(blank=True, help_text='Number of fractions delivered', null=True)),
                ('fractions_planned', models.IntegerField(blank=True, help_text='Number of fractions planned', null=True)),
                ('dose_per_fraction', models.FloatField(blank=True, help_text='Dose per fraction', null=True)),
                ('treatment_intent', models.CharField(blank=True, choices=[('CURATIVE', 'Curative'), ('PALLIATIVE', 'Palliative'), ('ADJUVANT', 'Adjuvant'), ('NEOADJUVANT', 'Neoadjuvant'), ('PROPHYLACTIC', 'Prophylactic')], help_text='Intent of radiation treatment', max_length=30)),
                ('treatment_completed', models.BooleanField(blank=True, help_text='Whether treatment was completed as planned', null=True)),
                ('stop_reason', models.CharField(blank=True, help_text='Reason treatment was stopped if incomplete', max_length=100)),
                ('provider_id', models.IntegerField(blank=True, help_text='Radiation oncologist', null=True)),
                ('visit_occurrence_id', models.IntegerField(blank=True, help_text='Visit when treatment occurred', null=True)),
                ('radiation_source_value', models.CharField(blank=True, help_text='Source value', max_length=50)),
            ],
            options={
                'db_table': 'radiation_occurrence',
            },
        ),
        migrations.CreateModel(
            name='StagingMeasurementConcept',
            fields=[
                ('staging_concept_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('staging_system', models.CharField(help_text='Staging system (AJCC, UICC, etc.)', max_length=50)),
                ('staging_system_version', models.CharField(help_text='Version of staging system', max_length=20)),
                ('staging_component', models.CharField(choices=[('T', 'Primary Tumor (T)'), ('N', 'Regional Nodes (N)'), ('M', 'Distant Metastasis (M)'), ('OVERALL', 'Overall Stage'), ('GRADE', 'Histologic Grade')], help_text='Component of staging', max_length=20)),
                ('assessment_method', models.CharField(choices=[('CLINICAL', 'Clinical Assessment'), ('PATHOLOGIC', 'Pathologic Assessment'), ('IMAGING', 'Imaging Assessment'), ('AUTOPSY', 'Autopsy Assessment')], help_text='Method of staging assessment', max_length=30)),
            ],
            options={
                'db_table': 'staging_measurement_concept',
            },
        ),
        migrations.CreateModel(
            name='StemCellTransplant',
            fields=[
                ('stem_cell_transplant_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('transplant_date', models.DateField()),
                ('transplant_type', models.CharField(choices=[('AUTOLOGOUS', 'Autologous'), ('ALLOGENEIC', 'Allogeneic'), ('SYNGENEIC', 'Syngeneic')], help_text='Source of stem cells', max_length=20)),
                ('stem_cell_source', models.CharField(blank=True, choices=[('BONE_MARROW', 'Bone Marrow'), ('PERIPHERAL_BLOOD', 'Peripheral Blood'), ('CORD_BLOOD', 'Umbilical Cord Blood')], help_text='Source of stem cells', max_length=30)),
                ('donor_type', models.CharField(blank=True, choices=[('RELATED', 'Related Donor'), ('UNRELATED', 'Unrelated Donor'), ('HAPLOIDENTICAL', 'Haploidentical')], help_text='Type of donor relationship', max_length=30)),
                ('hla_match_grade', models.CharField(blank=True, choices=[('FULL_MATCH', 'Full Match (8/8)'), ('PARTIAL_MATCH', 'Partial Match'), ('MISMATCH', 'Mismatch')], help_text='HLA matching grade', max_length=20)),
                ('conditioning_regimen', models.CharField(blank=True, choices=[('MYELOABLATIVE', 'Myeloablative'), ('REDUCED_INTENSITY', 'Reduced Intensity'), ('NON_MYELOABLATIVE', 'Non-myeloablative')], help_text='Conditioning regimen intensity', max_length=30)),
                ('cd34_cell_dose', models.FloatField(blank=True, help_text='CD34+ cell dose (x10^6/kg)', null=True)),
                ('total_nucleated_cell_dose', models.FloatField(blank=True, help_text='TNC dose (x10^8/kg)', null=True)),
                ('engraftment_date', models.DateField(blank=True, help_text='Date of neutrophil engraftment', null=True)),
                ('platelet_engraftment_date', models.DateField(blank=True, help_text='Date of platelet engraftment', null=True)),
                ('graft_failure', models.BooleanField(blank=True, help_text='Whether graft failure occurred', null=True)),
                ('acute_gvhd_grade', models.CharField(blank=True, choices=[('NONE', 'No GVHD'), ('GRADE_I', 'Grade I'), ('GRADE_II', 'Grade II'), ('GRADE_III', 'Grade III'), ('GRADE_IV', 'Grade IV')], help_text='Acute GVHD grade', max_length=10)),
                ('chronic_gvhd_severity', models.CharField(blank=True, choices=[('NONE', 'No chronic GVHD'), ('MILD', 'Mild'), ('MODERATE', 'Moderate'), ('SEVERE', 'Severe')], help_text='Chronic GVHD severity', max_length=20)),
                ('provider_id', models.IntegerField(blank=True, help_text='Transplant physician', null=True)),
                ('visit_occurrence_id', models.IntegerField(blank=True, help_text='Transplant visit', null=True)),
                ('transplant_source_value', models.CharField(blank=True, help_text='Source value', max_length=50)),
            ],
            options={
                'db_table': 'stem_cell_transplant',
            },
        ),
        migrations.CreateModel(
            name='TumorAssessment',
            fields=[
                ('tumor_assessment_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('assessment_date', models.DateField()),
                ('assessment_method', models.CharField(choices=[('RECIST_1_1', 'RECIST 1.1'), ('WHO', 'WHO Criteria'), ('RANO', 'RANO Criteria'), ('IMMUNE_RECIST', 'iRECIST'), ('CHESON', 'Cheson Criteria'), ('CLINICAL', 'Clinical Assessment')], help_text='Assessment criteria used', max_length=30)),
                ('overall_response', models.CharField(blank=True, choices=[('CR', 'Complete Response'), ('PR', 'Partial Response'), ('SD', 'Stable Disease'), ('PD', 'Progressive Disease'), ('NE', 'Not Evaluable'), ('MR', 'Mixed Response')], help_text='Overall tumor response', max_length=20)),
                ('disease_status', models.CharField(blank=True, choices=[('MEASURABLE', 'Measurable Disease'), ('NON_MEASURABLE', 'Non-measurable Disease'), ('NO_EVIDENCE', 'No Evidence of Disease'), ('UNKNOWN', 'Unknown')], help_text='Disease status at assessment', max_length=20)),
                ('sum_target_lesions', models.FloatField(blank=True, help_text='Sum of target lesion measurements', null=True)),
                ('target_lesion_count', models.IntegerField(blank=True, help_text='Number of target lesions', null=True)),
                ('new_lesions_present', models.BooleanField(blank=True, help_text='Whether new lesions are present', null=True)),
                ('non_target_response', models.CharField(blank=True, choices=[('COMPLETE', 'Complete Response'), ('INCOMPLETE', 'Incomplete Response'), ('STABLE', 'Stable Disease'), ('PROGRESSIVE', 'Progressive Disease'), ('NOT_EVALUATED', 'Not Evaluated')], help_text='Non-target lesion response', max_length=20)),
                ('time_from_treatment_start', models.IntegerField(blank=True, help_text='Days from treatment start', null=True)),
                ('time_from_last_assessment', models.IntegerField(blank=True, help_text='Days from previous assessment', null=True)),
                ('assessment_quality', models.CharField(blank=True, choices=[('ADEQUATE', 'Adequate'), ('SUBOPTIMAL', 'Suboptimal'), ('INADEQUATE', 'Inadequate')], help_text='Quality of assessment', max_length=20)),
                ('provider_id', models.IntegerField(blank=True, help_text='Assessing physician', null=True)),
                ('visit_occurrence_id', models.IntegerField(blank=True, help_text='Assessment visit', null=True)),
                ('assessment_source_value', models.CharField(blank=True, help_text='Source value', max_length=50)),
            ],
            options={
                'db_table': 'tumor_assessment',
            },
        ),
        migrations.CreateModel(
            name='TumorAssessmentMeasurement',
            fields=[
                ('tumor_measurement_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('lesion_id', models.CharField(help_text='Unique lesion identifier', max_length=50)),
                ('lesion_type', models.CharField(choices=[('TARGET', 'Target Lesion'), ('NON_TARGET', 'Non-target Lesion'), ('NEW', 'New Lesion')], help_text='Type of lesion', max_length=20)),
                ('laterality', models.CharField(blank=True, choices=[('R', 'Right'), ('L', 'Left'), ('B', 'Bilateral'), ('M', 'Midline'), ('U', 'Unknown'), ('N', 'Not Applicable')], help_text='Laterality of lesion', max_length=10)),
                ('longest_diameter', models.FloatField(blank=True, help_text='Longest diameter (mm)', null=True)),
                ('perpendicular_diameter', models.FloatField(blank=True, help_text='Perpendicular diameter (mm)', null=True)),
                ('area', models.FloatField(blank=True, help_text='Lesion area (mm²)', null=True)),
                ('volume', models.FloatField(blank=True, help_text='Lesion volume (mm³)', null=True)),
                ('measurement_method', models.CharField(blank=True, help_text='Measurement method/imaging', max_length=50)),
                ('lesion_response', models.CharField(blank=True, choices=[('COMPLETE', 'Complete Response'), ('PARTIAL', 'Partial Response'), ('STABLE', 'Stable Disease'), ('PROGRESSIVE', 'Progressive Disease'), ('NEW', 'New Lesion')], help_text='Individual lesion response', max_length=20)),
                ('percent_change', models.FloatField(blank=True, help_text='Percent change from baseline', null=True)),
                ('absolute_change', models.FloatField(blank=True, help_text='Absolute change from baseline (mm)', null=True)),
                ('measurement_quality', models.CharField(blank=True, choices=[('MEASURABLE', 'Clearly Measurable'), ('EVALUABLE', 'Evaluable'), ('NOT_EVALUABLE', 'Not Evaluable')], help_text='Quality of measurement', max_length=20)),
            ],
            options={
                'db_table': 'tumor_assessment_measurement',
            },
        ),
        migrations.AlterUniqueTogether(
            name='treatmentlineeligibility',
            unique_together=None,
        ),
        migrations.RemoveField(
            model_name='treatmentlineeligibility',
            name='condition_occurrence',
        ),
        migrations.RemoveField(
            model_name='treatmentlineeligibility',
            name='person',
        ),
        migrations.RemoveIndex(
            model_name='biomarkermeasurement',
            name='biomarker_m_trial_e_63f663_idx',
        ),
        migrations.RemoveIndex(
            model_name='biomarkermeasurement',
            name='biomarker_m_actiona_980eee_idx',
        ),
        migrations.RemoveIndex(
            model_name='clinicallabtest',
            name='clinical_la_eligibi_4e8e80_idx',
        ),
        migrations.RemoveIndex(
            model_name='clinicallabtest',
            name='clinical_la_safety__837cfb_idx',
        ),
        migrations.RemoveIndex(
            model_name='clinicallabtest',
            name='clinical_la_baselin_492ccb_idx',
        ),
        migrations.RemoveIndex(
            model_name='clinicaltrialbiomarker',
            name='clinical_tr_thresho_cc4e22_idx',
        ),
        migrations.RemoveIndex(
            model_name='clinicaltrialbiomarker',
            name='clinical_tr_trial_e_fea92c_idx',
        ),
        migrations.RemoveIndex(
            model_name='clinicaltrialbiomarker',
            name='clinical_tr_compani_f62233_idx',
        ),
        migrations.RemoveIndex(
            model_name='curatedbiomarkervocabulary',
            name='curated_bio_common__b14c95_idx',
        ),
        migrations.RemoveIndex(
            model_name='curatedbiomarkervocabulary',
            name='curated_bio_compani_5bf0de_idx',
        ),
        migrations.RemoveIndex(
            model_name='genomicvariant',
            name='genomic_var_eligibi_ac2e0b_idx',
        ),
        migrations.RemoveIndex(
            model_name='measurement',
            name='measurement_eligibi_9112ca_idx',
        ),
        migrations.RemoveIndex(
            model_name='measurement',
            name='measurement_safety__dbf7ac_idx',
        ),
        migrations.RemoveIndex(
            model_name='measurement',
            name='measurement_baselin_223ff3_idx',
        ),
        migrations.RemoveIndex(
            model_name='moleculartest',
            name='molecular_t_trial_e_f642d4_idx',
        ),
        migrations.RemoveIndex(
            model_name='observation',
            name='observation_eligibl_8eaddb_idx',
        ),
        migrations.RemoveIndex(
            model_name='socialdeterminantsvocabulary',
            name='social_dete_affects_af6b30_idx',
        ),
        migrations.RemoveIndex(
            model_name='treatmentregimen',
            name='treatment_r_treatme_48c356_idx',
        ),
        migrations.RemoveIndex(
            model_name='treatmentregimen',
            name='treatment_r_regimen_c6398e_idx',
        ),
        migrations.RemoveIndex(
            model_name='treatmentregimen',
            name='treatment_r_contain_442eba_idx',
        ),
        migrations.RemoveIndex(
            model_name='treatmentregimen',
            name='treatment_r_contain_58974f_idx',
        ),
        migrations.RemoveIndex(
            model_name='treatmentregimen',
            name='treatment_r_best_re_595b41_idx',
        ),
        migrations.AlterUniqueTogether(
            name='treatmentregimen',
            unique_together=set(),
        ),
        migrations.RemoveField(
            model_name='biomarkermeasurement',
            name='actionable_biomarker',
        ),
        migrations.RemoveField(
            model_name='biomarkermeasurement',
            name='trial_eligibility_criterion',
        ),
        migrations.RemoveField(
            model_name='clinicallabtest',
            name='baseline_test',
        ),
        migrations.RemoveField(
            model_name='clinicallabtest',
            name='eligibility_test',
        ),
        migrations.RemoveField(
            model_name='clinicallabtest',
            name='safety_monitoring',
        ),
        migrations.RemoveField(
            model_name='clinicaltrialbiomarker',
            name='companion_diagnostic',
        ),
        migrations.RemoveField(
            model_name='clinicaltrialbiomarker',
            name='threshold_met',
        ),
        migrations.RemoveField(
            model_name='clinicaltrialbiomarker',
            name='trial_eligibility_biomarker',
        ),
        migrations.RemoveField(
            model_name='curatedbiomarkervocabulary',
            name='common_eligibility_criterion',
        ),
        migrations.RemoveField(
            model_name='curatedbiomarkervocabulary',
            name='companion_diagnostic',
        ),
        migrations.RemoveField(
            model_name='curatedbiomarkervocabulary',
            name='stratification_factor',
        ),
        migrations.RemoveField(
            model_name='genomicvariant',
            name='eligibility_relevant',
        ),
        migrations.RemoveField(
            model_name='measurement',
            name='baseline_value',
        ),
        migrations.RemoveField(
            model_name='measurement',
            name='eligibility_criterion',
        ),
        migrations.RemoveField(
            model_name='measurement',
            name='safety_parameter',
        ),
        migrations.RemoveField(
            model_name='moleculartest',
            name='trial_eligible',
        ),
        migrations.RemoveField(
            model_name='observation',
            name='contraindication_reason',
        ),
        migrations.RemoveField(
            model_name='observation',
            name='eligible_for_trials',
        ),
        migrations.RemoveField(
            model_name='person',
            name='location',
        ),
        migrations.RemoveField(
            model_name='socialdeterminantsvocabulary',
            name='affects_eligibility',
        ),
        migrations.AddField(
            model_name='measurement',
            name='allred_intensity',
            field=models.IntegerField(blank=True, help_text='Allred intensity score (0-3)', null=True),
        ),
        migrations.AddField(
            model_name='measurement',
            name='allred_proportion',
            field=models.IntegerField(blank=True, help_text='Allred proportion score (0-5)', null=True),
        ),
        migrations.AddField(
            model_name='measurement',
            name='allred_total',
            field=models.IntegerField(blank=True, help_text='Total Allred score (0-8)', null=True),
        ),
        migrations.AddField(
            model_name='measurement',
            name='ctdna_allele_frequency',
            field=models.FloatField(blank=True, help_text='ctDNA variant allele frequency', null=True),
        ),
        migrations.AddField(
            model_name='measurement',
            name='ctdna_copy_number',
            field=models.FloatField(blank=True, help_text='ctDNA copy number', null=True),
        ),
        migrations.AddField(
            model_name='measurement',
            name='ctdna_detected',
            field=models.BooleanField(blank=True, help_text='Whether ctDNA was detected', null=True),
        ),
        migrations.AddField(
            model_name='measurement',
            name='expression_level',
            field=models.CharField(blank=True, choices=[('NEGATIVE', 'Negative (0%)'), ('LOW', 'Low (1-10%)'), ('MODERATE', 'Moderate (11-50%)'), ('HIGH', 'High (>50%)'), ('OVEREXPRESSED', 'Overexpressed')], help_text='Biomarker expression level classification', max_length=20),
        ),
        migrations.AddField(
            model_name='measurement',
            name='fish_interpretation',
            field=models.CharField(blank=True, choices=[('AMPLIFIED', 'Amplified'), ('NOT_AMPLIFIED', 'Not Amplified'), ('EQUIVOCAL', 'Equivocal')], help_text='FISH interpretation', max_length=20),
        ),
        migrations.AddField(
            model_name='measurement',
            name='fish_ratio',
            field=models.FloatField(blank=True, help_text='FISH signal ratio', null=True),
        ),
        migrations.AddField(
            model_name='measurement',
            name='fish_signal_count',
            field=models.FloatField(blank=True, help_text='Average signal count per nucleus', null=True),
        ),
        migrations.AddField(
            model_name='measurement',
            name='h_score',
            field=models.FloatField(blank=True, help_text='H-score (0-300)', null=True),
        ),
        migrations.AddField(
            model_name='measurement',
            name='hrd_score',
            field=models.FloatField(blank=True, help_text='Homologous recombination deficiency score', null=True),
        ),
        migrations.AddField(
            model_name='measurement',
            name='hrd_status',
            field=models.CharField(blank=True, choices=[('HRD_POSITIVE', 'HRD Positive'), ('HRD_NEGATIVE', 'HRD Negative'), ('INCONCLUSIVE', 'Inconclusive')], help_text='HRD status', max_length=15),
        ),
        migrations.AddField(
            model_name='measurement',
            name='ihc_score',
            field=models.CharField(blank=True, choices=[('0', 'Score 0'), ('1+', 'Score 1+'), ('2+', 'Score 2+'), ('3+', 'Score 3+')], help_text='IHC intensity score', max_length=10),
        ),
        migrations.AddField(
            model_name='measurement',
            name='msi_status',
            field=models.CharField(blank=True, choices=[('MSI_HIGH', 'MSI-High'), ('MSI_LOW', 'MSI-Low'), ('MSS', 'Microsatellite Stable')], help_text='Microsatellite instability status', max_length=15),
        ),
        migrations.AddField(
            model_name='measurement',
            name='mutation_status',
            field=models.CharField(blank=True, choices=[('WILD_TYPE', 'Wild Type'), ('MUTATED', 'Mutated'), ('UNKNOWN', 'Unknown'), ('NOT_TESTED', 'Not Tested')], help_text='Mutation status', max_length=20),
        ),
        migrations.AddField(
            model_name='measurement',
            name='pdl1_combined_positive_score',
            field=models.FloatField(blank=True, help_text='PD-L1 Combined Positive Score', null=True),
        ),
        migrations.AddField(
            model_name='measurement',
            name='pdl1_immune_cell_score',
            field=models.FloatField(blank=True, help_text='PD-L1 Immune Cell Score', null=True),
        ),
        migrations.AddField(
            model_name='measurement',
            name='pdl1_tumor_proportion_score',
            field=models.FloatField(blank=True, help_text='PD-L1 Tumor Proportion Score', null=True),
        ),
        migrations.AddField(
            model_name='measurement',
            name='percent_positive_cells',
            field=models.FloatField(blank=True, help_text='Percentage of positive cells', null=True),
        ),
        migrations.AddField(
            model_name='measurement',
            name='til_density',
            field=models.CharField(blank=True, choices=[('ABSENT', 'Absent (0%)'), ('LOW', 'Low (1-10%)'), ('INTERMEDIATE', 'Intermediate (11-50%)'), ('HIGH', 'High (>50%)')], help_text='TIL density classification', max_length=15),
        ),
        migrations.AddField(
            model_name='measurement',
            name='til_percentage',
            field=models.FloatField(blank=True, help_text='Tumor infiltrating lymphocytes percentage', null=True),
        ),
        migrations.AddField(
            model_name='measurement',
            name='tmb_score',
            field=models.FloatField(blank=True, help_text='Tumor mutational burden (mutations/Mb)', null=True),
        ),
        migrations.AddField(
            model_name='measurement',
            name='tmb_status',
            field=models.CharField(blank=True, choices=[('TMB_HIGH', 'TMB-High'), ('TMB_LOW', 'TMB-Low'), ('TMB_INTERMEDIATE', 'TMB-Intermediate')], help_text='TMB status classification', max_length=20),
        ),
        migrations.AddField(
            model_name='person',
            name='birth_datetime',
            field=models.DateTimeField(blank=True, help_text='Precise birth datetime - highly encouraged', null=True),
        ),
        migrations.AddField(
            model_name='person',
            name='death_datetime',
            field=models.DateTimeField(blank=True, help_text='Date and time of death', null=True),
        ),
        migrations.AddField(
            model_name='person',
            name='ethnicity_source_concept_id',
            field=models.IntegerField(default=0, help_text='Source concept ID for ethnicity'),
        ),
        migrations.AddField(
            model_name='person',
            name='ethnicity_source_value',
            field=models.CharField(blank=True, help_text='Source value for ethnicity', max_length=50),
        ),
        migrations.AddField(
            model_name='person',
            name='gender_source_concept_id',
            field=models.IntegerField(default=0, help_text='Source concept ID for gender'),
        ),
        migrations.AddField(
            model_name='person',
            name='gender_source_value',
            field=models.CharField(blank=True, help_text='Source value for gender', max_length=50),
        ),
        migrations.AddField(
            model_name='person',
            name='location_id',
            field=models.ForeignKey(blank=True, db_column='location_id', help_text='Most recent/current location', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='persons', to='omop.location'),
        ),
        migrations.AddField(
            model_name='person',
            name='race_source_concept_id',
            field=models.IntegerField(default=0, help_text='Source concept ID for race'),
        ),
        migrations.AddField(
            model_name='person',
            name='race_source_value',
            field=models.CharField(blank=True, help_text='Source value for race', max_length=50),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='blood_loss_ml',
            field=models.IntegerField(blank=True, help_text='Estimated blood loss in mL', null=True),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='conversion_to_open',
            field=models.BooleanField(blank=True, help_text='Whether minimally invasive approach was converted to open', null=True),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='frozen_section_performed',
            field=models.BooleanField(blank=True, help_text='Whether frozen section was performed', null=True),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='icu_stay_required',
            field=models.BooleanField(blank=True, help_text='Whether ICU stay was required', null=True),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='implant_used',
            field=models.BooleanField(blank=True, help_text='Whether implant was used', null=True),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='intraoperative_consultation',
            field=models.BooleanField(blank=True, help_text='Whether intraoperative pathology consultation occurred', null=True),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='length_of_stay_days',
            field=models.IntegerField(blank=True, help_text='Length of hospital stay in days', null=True),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='lymph_nodes_examined',
            field=models.IntegerField(blank=True, help_text='Number of lymph nodes examined', null=True),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='lymph_nodes_positive',
            field=models.IntegerField(blank=True, help_text='Number of positive lymph nodes', null=True),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='margin_status',
            field=models.CharField(blank=True, choices=[('NEGATIVE', 'Negative Margins (R0)'), ('MICROSCOPIC', 'Microscopic Positive (R1)'), ('MACROSCOPIC', 'Macroscopic Positive (R2)'), ('UNKNOWN', 'Unknown')], help_text='Surgical margin status', max_length=20),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='multifocal_tumor',
            field=models.BooleanField(blank=True, help_text='Whether tumor was multifocal', null=True),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='operative_time_minutes',
            field=models.IntegerField(blank=True, help_text='Duration of surgery in minutes', null=True),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='pathology_report_id',
            field=models.CharField(blank=True, help_text='Associated pathology report ID', max_length=50),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='readmission_30day',
            field=models.BooleanField(blank=True, help_text='Whether readmission occurred within 30 days', null=True),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='reconstruction_performed',
            field=models.BooleanField(blank=True, help_text='Whether reconstruction was performed', null=True),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='reconstruction_type',
            field=models.CharField(blank=True, help_text='Type of reconstruction', max_length=100),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='resection_type',
            field=models.CharField(blank=True, choices=[('COMPLETE', 'Complete Resection'), ('PARTIAL', 'Partial Resection'), ('BIOPSY_ONLY', 'Biopsy Only'), ('DEBULKING', 'Tumor Debulking'), ('PALLIATIVE', 'Palliative Resection')], help_text='Type of tumor resection', max_length=50),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='sentinel_node_examined',
            field=models.BooleanField(blank=True, help_text='Whether sentinel nodes were examined', null=True),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='sentinel_node_positive',
            field=models.BooleanField(blank=True, help_text='Whether sentinel nodes were positive', null=True),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='surgical_approach',
            field=models.CharField(blank=True, choices=[('OPEN', 'Open Surgery'), ('LAPAROSCOPIC', 'Laparoscopic'), ('ROBOTIC', 'Robotic-assisted'), ('THORACOSCOPIC', 'Thoracoscopic'), ('ENDOSCOPIC', 'Endoscopic')], help_text='Surgical approach used', max_length=30),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='surgical_intent',
            field=models.CharField(blank=True, choices=[('CURATIVE', 'Curative Intent'), ('PALLIATIVE', 'Palliative Intent'), ('DIAGNOSTIC', 'Diagnostic'), ('STAGING', 'Staging'), ('PROPHYLACTIC', 'Prophylactic')], help_text='Intent of surgical procedure', max_length=30),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='tumor_grade_pathologic',
            field=models.CharField(blank=True, choices=[('GX', 'GX - Grade cannot be assessed'), ('G1', 'G1 - Well differentiated'), ('G2', 'G2 - Moderately differentiated'), ('G3', 'G3 - Poorly differentiated'), ('G4', 'G4 - Undifferentiated')], help_text='Pathologic tumor grade', max_length=10),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='tumor_size_pathologic',
            field=models.FloatField(blank=True, help_text='Pathologic tumor size (cm)', null=True),
        ),
        migrations.AddField(
            model_name='treatmentregimen',
            name='cycle_length_days',
            field=models.IntegerField(default=0, help_text='Length of each cycle in days'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='treatmentregimen',
            name='cycles_completed',
            field=models.IntegerField(blank=True, help_text='Number of completed cycles', null=True),
        ),
        migrations.AddField(
            model_name='treatmentregimen',
            name='cycles_planned',
            field=models.IntegerField(default=0, help_text='Number of planned cycles'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='treatmentregimen',
            name='line_number',
            field=models.IntegerField(default=0, help_text='Line of therapy number'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='treatmentregimen',
            name='progression_date',
            field=models.DateField(blank=True, help_text='Date of disease progression', null=True),
        ),
        migrations.AddField(
            model_name='treatmentregimen',
            name='regimen_concept',
            field=models.ForeignKey(default=None, help_text='Concept for regimen type', on_delete=django.db.models.deletion.PROTECT, related_name='treatment_regimens', to='omop.concept'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='treatmentregimen',
            name='regimen_discontinued',
            field=models.BooleanField(default=False, help_text='Whether regimen was discontinued early'),
        ),
        migrations.AddField(
            model_name='treatmentregimen',
            name='response_assessment_date',
            field=models.DateField(blank=True, help_text='Date of response assessment', null=True),
        ),
        migrations.AddField(
            model_name='treatmentregimen',
            name='treatment_intent',
            field=models.CharField(choices=[('CURATIVE', 'Curative'), ('PALLIATIVE', 'Palliative'), ('ADJUVANT', 'Adjuvant'), ('NEOADJUVANT', 'Neoadjuvant'), ('MAINTENANCE', 'Maintenance')], default=None, help_text='Intent of treatment', max_length=30),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='genomicvariant',
            name='biomarker_status',
            field=models.CharField(blank=True, choices=[('POS', 'Positive'), ('NEG', 'Negative'), ('EQU', 'Equivocal'), ('UNK', 'Unknown'), ('NT', 'Not Tested')], help_text='Biomarker status', max_length=10),
        ),
        migrations.AlterField(
            model_name='person',
            name='care_site_id',
            field=models.BigIntegerField(blank=True, help_text='Primary care site ID', null=True),
        ),
        migrations.AlterField(
            model_name='person',
            name='day_of_birth',
            field=models.IntegerField(blank=True, help_text='Day of birth if available', null=True),
        ),
        migrations.AlterField(
            model_name='person',
            name='ethnicity_concept_id',
            field=models.IntegerField(blank=True, help_text='Standard concept for ethnicity (Hispanic/Not Hispanic)', null=True),
        ),
        migrations.AlterField(
            model_name='person',
            name='gender_concept_id',
            field=models.IntegerField(help_text='Standard concept for biological sex at birth'),
        ),
        migrations.AlterField(
            model_name='person',
            name='month_of_birth',
            field=models.IntegerField(blank=True, help_text='Month of birth if available', null=True),
        ),
        migrations.AlterField(
            model_name='person',
            name='person_source_value',
            field=models.CharField(blank=True, help_text='Source identifier for person', max_length=50),
        ),
        migrations.AlterField(
            model_name='person',
            name='provider_id',
            field=models.BigIntegerField(blank=True, help_text='Primary care provider ID', null=True),
        ),
        migrations.AlterField(
            model_name='person',
            name='race_concept_id',
            field=models.IntegerField(blank=True, help_text='Standard concept for race', null=True),
        ),
        migrations.AlterField(
            model_name='person',
            name='year_of_birth',
            field=models.IntegerField(default=None, help_text='Year of birth - required field'),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='treatmentregimen',
            name='discontinuation_reason',
            field=models.CharField(blank=True, choices=[('COMPLETED', 'Completed as Planned'), ('PROGRESSION', 'Disease Progression'), ('TOXICITY', 'Unacceptable Toxicity'), ('PATIENT_CHOICE', 'Patient Choice'), ('DEATH', 'Death'), ('OTHER', 'Other Reason')], help_text='Reason for discontinuation', max_length=50),
        ),
        migrations.AlterField(
            model_name='treatmentregimen',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='omop.person'),
        ),
        migrations.AlterField(
            model_name='treatmentregimen',
            name='regimen_name',
            field=models.CharField(help_text='Standard regimen name (e.g., FOLFOX, R-CHOP)', max_length=200),
        ),
        migrations.AlterField(
            model_name='treatmentregimen',
            name='regimen_type',
            field=models.CharField(choices=[('CHEMOTHERAPY', 'Chemotherapy'), ('IMMUNOTHERAPY', 'Immunotherapy'), ('TARGETED_THERAPY', 'Targeted Therapy'), ('HORMONE_THERAPY', 'Hormone Therapy'), ('COMBINATION', 'Combination Therapy'), ('MAINTENANCE', 'Maintenance Therapy')], help_text='Type of treatment regimen', max_length=30),
        ),
        migrations.AlterField(
            model_name='treatmentregimen',
            name='treatment_line',
            field=models.ForeignKey(blank=True, help_text='Associated treatment line', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='regimens', to='omop.treatmentline'),
        ),
        migrations.AddIndex(
            model_name='measurement',
            index=models.Index(fields=['expression_level'], name='measurement_express_c1ed54_idx'),
        ),
        migrations.AddIndex(
            model_name='measurement',
            index=models.Index(fields=['ihc_score'], name='measurement_ihc_sco_307282_idx'),
        ),
        migrations.AddIndex(
            model_name='measurement',
            index=models.Index(fields=['mutation_status'], name='measurement_mutatio_84a6ab_idx'),
        ),
        migrations.AddIndex(
            model_name='measurement',
            index=models.Index(fields=['tmb_status'], name='measurement_tmb_sta_0a4eb7_idx'),
        ),
        migrations.AddIndex(
            model_name='measurement',
            index=models.Index(fields=['msi_status'], name='measurement_msi_sta_a55b93_idx'),
        ),
        migrations.AddIndex(
            model_name='measurement',
            index=models.Index(fields=['hrd_status'], name='measurement_hrd_sta_a74ee5_idx'),
        ),
        migrations.AddIndex(
            model_name='person',
            index=models.Index(fields=['year_of_birth'], name='person_year_of_e6c783_idx'),
        ),
        migrations.AddIndex(
            model_name='person',
            index=models.Index(fields=['race_concept_id'], name='person_race_co_45266c_idx'),
        ),
        migrations.AddIndex(
            model_name='person',
            index=models.Index(fields=['ethnicity_concept_id'], name='person_ethnici_ac973f_idx'),
        ),
        migrations.AddIndex(
            model_name='person',
            index=models.Index(fields=['death_datetime'], name='person_death_d_4c0f49_idx'),
        ),
        migrations.AddIndex(
            model_name='person',
            index=models.Index(fields=['provider_id'], name='person_provide_b753b3_idx'),
        ),
        migrations.AddIndex(
            model_name='person',
            index=models.Index(fields=['care_site_id'], name='person_care_si_d7704e_idx'),
        ),
        migrations.AddIndex(
            model_name='procedureoccurrence',
            index=models.Index(fields=['surgical_approach'], name='procedure_o_surgica_1d9594_idx'),
        ),
        migrations.AddIndex(
            model_name='procedureoccurrence',
            index=models.Index(fields=['resection_type'], name='procedure_o_resecti_b0da8c_idx'),
        ),
        migrations.AddIndex(
            model_name='procedureoccurrence',
            index=models.Index(fields=['margin_status'], name='procedure_o_margin__7446f2_idx'),
        ),
        migrations.AddIndex(
            model_name='procedureoccurrence',
            index=models.Index(fields=['surgical_intent'], name='procedure_o_surgica_038636_idx'),
        ),
        migrations.AddField(
            model_name='biospecimencollection',
            name='anatomical_site_concept',
            field=models.ForeignKey(blank=True, help_text='Anatomical site of collection', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='biospecimen_sites', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='biospecimencollection',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='omop.person'),
        ),
        migrations.AddField(
            model_name='cancerstagingmap',
            name='cancer_type_concept',
            field=models.ForeignKey(blank=True, help_text='Cancer type for staging mapping', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='staging_maps', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='clinicaltrial',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='omop.person'),
        ),
        migrations.AddField(
            model_name='biospecimencollection',
            name='research_study',
            field=models.ForeignKey(blank=True, help_text='Associated research study', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='biospecimens', to='omop.clinicaltrial'),
        ),
        migrations.AddField(
            model_name='treatmentregimen',
            name='clinical_trial',
            field=models.ForeignKey(blank=True, help_text='Associated clinical trial', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='regimens', to='omop.clinicaltrial'),
        ),
        migrations.AddIndex(
            model_name='treatmentregimen',
            index=models.Index(fields=['line_number'], name='treatment_r_line_nu_6010b7_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentregimen',
            index=models.Index(fields=['regimen_type'], name='treatment_r_regimen_8b490a_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentregimen',
            index=models.Index(fields=['treatment_intent'], name='treatment_r_treatme_04a1e9_idx'),
        ),
        migrations.AddField(
            model_name='icdomorphologyconcept',
            name='concept',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='icdo_morphology', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='icdotopographyconcept',
            name='concept',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='icdo_topography', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='modifier',
            name='modifier_concept',
            field=models.ForeignKey(help_text='Concept representing the modifier', on_delete=django.db.models.deletion.PROTECT, related_name='modifiers', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='modifier',
            name='modifier_of_field_concept',
            field=models.ForeignKey(help_text='Concept representing the field being modified', on_delete=django.db.models.deletion.PROTECT, related_name='modifier_fields', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='modifier',
            name='modifier_type_concept',
            field=models.ForeignKey(help_text='Type of modifier', on_delete=django.db.models.deletion.PROTECT, related_name='modifier_types', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='modifier',
            name='modifier_value_as_concept',
            field=models.ForeignKey(blank=True, help_text='Concept value of the modifier', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='modifier_values', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='modifier',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='omop.person'),
        ),
        migrations.AddField(
            model_name='oncologyepisodedetail',
            name='episode',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='oncology_details', to='omop.episode'),
        ),
        migrations.AddField(
            model_name='oncologyepisodedetail',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='omop.person'),
        ),
        migrations.AddField(
            model_name='oncologymodifier',
            name='modifier_source_concept',
            field=models.ForeignKey(help_text='Source concept for oncology modifier', on_delete=django.db.models.deletion.PROTECT, related_name='oncology_modifier_sources', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='oncologymodifier',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='omop.person'),
        ),
        migrations.AddIndex(
            model_name='oncologyvocabulary',
            index=models.Index(fields=['vocabulary_id', 'concept_code'], name='oncology_vo_vocabul_d13697_idx'),
        ),
        migrations.AddIndex(
            model_name='oncologyvocabulary',
            index=models.Index(fields=['oncology_domain'], name='oncology_vo_oncolog_7a7aa6_idx'),
        ),
        migrations.AddIndex(
            model_name='oncologyvocabulary',
            index=models.Index(fields=['icdo_site_code'], name='oncology_vo_icdo_si_214876_idx'),
        ),
        migrations.AddIndex(
            model_name='oncologyvocabulary',
            index=models.Index(fields=['icdo_morphology_code'], name='oncology_vo_icdo_mo_9b5573_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='oncologyvocabulary',
            unique_together={('vocabulary_id', 'concept_code')},
        ),
        migrations.AddField(
            model_name='radiationoccurrence',
            name='anatomical_site_concept',
            field=models.ForeignKey(blank=True, help_text='Anatomical site treated', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='radiation_sites', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='radiationoccurrence',
            name='dose_unit_concept',
            field=models.ForeignKey(blank=True, help_text='Unit for radiation dose', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='radiation_dose_units', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='radiationoccurrence',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='omop.person'),
        ),
        migrations.AddField(
            model_name='radiationoccurrence',
            name='radiation_concept',
            field=models.ForeignKey(help_text='Concept for radiation therapy type', on_delete=django.db.models.deletion.PROTECT, related_name='radiation_occurrences', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='radiationoccurrence',
            name='radiation_type_concept',
            field=models.ForeignKey(help_text='Type of radiation therapy', on_delete=django.db.models.deletion.PROTECT, related_name='radiation_types', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='stagingmeasurementconcept',
            name='applicable_cancer_types',
            field=models.ManyToManyField(help_text='Cancer types where this staging concept applies', related_name='applicable_staging_concepts', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='stagingmeasurementconcept',
            name='concept',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='staging_details', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='stemcelltransplant',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='omop.person'),
        ),
        migrations.AddField(
            model_name='stemcelltransplant',
            name='transplant_concept',
            field=models.ForeignKey(help_text='Concept for transplant type', on_delete=django.db.models.deletion.PROTECT, related_name='stem_cell_transplants', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='stemcelltransplant',
            name='transplant_type_concept',
            field=models.ForeignKey(help_text='Type of stem cell transplant', on_delete=django.db.models.deletion.PROTECT, related_name='transplant_types', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='tumorassessment',
            name='assessment_concept',
            field=models.ForeignKey(help_text='Concept for assessment type', on_delete=django.db.models.deletion.PROTECT, related_name='tumor_assessments', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='tumorassessment',
            name='assessment_type_concept',
            field=models.ForeignKey(help_text='Type of tumor assessment', on_delete=django.db.models.deletion.PROTECT, related_name='assessment_types', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='tumorassessment',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='omop.person'),
        ),
        migrations.AddField(
            model_name='tumorassessmentmeasurement',
            name='anatomical_site_concept',
            field=models.ForeignKey(blank=True, help_text='Anatomical site of lesion', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='lesion_sites', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='tumorassessmentmeasurement',
            name='measurement_concept',
            field=models.ForeignKey(help_text='Concept for measurement type', on_delete=django.db.models.deletion.PROTECT, related_name='tumor_measurements', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='tumorassessmentmeasurement',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='omop.person'),
        ),
        migrations.AddField(
            model_name='tumorassessmentmeasurement',
            name='tumor_assessment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='measurements', to='omop.tumorassessment'),
        ),
        migrations.DeleteModel(
            name='TreatmentLineEligibility',
        ),
        migrations.RemoveField(
            model_name='treatmentregimen',
            name='comorbidity_score',
        ),
        migrations.RemoveField(
            model_name='treatmentregimen',
            name='contains_chemotherapy',
        ),
        migrations.RemoveField(
            model_name='treatmentregimen',
            name='contains_hormone_therapy',
        ),
        migrations.RemoveField(
            model_name='treatmentregimen',
            name='contains_immunotherapy',
        ),
        migrations.RemoveField(
            model_name='treatmentregimen',
            name='contains_platinum',
        ),
        migrations.RemoveField(
            model_name='treatmentregimen',
            name='contains_targeted_therapy',
        ),
        migrations.RemoveField(
            model_name='treatmentregimen',
            name='dose_reductions',
        ),
        migrations.RemoveField(
            model_name='treatmentregimen',
            name='early_discontinuation',
        ),
        migrations.RemoveField(
            model_name='treatmentregimen',
            name='number_of_cycles_completed',
        ),
        migrations.RemoveField(
            model_name='treatmentregimen',
            name='number_of_cycles_planned',
        ),
        migrations.RemoveField(
            model_name='treatmentregimen',
            name='performance_status_start',
        ),
        migrations.RemoveField(
            model_name='treatmentregimen',
            name='regimen_sequence',
        ),
        migrations.RemoveField(
            model_name='treatmentregimen',
            name='toxicity_grade_max',
        ),
        migrations.RemoveField(
            model_name='treatmentregimen',
            name='treatment_delays',
        ),
        migrations.AddIndex(
            model_name='cancerstagingmap',
            index=models.Index(fields=['source_staging_system', 'source_stage_value'], name='cancer_stag_source__9b3e1f_idx'),
        ),
        migrations.AddIndex(
            model_name='cancerstagingmap',
            index=models.Index(fields=['target_staging_system', 'target_stage_value'], name='cancer_stag_target__49c647_idx'),
        ),
        migrations.AddIndex(
            model_name='cancerstagingmap',
            index=models.Index(fields=['cancer_type_concept'], name='cancer_stag_cancer__49afc9_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='cancerstagingmap',
            unique_together={('source_staging_system', 'source_stage_value', 'target_staging_system', 'cancer_type_concept')},
        ),
        migrations.AddIndex(
            model_name='clinicaltrial',
            index=models.Index(fields=['person'], name='clinical_tr_person__a9869d_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicaltrial',
            index=models.Index(fields=['nct_number'], name='clinical_tr_nct_num_ebe288_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicaltrial',
            index=models.Index(fields=['enrollment_date'], name='clinical_tr_enrollm_78d968_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicaltrial',
            index=models.Index(fields=['trial_phase'], name='clinical_tr_trial_p_b5c866_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicaltrial',
            index=models.Index(fields=['trial_type'], name='clinical_tr_trial_t_c60717_idx'),
        ),
        migrations.AddIndex(
            model_name='biospecimencollection',
            index=models.Index(fields=['person'], name='biospecimen_person__8bc5fe_idx'),
        ),
        migrations.AddIndex(
            model_name='biospecimencollection',
            index=models.Index(fields=['collection_date'], name='biospecimen_collect_ff12cf_idx'),
        ),
        migrations.AddIndex(
            model_name='biospecimencollection',
            index=models.Index(fields=['specimen_type'], name='biospecimen_specime_b13d7f_idx'),
        ),
        migrations.AddIndex(
            model_name='biospecimencollection',
            index=models.Index(fields=['collection_method'], name='biospecimen_collect_c1bc24_idx'),
        ),
        migrations.AddIndex(
            model_name='biospecimencollection',
            index=models.Index(fields=['biobank_id'], name='biospecimen_biobank_54fbe1_idx'),
        ),
        migrations.AddIndex(
            model_name='icdomorphologyconcept',
            index=models.Index(fields=['icdo_morphology_code'], name='icdo_morpho_icdo_mo_e26341_idx'),
        ),
        migrations.AddIndex(
            model_name='icdomorphologyconcept',
            index=models.Index(fields=['behavior_code'], name='icdo_morpho_behavio_814d0c_idx'),
        ),
        migrations.AddIndex(
            model_name='icdomorphologyconcept',
            index=models.Index(fields=['major_category'], name='icdo_morpho_major_c_87ed48_idx'),
        ),
        migrations.AddIndex(
            model_name='icdomorphologyconcept',
            index=models.Index(fields=['histologic_type'], name='icdo_morpho_histolo_cd7595_idx'),
        ),
        migrations.AddIndex(
            model_name='icdotopographyconcept',
            index=models.Index(fields=['icdo_site_code'], name='icdo_topogr_icdo_si_db4a49_idx'),
        ),
        migrations.AddIndex(
            model_name='icdotopographyconcept',
            index=models.Index(fields=['major_site'], name='icdo_topogr_major_s_a9519c_idx'),
        ),
        migrations.AddIndex(
            model_name='icdotopographyconcept',
            index=models.Index(fields=['body_system'], name='icdo_topogr_body_sy_a4ce7e_idx'),
        ),
        migrations.AddIndex(
            model_name='modifier',
            index=models.Index(fields=['person'], name='modifier_person__a3fb9f_idx'),
        ),
        migrations.AddIndex(
            model_name='modifier',
            index=models.Index(fields=['modifier_concept'], name='modifier_modifie_77f432_idx'),
        ),
        migrations.AddIndex(
            model_name='modifier',
            index=models.Index(fields=['modifier_of_event_id', 'modifier_of_field_concept'], name='modifier_modifie_e6ef87_idx'),
        ),
        migrations.AddIndex(
            model_name='oncologyepisodedetail',
            index=models.Index(fields=['episode'], name='oncology_ep_episode_914a26_idx'),
        ),
        migrations.AddIndex(
            model_name='oncologyepisodedetail',
            index=models.Index(fields=['person'], name='oncology_ep_person__a8d71e_idx'),
        ),
        migrations.AddIndex(
            model_name='oncologyepisodedetail',
            index=models.Index(fields=['detail_date'], name='oncology_ep_detail__f90436_idx'),
        ),
        migrations.AddIndex(
            model_name='oncologyepisodedetail',
            index=models.Index(fields=['disease_status'], name='oncology_ep_disease_f23211_idx'),
        ),
        migrations.AddIndex(
            model_name='oncologyepisodedetail',
            index=models.Index(fields=['progression_type'], name='oncology_ep_progres_530573_idx'),
        ),
        migrations.AddIndex(
            model_name='oncologymodifier',
            index=models.Index(fields=['person'], name='oncology_mo_person__146d7d_idx'),
        ),
        migrations.AddIndex(
            model_name='oncologymodifier',
            index=models.Index(fields=['cancer_modifier_type'], name='oncology_mo_cancer__eee713_idx'),
        ),
        migrations.AddIndex(
            model_name='oncologymodifier',
            index=models.Index(fields=['staging_basis'], name='oncology_mo_staging_902529_idx'),
        ),
        migrations.AddIndex(
            model_name='radiationoccurrence',
            index=models.Index(fields=['person'], name='radiation_o_person__93ea4c_idx'),
        ),
        migrations.AddIndex(
            model_name='radiationoccurrence',
            index=models.Index(fields=['radiation_concept'], name='radiation_o_radiati_91bd5c_idx'),
        ),
        migrations.AddIndex(
            model_name='radiationoccurrence',
            index=models.Index(fields=['radiation_occurrence_start_date'], name='radiation_o_radiati_ab0fba_idx'),
        ),
        migrations.AddIndex(
            model_name='radiationoccurrence',
            index=models.Index(fields=['anatomical_site_concept'], name='radiation_o_anatomi_c90073_idx'),
        ),
        migrations.AddIndex(
            model_name='radiationoccurrence',
            index=models.Index(fields=['treatment_intent'], name='radiation_o_treatme_b895d6_idx'),
        ),
        migrations.AddIndex(
            model_name='stagingmeasurementconcept',
            index=models.Index(fields=['staging_system', 'staging_component'], name='staging_mea_staging_71ade5_idx'),
        ),
        migrations.AddIndex(
            model_name='stagingmeasurementconcept',
            index=models.Index(fields=['staging_system_version'], name='staging_mea_staging_02c6c4_idx'),
        ),
        migrations.AddIndex(
            model_name='stemcelltransplant',
            index=models.Index(fields=['person'], name='stem_cell_t_person__aedbdc_idx'),
        ),
        migrations.AddIndex(
            model_name='stemcelltransplant',
            index=models.Index(fields=['transplant_date'], name='stem_cell_t_transpl_f8d595_idx'),
        ),
        migrations.AddIndex(
            model_name='stemcelltransplant',
            index=models.Index(fields=['transplant_type'], name='stem_cell_t_transpl_c87d01_idx'),
        ),
        migrations.AddIndex(
            model_name='stemcelltransplant',
            index=models.Index(fields=['stem_cell_source'], name='stem_cell_t_stem_ce_90ded7_idx'),
        ),
        migrations.AddIndex(
            model_name='tumorassessment',
            index=models.Index(fields=['person'], name='tumor_asses_person__2e3d5e_idx'),
        ),
        migrations.AddIndex(
            model_name='tumorassessment',
            index=models.Index(fields=['assessment_date'], name='tumor_asses_assessm_247ca6_idx'),
        ),
        migrations.AddIndex(
            model_name='tumorassessment',
            index=models.Index(fields=['overall_response'], name='tumor_asses_overall_041200_idx'),
        ),
        migrations.AddIndex(
            model_name='tumorassessment',
            index=models.Index(fields=['assessment_method'], name='tumor_asses_assessm_e22dc3_idx'),
        ),
        migrations.AddIndex(
            model_name='tumorassessmentmeasurement',
            index=models.Index(fields=['tumor_assessment'], name='tumor_asses_tumor_a_3c7e6a_idx'),
        ),
        migrations.AddIndex(
            model_name='tumorassessmentmeasurement',
            index=models.Index(fields=['person'], name='tumor_asses_person__22079a_idx'),
        ),
        migrations.AddIndex(
            model_name='tumorassessmentmeasurement',
            index=models.Index(fields=['lesion_id'], name='tumor_asses_lesion__0b394d_idx'),
        ),
        migrations.AddIndex(
            model_name='tumorassessmentmeasurement',
            index=models.Index(fields=['lesion_type'], name='tumor_asses_lesion__652ed6_idx'),
        ),
    ]
