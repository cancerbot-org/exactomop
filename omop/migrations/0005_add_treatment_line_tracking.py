# Generated by Django 5.2.5 on 2025-08-28 23:45

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('omop', '0004_add_biomarkers_labs_imaging_support'),
    ]

    operations = [
        migrations.AddField(
            model_name='drugexposure',
            name='clinical_trial_drug',
            field=models.BooleanField(default=False, help_text='Administered in clinical trial'),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='compassionate_use',
            field=models.BooleanField(default=False, help_text='Compassionate use program'),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='cycle_day',
            field=models.IntegerField(blank=True, help_text='Day within cycle', null=True),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='cycle_number',
            field=models.IntegerField(blank=True, help_text='Cycle number within regimen', null=True),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='drug_classification',
            field=models.CharField(blank=True, choices=[('PLATINUM', 'Platinum-based Therapy'), ('IMMUNO', 'Immunotherapy'), ('TARGETED', 'Targeted Therapy'), ('CHEMO', 'Traditional Chemotherapy'), ('HORMONE', 'Hormone Therapy'), ('RADIATION', 'Radiation Therapy'), ('SCT', 'Stem Cell Transplant'), ('SURGERY', 'Surgical Intervention'), ('TRIAL', 'Clinical Trial Drug')], help_text='Drug classification', max_length=50),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='fda_approved_indication',
            field=models.BooleanField(blank=True, help_text='FDA approved for this indication', null=True),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='gap_after_end_days',
            field=models.IntegerField(blank=True, help_text='Gap after treatment end', null=True),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='gap_before_start_days',
            field=models.IntegerField(blank=True, help_text='Gap before treatment start', null=True),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='is_immunotherapy',
            field=models.BooleanField(default=False, help_text='Is immunotherapy'),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='is_novel_agent',
            field=models.BooleanField(default=False, help_text='Is investigational agent'),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='is_platinum_agent',
            field=models.BooleanField(default=False, help_text='Is platinum-based agent'),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='is_targeted_therapy',
            field=models.BooleanField(default=False, help_text='Is targeted therapy'),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='regimen_role',
            field=models.CharField(blank=True, choices=[('PRIMARY', 'Primary Agent'), ('COMBINATION', 'Combination Agent'), ('MAINTENANCE', 'Maintenance Agent'), ('SUPPORTIVE', 'Supportive Care'), ('PREMEDICATION', 'Premedication')], help_text='Role within regimen', max_length=20),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='total_cycles_planned',
            field=models.IntegerField(blank=True, help_text='Total planned cycles', null=True),
        ),
        migrations.CreateModel(
            name='TreatmentLine',
            fields=[
                ('treatment_line_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('line_number', models.IntegerField(help_text='Treatment line number (1, 2, 3, etc.)')),
                ('line_sequence', models.CharField(choices=[('1', 'First Line'), ('2', 'Second Line'), ('3', 'Third Line'), ('4', 'Fourth Line'), ('5+', 'Later Line (5+)')], help_text='Standardized line designation', max_length=10)),
                ('line_start_date', models.DateField(help_text='Start date of treatment line')),
                ('line_end_date', models.DateField(blank=True, help_text='End date of treatment line', null=True)),
                ('treatment_intent', models.CharField(choices=[('CURATIVE', 'Curative'), ('PALLIATIVE', 'Palliative'), ('ADJUVANT', 'Adjuvant'), ('NEOADJUVANT', 'Neoadjuvant'), ('MAINTENANCE', 'Maintenance'), ('SUPPORTIVE', 'Supportive Care')], help_text='Intent of treatment line', max_length=50)),
                ('treatment_status', models.CharField(blank=True, choices=[('NAIVE', 'Treatment Naive'), ('PREV_TX', 'Previously Treated'), ('REFRACTORY', 'Refractory'), ('RELAPSED', 'Relapsed'), ('REL_REF', 'Relapsed/Refractory')], help_text='Treatment status at line start', max_length=20)),
                ('regimen_name', models.CharField(blank=True, help_text='Standard regimen name', max_length=200)),
                ('regimen_type', models.CharField(blank=True, choices=[('SINGLE', 'Single Agent'), ('COMBO', 'Combination Therapy'), ('SEQ', 'Sequential Therapy'), ('CONC', 'Concurrent Therapy'), ('ALT', 'Alternating Therapy')], help_text='Type of regimen', max_length=20)),
                ('drug_classifications', models.JSONField(default=list, help_text='List of drug classifications in this line')),
                ('platinum_based', models.BooleanField(default=False, help_text='Contains platinum-based therapy')),
                ('immunotherapy_based', models.BooleanField(default=False, help_text='Contains immunotherapy')),
                ('targeted_therapy_based', models.BooleanField(default=False, help_text='Contains targeted therapy')),
                ('hormone_therapy_based', models.BooleanField(default=False, help_text='Contains hormone therapy')),
                ('treatment_response', models.CharField(blank=True, choices=[('CR', 'Complete Response'), ('PR', 'Partial Response'), ('SD', 'Stable Disease'), ('PD', 'Progressive Disease'), ('NE', 'Not Evaluable')], help_text='Best response achieved', max_length=20)),
                ('progression_free_survival_days', models.IntegerField(blank=True, help_text='PFS duration in days', null=True)),
                ('time_to_progression_days', models.IntegerField(blank=True, help_text='Time to progression in days', null=True)),
                ('treatment_outcome', models.CharField(blank=True, choices=[('COMPLETED', 'Treatment Completed'), ('PROGRESSION', 'Disease Progression'), ('TOXICITY', 'Unacceptable Toxicity'), ('PT_CHOICE', 'Patient Choice'), ('MD_CHOICE', 'Physician Decision'), ('DEATH', 'Death'), ('TRANSPLANT', 'Proceeded to Transplant'), ('ONGOING', 'Treatment Ongoing')], help_text='Reason treatment line ended', max_length=20)),
                ('received_in_trial', models.BooleanField(default=False, help_text='Received as part of clinical trial')),
                ('trial_identifier', models.CharField(blank=True, help_text='Clinical trial identifier', max_length=100)),
                ('line_calculation_method', models.CharField(blank=True, help_text='Method used to calculate treatment line', max_length=100)),
                ('gap_threshold_days', models.IntegerField(default=30, help_text='Gap threshold for line determination')),
                ('combination_window_days', models.IntegerField(default=60, help_text='Window for combination therapy grouping')),
                ('data_source', models.CharField(blank=True, help_text='Source of treatment data', max_length=100)),
                ('calculated_automatically', models.BooleanField(default=False, help_text='Calculated via automated algorithm')),
                ('manually_reviewed', models.BooleanField(default=False, help_text='Manually reviewed by clinician')),
                ('confidence_score', models.FloatField(blank=True, help_text='Confidence in line assignment (0-1)', null=True)),
                ('condition_occurrence', models.ForeignKey(help_text='Primary condition being treated', on_delete=django.db.models.deletion.CASCADE, related_name='treatment_lines', to='omop.conditionoccurrence')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='treatment_lines', to='omop.person')),
            ],
            options={
                'db_table': 'treatment_line',
            },
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='treatment_line',
            field=models.ForeignKey(blank=True, help_text='Associated treatment line', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='drug_exposures', to='omop.treatmentline'),
        ),
        migrations.CreateModel(
            name='TreatmentLineEligibility',
            fields=[
                ('eligibility_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('assessment_date', models.DateField(help_text='Date of eligibility assessment')),
                ('total_lines_received', models.IntegerField(default=0, help_text='Total lines of therapy received')),
                ('platinum_lines_received', models.IntegerField(default=0, help_text='Lines containing platinum')),
                ('immunotherapy_lines_received', models.IntegerField(default=0, help_text='Lines containing immunotherapy')),
                ('targeted_therapy_lines_received', models.IntegerField(default=0, help_text='Lines containing targeted therapy')),
                ('has_received_platinum', models.BooleanField(default=False, help_text='Ever received platinum')),
                ('has_received_immunotherapy', models.BooleanField(default=False, help_text='Ever received immunotherapy')),
                ('has_received_targeted_therapy', models.BooleanField(default=False, help_text='Ever received targeted therapy')),
                ('meets_one_prior_line', models.BooleanField(default=False, help_text='≥1 prior line of therapy')),
                ('meets_two_prior_lines', models.BooleanField(default=False, help_text='≥2 prior lines of therapy')),
                ('meets_three_prior_lines', models.BooleanField(default=False, help_text='≥3 prior lines of therapy')),
                ('meets_one_prior_platinum', models.BooleanField(default=False, help_text='≥1 prior platinum line')),
                ('meets_platinum_refractory', models.BooleanField(default=False, help_text='Platinum refractory')),
                ('meets_immunotherapy_naive', models.BooleanField(default=True, help_text='Immunotherapy naive')),
                ('current_treatment_status', models.CharField(choices=[('NAIVE', 'Treatment Naive'), ('PREV_TX', 'Previously Treated'), ('REFRACTORY', 'Refractory'), ('RELAPSED', 'Relapsed'), ('REL_REF', 'Relapsed/Refractory')], help_text='Current treatment status', max_length=20)),
                ('last_treatment_date', models.DateField(blank=True, help_text='Last treatment date', null=True)),
                ('washout_period_met', models.BooleanField(blank=True, help_text='Washout period satisfied', null=True)),
                ('best_response_ever', models.CharField(blank=True, choices=[('CR', 'Complete Response'), ('PR', 'Partial Response'), ('SD', 'Stable Disease'), ('PD', 'Progressive Disease'), ('NE', 'Not Evaluable')], help_text='Best response ever achieved', max_length=20)),
                ('progression_on_last_line', models.BooleanField(blank=True, help_text='Progressed on last treatment line', null=True)),
                ('calculation_algorithm', models.CharField(blank=True, help_text='Algorithm used for calculation', max_length=100)),
                ('calculation_date', models.DateTimeField(auto_now=True, help_text='Date calculation performed')),
                ('needs_manual_review', models.BooleanField(default=False, help_text='Flagged for manual review')),
                ('condition_occurrence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='treatment_eligibility', to='omop.conditionoccurrence')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='treatment_eligibility', to='omop.person')),
            ],
            options={
                'db_table': 'treatment_line_eligibility',
            },
        ),
        migrations.CreateModel(
            name='TreatmentRegimen',
            fields=[
                ('regimen_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('regimen_name', models.CharField(help_text='Standard regimen name', max_length=200)),
                ('regimen_code', models.CharField(blank=True, help_text='Standard regimen code', max_length=50)),
                ('regimen_sequence', models.IntegerField(help_text='Sequence within treatment line')),
                ('regimen_start_date', models.DateField(help_text='Start date of regimen')),
                ('regimen_end_date', models.DateField(blank=True, help_text='End date of regimen', null=True)),
                ('regimen_type', models.CharField(choices=[('SINGLE', 'Single Agent'), ('COMBO', 'Combination Therapy'), ('SEQ', 'Sequential Therapy'), ('CONC', 'Concurrent Therapy'), ('ALT', 'Alternating Therapy')], help_text='Type of regimen', max_length=20)),
                ('number_of_cycles_planned', models.IntegerField(blank=True, help_text='Planned number of cycles', null=True)),
                ('number_of_cycles_completed', models.IntegerField(blank=True, help_text='Completed number of cycles', null=True)),
                ('contains_platinum', models.BooleanField(default=False, help_text='Contains platinum agent')),
                ('contains_immunotherapy', models.BooleanField(default=False, help_text='Contains immunotherapy')),
                ('contains_targeted_therapy', models.BooleanField(default=False, help_text='Contains targeted therapy')),
                ('contains_chemotherapy', models.BooleanField(default=False, help_text='Contains chemotherapy')),
                ('contains_hormone_therapy', models.BooleanField(default=False, help_text='Contains hormone therapy')),
                ('best_response', models.CharField(blank=True, choices=[('CR', 'Complete Response'), ('PR', 'Partial Response'), ('SD', 'Stable Disease'), ('PD', 'Progressive Disease'), ('NE', 'Not Evaluable')], help_text='Best response to regimen', max_length=20)),
                ('toxicity_grade_max', models.IntegerField(blank=True, choices=[(1, 'Grade 1 - Mild'), (2, 'Grade 2 - Moderate'), (3, 'Grade 3 - Severe'), (4, 'Grade 4 - Life-threatening'), (5, 'Grade 5 - Death')], help_text='Maximum toxicity grade', null=True)),
                ('dose_reductions', models.IntegerField(default=0, help_text='Number of dose reductions')),
                ('treatment_delays', models.IntegerField(default=0, help_text='Number of treatment delays')),
                ('early_discontinuation', models.BooleanField(default=False, help_text='Discontinued early')),
                ('discontinuation_reason', models.CharField(blank=True, help_text='Reason for discontinuation', max_length=200)),
                ('performance_status_start', models.CharField(blank=True, choices=[('ECOG_0', 'ECOG 0 - Fully active'), ('ECOG_1', 'ECOG 1 - Restricted in strenuous activity'), ('ECOG_2', 'ECOG 2 - Ambulatory, capable of self-care'), ('ECOG_3', 'ECOG 3 - Limited self-care'), ('ECOG_4', 'ECOG 4 - Completely disabled'), ('KPS_100', 'Karnofsky 100% - Normal activity'), ('KPS_90', 'Karnofsky 90% - Minor signs/symptoms'), ('KPS_80', 'Karnofsky 80% - Normal activity with effort')], help_text='Performance status at start', max_length=20)),
                ('comorbidity_score', models.FloatField(blank=True, help_text='Comorbidity score', null=True)),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='treatment_regimens', to='omop.person')),
                ('treatment_line', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='regimens', to='omop.treatmentline')),
            ],
            options={
                'db_table': 'treatment_regimen',
            },
        ),
        migrations.CreateModel(
            name='TreatmentLineComponent',
            fields=[
                ('component_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('component_type', models.CharField(choices=[('DRUG', 'Drug Exposure'), ('PROCEDURE', 'Procedure'), ('RADIATION', 'Radiation Therapy'), ('SURGERY', 'Surgical Procedure')], help_text='Type of treatment component', max_length=20)),
                ('component_role', models.CharField(choices=[('PRIMARY', 'Primary Agent'), ('COMBINATION', 'Combination Agent'), ('SUPPORTIVE', 'Supportive Care'), ('PREMEDICATION', 'Premedication')], help_text='Role within treatment line', max_length=20)),
                ('drug_classification', models.CharField(blank=True, choices=[('PLATINUM', 'Platinum-based Therapy'), ('IMMUNO', 'Immunotherapy'), ('TARGETED', 'Targeted Therapy'), ('CHEMO', 'Traditional Chemotherapy'), ('HORMONE', 'Hormone Therapy'), ('RADIATION', 'Radiation Therapy'), ('SCT', 'Stem Cell Transplant'), ('SURGERY', 'Surgical Intervention'), ('TRIAL', 'Clinical Trial Drug')], help_text='Drug classification', max_length=50)),
                ('component_start_date', models.DateField(help_text='Start date of component')),
                ('component_end_date', models.DateField(blank=True, help_text='End date of component', null=True)),
                ('is_platinum_agent', models.BooleanField(default=False, help_text='Is platinum-based agent')),
                ('is_immunotherapy', models.BooleanField(default=False, help_text='Is immunotherapy agent')),
                ('is_targeted_therapy', models.BooleanField(default=False, help_text='Is targeted therapy')),
                ('is_novel_agent', models.BooleanField(default=False, help_text='Is novel/investigational agent')),
                ('fda_approved', models.BooleanField(blank=True, help_text='FDA approved for indication', null=True)),
                ('approval_date', models.DateField(blank=True, help_text='FDA approval date', null=True)),
                ('off_label_use', models.BooleanField(default=False, help_text='Used off-label')),
                ('drug_exposure', models.ForeignKey(blank=True, help_text='Related drug exposure', null=True, on_delete=django.db.models.deletion.CASCADE, to='omop.drugexposure')),
                ('indication_concept', models.ForeignKey(blank=True, help_text='Indication for treatment component', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='treatment_indications', to='omop.concept')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='treatment_components', to='omop.person')),
                ('procedure_occurrence', models.ForeignKey(blank=True, help_text='Related procedure', null=True, on_delete=django.db.models.deletion.CASCADE, to='omop.procedureoccurrence')),
                ('treatment_line', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='components', to='omop.treatmentline')),
                ('treatment_regimen', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='components', to='omop.treatmentregimen')),
            ],
            options={
                'db_table': 'treatment_line_component',
            },
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='treatment_regimen',
            field=models.ForeignKey(blank=True, help_text='Associated regimen', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='drug_exposures', to='omop.treatmentregimen'),
        ),
        migrations.AddIndex(
            model_name='drugexposure',
            index=models.Index(fields=['treatment_line'], name='drug_exposu_treatme_dee604_idx'),
        ),
        migrations.AddIndex(
            model_name='drugexposure',
            index=models.Index(fields=['treatment_regimen'], name='drug_exposu_treatme_03527e_idx'),
        ),
        migrations.AddIndex(
            model_name='drugexposure',
            index=models.Index(fields=['drug_classification'], name='drug_exposu_drug_cl_42ff5b_idx'),
        ),
        migrations.AddIndex(
            model_name='drugexposure',
            index=models.Index(fields=['is_platinum_agent'], name='drug_exposu_is_plat_733c83_idx'),
        ),
        migrations.AddIndex(
            model_name='drugexposure',
            index=models.Index(fields=['is_immunotherapy'], name='drug_exposu_is_immu_736d14_idx'),
        ),
        migrations.AddIndex(
            model_name='drugexposure',
            index=models.Index(fields=['is_targeted_therapy'], name='drug_exposu_is_targ_d67010_idx'),
        ),
        migrations.AddIndex(
            model_name='drugexposure',
            index=models.Index(fields=['clinical_trial_drug'], name='drug_exposu_clinica_768a5f_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentline',
            index=models.Index(fields=['person'], name='treatment_l_person__c9b0c4_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentline',
            index=models.Index(fields=['condition_occurrence'], name='treatment_l_conditi_836edf_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentline',
            index=models.Index(fields=['line_number'], name='treatment_l_line_nu_d23dc8_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentline',
            index=models.Index(fields=['line_start_date'], name='treatment_l_line_st_41f98e_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentline',
            index=models.Index(fields=['treatment_intent'], name='treatment_l_treatme_a72b58_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentline',
            index=models.Index(fields=['platinum_based'], name='treatment_l_platinu_f5fcff_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentline',
            index=models.Index(fields=['immunotherapy_based'], name='treatment_l_immunot_c05b72_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentline',
            index=models.Index(fields=['targeted_therapy_based'], name='treatment_l_targete_c5d591_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentline',
            index=models.Index(fields=['treatment_response'], name='treatment_l_treatme_1bf729_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='treatmentline',
            unique_together={('person', 'condition_occurrence', 'line_number')},
        ),
        migrations.AddIndex(
            model_name='treatmentlineeligibility',
            index=models.Index(fields=['person'], name='treatment_l_person__ef51f9_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentlineeligibility',
            index=models.Index(fields=['condition_occurrence'], name='treatment_l_conditi_cce0a8_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentlineeligibility',
            index=models.Index(fields=['assessment_date'], name='treatment_l_assessm_a5c167_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentlineeligibility',
            index=models.Index(fields=['total_lines_received'], name='treatment_l_total_l_a2e3d6_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentlineeligibility',
            index=models.Index(fields=['meets_one_prior_line'], name='treatment_l_meets_o_81b8a0_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentlineeligibility',
            index=models.Index(fields=['meets_one_prior_platinum'], name='treatment_l_meets_o_c08f43_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentlineeligibility',
            index=models.Index(fields=['meets_platinum_refractory'], name='treatment_l_meets_p_7f9afe_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentlineeligibility',
            index=models.Index(fields=['meets_immunotherapy_naive'], name='treatment_l_meets_i_ec1983_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentlineeligibility',
            index=models.Index(fields=['current_treatment_status'], name='treatment_l_current_c5b1f7_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='treatmentlineeligibility',
            unique_together={('person', 'condition_occurrence', 'assessment_date')},
        ),
        migrations.AddIndex(
            model_name='treatmentregimen',
            index=models.Index(fields=['treatment_line'], name='treatment_r_treatme_48c356_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentregimen',
            index=models.Index(fields=['person'], name='treatment_r_person__c4e0a5_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentregimen',
            index=models.Index(fields=['regimen_start_date'], name='treatment_r_regimen_8e3c16_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentregimen',
            index=models.Index(fields=['regimen_sequence'], name='treatment_r_regimen_c6398e_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentregimen',
            index=models.Index(fields=['contains_platinum'], name='treatment_r_contain_442eba_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentregimen',
            index=models.Index(fields=['contains_immunotherapy'], name='treatment_r_contain_58974f_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentregimen',
            index=models.Index(fields=['best_response'], name='treatment_r_best_re_595b41_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='treatmentregimen',
            unique_together={('treatment_line', 'regimen_sequence')},
        ),
        migrations.AddIndex(
            model_name='treatmentlinecomponent',
            index=models.Index(fields=['treatment_line'], name='treatment_l_treatme_8a0bb7_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentlinecomponent',
            index=models.Index(fields=['treatment_regimen'], name='treatment_l_treatme_15a3a8_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentlinecomponent',
            index=models.Index(fields=['person'], name='treatment_l_person__a453f4_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentlinecomponent',
            index=models.Index(fields=['component_type'], name='treatment_l_compone_280aec_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentlinecomponent',
            index=models.Index(fields=['drug_classification'], name='treatment_l_drug_cl_0eaf47_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentlinecomponent',
            index=models.Index(fields=['is_platinum_agent'], name='treatment_l_is_plat_a333e5_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentlinecomponent',
            index=models.Index(fields=['is_immunotherapy'], name='treatment_l_is_immu_072ae1_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentlinecomponent',
            index=models.Index(fields=['component_start_date'], name='treatment_l_compone_57b3e4_idx'),
        ),
    ]
