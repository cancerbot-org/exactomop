# Generated by Django 5.2.5 on 2025-08-28 23:24

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('omop', '0002_clinicaltrialparticipation_concept_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='BiomarkerMeasurement',
            fields=[
                ('biomarker_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('biomarker_name', models.CharField(help_text='Biomarker name (e.g., PD-L1, TMB, MSI)', max_length=100)),
                ('biomarker_category', models.CharField(choices=[('PROTEIN', 'Protein Expression'), ('GENOMIC', 'Genomic Biomarker'), ('METABOLIC', 'Metabolic Biomarker'), ('IMMUNE', 'Immune Biomarker'), ('FUNCTIONAL', 'Functional Biomarker')], help_text='Category of biomarker', max_length=50)),
                ('measurement_date', models.DateField(help_text='Date of biomarker measurement')),
                ('numeric_value', models.FloatField(blank=True, help_text='Numeric biomarker value', null=True)),
                ('categorical_value', models.CharField(blank=True, help_text='Categorical result', max_length=50)),
                ('unit', models.CharField(blank=True, help_text='Unit of measurement', max_length=50)),
                ('result_interpretation', models.CharField(blank=True, choices=[('HIGH', 'High'), ('LOW', 'Low'), ('POSITIVE', 'Positive'), ('NEGATIVE', 'Negative'), ('INTERMEDIATE', 'Intermediate'), ('INDETERMINATE', 'Indeterminate')], help_text='Clinical interpretation of result', max_length=50)),
                ('threshold_value', models.FloatField(blank=True, help_text='Clinical threshold value', null=True)),
                ('threshold_operator', models.CharField(blank=True, choices=[('GT', 'Greater than'), ('GTE', 'Greater than or equal'), ('LT', 'Less than'), ('LTE', 'Less than or equal'), ('EQ', 'Equal to')], help_text='Threshold comparison operator', max_length=10)),
                ('assay_name', models.CharField(blank=True, help_text='Specific assay used', max_length=200)),
                ('assay_version', models.CharField(blank=True, help_text='Assay version', max_length=50)),
                ('laboratory', models.CharField(blank=True, help_text='Testing laboratory', max_length=200)),
                ('specimen_type', models.CharField(blank=True, help_text='Specimen type', max_length=100)),
                ('tissue_site', models.CharField(blank=True, help_text='Tissue site', max_length=100)),
                ('collection_method', models.CharField(blank=True, help_text='Collection method', max_length=100)),
                ('trial_eligibility_criterion', models.BooleanField(default=False, help_text='Used as trial eligibility criterion')),
                ('actionable_biomarker', models.BooleanField(default=False, help_text='Actionable biomarker for therapy selection')),
            ],
            options={
                'db_table': 'biomarker_measurement',
            },
        ),
        migrations.CreateModel(
            name='GenomicConcept',
            fields=[
                ('concept', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='omop.concept')),
                ('genomic_category', models.CharField(choices=[('GENE', 'Gene'), ('VARIANT', 'Variant'), ('CONSEQUENCE', 'Consequence'), ('PATHWAY', 'Pathway'), ('BIOMARKER', 'Biomarker'), ('SIGNATURE', 'Gene Signature')], help_text='Category of genomic concept', max_length=50)),
                ('gene_symbol', models.CharField(blank=True, help_text='Official gene symbol', max_length=20)),
                ('gene_aliases', models.TextField(blank=True, help_text='Alternative gene names/symbols')),
                ('chromosome', models.CharField(blank=True, help_text='Chromosome location', max_length=10)),
                ('hgnc_id', models.CharField(blank=True, help_text='HGNC gene ID', max_length=20)),
                ('ensembl_gene_id', models.CharField(blank=True, help_text='Ensembl gene ID', max_length=20)),
                ('ncbi_gene_id', models.CharField(blank=True, help_text='NCBI Gene ID', max_length=20)),
                ('clinical_actionability', models.CharField(blank=True, choices=[('HIGH', 'High'), ('MODERATE', 'Moderate'), ('LOW', 'Low'), ('UNKNOWN', 'Unknown')], help_text='Clinical actionability level', max_length=20)),
                ('therapeutic_implications', models.TextField(blank=True, help_text='Known therapeutic implications')),
            ],
            options={
                'db_table': 'genomic_concept',
            },
        ),
        migrations.CreateModel(
            name='MolecularTest',
            fields=[
                ('test_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('test_name', models.CharField(help_text='Name of molecular test/panel', max_length=200)),
                ('test_type', models.CharField(choices=[('PANEL', 'Targeted Gene Panel'), ('WES', 'Whole Exome Sequencing'), ('WGS', 'Whole Genome Sequencing'), ('RNA', 'RNA Sequencing'), ('FISH', 'Fluorescence In Situ Hybridization'), ('IHC', 'Immunohistochemistry'), ('PCR', 'Polymerase Chain Reaction'), ('LIQUID', 'Liquid Biopsy/ctDNA')], help_text='Type of molecular testing', max_length=50)),
                ('test_date', models.DateField(help_text='Date of testing')),
                ('laboratory', models.CharField(help_text='Testing laboratory', max_length=200)),
                ('laboratory_id', models.CharField(blank=True, help_text='Laboratory identifier', max_length=50)),
                ('test_version', models.CharField(blank=True, help_text='Test version/kit version', max_length=50)),
                ('specimen_type', models.CharField(help_text='Type of specimen tested', max_length=100)),
                ('specimen_site', models.CharField(blank=True, help_text='Anatomical site of specimen', max_length=100)),
                ('collection_date', models.DateField(blank=True, help_text='Specimen collection date', null=True)),
                ('overall_result', models.CharField(choices=[('POSITIVE', 'Positive'), ('NEGATIVE', 'Negative'), ('INDETERMINATE', 'Indeterminate'), ('FAILED', 'Failed')], help_text='Overall test result', max_length=50)),
                ('tumor_content', models.FloatField(blank=True, help_text='Tumor content percentage', null=True)),
                ('dna_quality', models.CharField(blank=True, help_text='DNA quality assessment', max_length=50)),
                ('actionable_alterations_count', models.IntegerField(default=0, help_text='Number of actionable alterations found')),
                ('trial_eligible', models.BooleanField(blank=True, help_text='Eligible for clinical trials based on results', null=True)),
                ('report_date', models.DateField(blank=True, help_text='Date of report', null=True)),
                ('report_url', models.URLField(blank=True, help_text='URL to full report')),
                ('raw_data_available', models.BooleanField(default=False, help_text='Raw sequencing data available')),
            ],
            options={
                'db_table': 'molecular_test',
            },
        ),
        migrations.CreateModel(
            name='OncologyConcept',
            fields=[
                ('concept', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='omop.concept')),
                ('oncology_category', models.CharField(help_text='Category (staging, histology, biomarker, site, grade)', max_length=50)),
                ('cancer_type', models.CharField(blank=True, help_text='Specific cancer type this concept applies to', max_length=100)),
                ('staging_system', models.CharField(blank=True, help_text='Staging system (AJCC, UICC, etc.)', max_length=50)),
                ('staging_system_version', models.CharField(blank=True, help_text='Version of staging system', max_length=20)),
                ('icdo_topography_code', models.CharField(blank=True, help_text='ICD-O topography code', max_length=10)),
                ('icdo_morphology_code', models.CharField(blank=True, help_text='ICD-O morphology code', max_length=10)),
                ('biomarker_type', models.CharField(blank=True, help_text='Type of biomarker (protein, genetic, etc.)', max_length=50)),
                ('measurement_method', models.CharField(blank=True, help_text='Standard measurement method', max_length=100)),
            ],
            options={
                'db_table': 'oncology_concept',
            },
        ),
        migrations.AddField(
            model_name='conditionoccurrence',
            name='ajcc_clinical_m',
            field=models.CharField(blank=True, choices=[('MX', 'MX - Distant metastasis cannot be assessed'), ('M0', 'M0 - No distant metastasis'), ('M1', 'M1 - Distant metastasis'), ('M1a', 'M1a'), ('M1b', 'M1b'), ('M1c', 'M1c')], help_text='AJCC clinical M stage', max_length=10),
        ),
        migrations.AddField(
            model_name='conditionoccurrence',
            name='ajcc_clinical_n',
            field=models.CharField(blank=True, choices=[('NX', 'NX - Regional lymph nodes cannot be assessed'), ('N0', 'N0 - No regional lymph node metastasis'), ('N1', 'N1'), ('N1a', 'N1a'), ('N1b', 'N1b'), ('N1c', 'N1c'), ('N2', 'N2'), ('N2a', 'N2a'), ('N2b', 'N2b'), ('N2c', 'N2c'), ('N3', 'N3'), ('N3a', 'N3a'), ('N3b', 'N3b'), ('N3c', 'N3c')], help_text='AJCC clinical N stage', max_length=10),
        ),
        migrations.AddField(
            model_name='conditionoccurrence',
            name='ajcc_clinical_stage',
            field=models.CharField(blank=True, choices=[('0', 'Stage 0 (in situ)'), ('I', 'Stage I'), ('IA', 'Stage IA'), ('IB', 'Stage IB'), ('II', 'Stage II'), ('IIA', 'Stage IIA'), ('IIB', 'Stage IIB'), ('III', 'Stage III'), ('IIIA', 'Stage IIIA'), ('IIIB', 'Stage IIIB'), ('IIIC', 'Stage IIIC'), ('IV', 'Stage IV'), ('IVA', 'Stage IVA'), ('IVB', 'Stage IVB'), ('UNK', 'Unknown')], help_text='AJCC clinical stage', max_length=10),
        ),
        migrations.AddField(
            model_name='conditionoccurrence',
            name='ajcc_clinical_t',
            field=models.CharField(blank=True, choices=[('TX', 'TX - Primary tumor cannot be assessed'), ('T0', 'T0 - No evidence of primary tumor'), ('Tis', 'Tis - Carcinoma in situ'), ('T1', 'T1'), ('T1a', 'T1a'), ('T1b', 'T1b'), ('T1c', 'T1c'), ('T2', 'T2'), ('T2a', 'T2a'), ('T2b', 'T2b'), ('T3', 'T3'), ('T3a', 'T3a'), ('T3b', 'T3b'), ('T4', 'T4'), ('T4a', 'T4a'), ('T4b', 'T4b'), ('T4c', 'T4c'), ('T4d', 'T4d')], help_text='AJCC clinical T stage', max_length=10),
        ),
        migrations.AddField(
            model_name='conditionoccurrence',
            name='ajcc_pathologic_m',
            field=models.CharField(blank=True, choices=[('MX', 'MX - Distant metastasis cannot be assessed'), ('M0', 'M0 - No distant metastasis'), ('M1', 'M1 - Distant metastasis'), ('M1a', 'M1a'), ('M1b', 'M1b'), ('M1c', 'M1c')], help_text='AJCC pathologic M stage', max_length=10),
        ),
        migrations.AddField(
            model_name='conditionoccurrence',
            name='ajcc_pathologic_n',
            field=models.CharField(blank=True, choices=[('NX', 'NX - Regional lymph nodes cannot be assessed'), ('N0', 'N0 - No regional lymph node metastasis'), ('N1', 'N1'), ('N1a', 'N1a'), ('N1b', 'N1b'), ('N1c', 'N1c'), ('N2', 'N2'), ('N2a', 'N2a'), ('N2b', 'N2b'), ('N2c', 'N2c'), ('N3', 'N3'), ('N3a', 'N3a'), ('N3b', 'N3b'), ('N3c', 'N3c')], help_text='AJCC pathologic N stage', max_length=10),
        ),
        migrations.AddField(
            model_name='conditionoccurrence',
            name='ajcc_pathologic_stage',
            field=models.CharField(blank=True, choices=[('0', 'Stage 0 (in situ)'), ('I', 'Stage I'), ('IA', 'Stage IA'), ('IB', 'Stage IB'), ('II', 'Stage II'), ('IIA', 'Stage IIA'), ('IIB', 'Stage IIB'), ('III', 'Stage III'), ('IIIA', 'Stage IIIA'), ('IIIB', 'Stage IIIB'), ('IIIC', 'Stage IIIC'), ('IV', 'Stage IV'), ('IVA', 'Stage IVA'), ('IVB', 'Stage IVB'), ('UNK', 'Unknown')], help_text='AJCC pathologic stage', max_length=10),
        ),
        migrations.AddField(
            model_name='conditionoccurrence',
            name='ajcc_pathologic_t',
            field=models.CharField(blank=True, choices=[('TX', 'TX - Primary tumor cannot be assessed'), ('T0', 'T0 - No evidence of primary tumor'), ('Tis', 'Tis - Carcinoma in situ'), ('T1', 'T1'), ('T1a', 'T1a'), ('T1b', 'T1b'), ('T1c', 'T1c'), ('T2', 'T2'), ('T2a', 'T2a'), ('T2b', 'T2b'), ('T3', 'T3'), ('T3a', 'T3a'), ('T3b', 'T3b'), ('T4', 'T4'), ('T4a', 'T4a'), ('T4b', 'T4b'), ('T4c', 'T4c'), ('T4d', 'T4d')], help_text='AJCC pathologic T stage', max_length=10),
        ),
        migrations.AddField(
            model_name='conditionoccurrence',
            name='behavior_concept',
            field=models.ForeignKey(blank=True, help_text='Tumor behavior concept (benign, malignant, etc.)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='behaviors', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='conditionoccurrence',
            name='cancer_episode',
            field=models.ForeignKey(blank=True, help_text='Associated cancer episode for progression tracking', null=True, on_delete=django.db.models.deletion.SET_NULL, to='omop.episode'),
        ),
        migrations.AddField(
            model_name='conditionoccurrence',
            name='estrogen_receptor_status',
            field=models.CharField(blank=True, choices=[('POS', 'Positive'), ('NEG', 'Negative'), ('EQU', 'Equivocal'), ('UNK', 'Unknown'), ('NT', 'Not Tested')], help_text='Estrogen receptor status', max_length=10),
        ),
        migrations.AddField(
            model_name='conditionoccurrence',
            name='her2_status',
            field=models.CharField(blank=True, choices=[('POS', 'Positive'), ('NEG', 'Negative'), ('EQU', 'Equivocal'), ('UNK', 'Unknown'), ('NT', 'Not Tested')], help_text='HER2 status', max_length=10),
        ),
        migrations.AddField(
            model_name='conditionoccurrence',
            name='histologic_grade',
            field=models.CharField(blank=True, choices=[('GX', 'GX - Grade cannot be assessed'), ('G1', 'G1 - Well differentiated'), ('G2', 'G2 - Moderately differentiated'), ('G3', 'G3 - Poorly differentiated'), ('G4', 'G4 - Undifferentiated')], help_text='Histologic grade', max_length=10),
        ),
        migrations.AddField(
            model_name='conditionoccurrence',
            name='histology_concept',
            field=models.ForeignKey(blank=True, help_text='Histology/morphology concept (ICD-O, SNOMED)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='histologies', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='conditionoccurrence',
            name='nuclear_grade',
            field=models.CharField(blank=True, choices=[('GX', 'GX - Grade cannot be assessed'), ('G1', 'G1 - Well differentiated'), ('G2', 'G2 - Moderately differentiated'), ('G3', 'G3 - Poorly differentiated'), ('G4', 'G4 - Undifferentiated')], help_text='Nuclear grade', max_length=10),
        ),
        migrations.AddField(
            model_name='conditionoccurrence',
            name='primary_site_concept',
            field=models.ForeignKey(blank=True, help_text='Primary tumor site concept (ICD-O topography)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='primary_sites', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='conditionoccurrence',
            name='progesterone_receptor_status',
            field=models.CharField(blank=True, choices=[('POS', 'Positive'), ('NEG', 'Negative'), ('EQU', 'Equivocal'), ('UNK', 'Unknown'), ('NT', 'Not Tested')], help_text='Progesterone receptor status', max_length=10),
        ),
        migrations.AddField(
            model_name='conditionoccurrence',
            name='staging_system',
            field=models.CharField(blank=True, help_text='Staging system used (AJCC, UICC, etc.)', max_length=50),
        ),
        migrations.AddField(
            model_name='conditionoccurrence',
            name='staging_system_version',
            field=models.CharField(blank=True, help_text='Version of staging system', max_length=20),
        ),
        migrations.AddField(
            model_name='conditionoccurrence',
            name='tumor_laterality',
            field=models.CharField(blank=True, choices=[('R', 'Right'), ('L', 'Left'), ('B', 'Bilateral'), ('M', 'Midline'), ('U', 'Unknown'), ('N', 'Not Applicable')], help_text='Laterality of the tumor', max_length=10),
        ),
        migrations.AddField(
            model_name='episode',
            name='disease_status',
            field=models.CharField(blank=True, help_text='Disease status (active, remission, progression, recurrence)', max_length=50),
        ),
        migrations.AddField(
            model_name='episode',
            name='episode_source_concept',
            field=models.ForeignKey(blank=True, help_text='Source episode concept', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='episode_sources', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='episode',
            name='episode_source_value',
            field=models.CharField(blank=True, help_text='Source episode identifier', max_length=50),
        ),
        migrations.AddField(
            model_name='episode',
            name='episode_type',
            field=models.CharField(blank=True, help_text='Episode type (primary_diagnosis, progression, recurrence, remission)', max_length=50),
        ),
        migrations.AddField(
            model_name='episode',
            name='parent_episode',
            field=models.ForeignKey(blank=True, help_text='Parent episode for progression/recurrence tracking', null=True, on_delete=django.db.models.deletion.CASCADE, to='omop.episode'),
        ),
        migrations.AddField(
            model_name='episode',
            name='primary_cancer_condition',
            field=models.ForeignKey(blank=True, help_text='Primary cancer condition for this episode', null=True, on_delete=django.db.models.deletion.SET_NULL, to='omop.conditionoccurrence'),
        ),
        migrations.AddField(
            model_name='episode',
            name='response_to_treatment',
            field=models.CharField(blank=True, help_text='Response to treatment (complete_response, partial_response, etc.)', max_length=50),
        ),
        migrations.AddField(
            model_name='genomicvariant',
            name='allele_fraction',
            field=models.FloatField(blank=True, help_text='Tumor allele fraction', null=True),
        ),
        migrations.AddField(
            model_name='genomicvariant',
            name='biomarker_status',
            field=models.CharField(blank=True, choices=[('POS', 'Positive'), ('NEG', 'Negative'), ('EQU', 'Equivocal'), ('UNK', 'Unknown'), ('NT', 'Not Tested')], help_text='Biomarker status for trials', max_length=10),
        ),
        migrations.AddField(
            model_name='genomicvariant',
            name='clinvar_id',
            field=models.CharField(blank=True, help_text='ClinVar variant ID', max_length=50),
        ),
        migrations.AddField(
            model_name='genomicvariant',
            name='consequence_type',
            field=models.CharField(blank=True, help_text='Variant consequence type', max_length=100),
        ),
        migrations.AddField(
            model_name='genomicvariant',
            name='copy_number',
            field=models.FloatField(blank=True, help_text='Copy number value', null=True),
        ),
        migrations.AddField(
            model_name='genomicvariant',
            name='cosmic_id',
            field=models.CharField(blank=True, help_text='COSMIC variant ID', max_length=50),
        ),
        migrations.AddField(
            model_name='genomicvariant',
            name='dbsnp_id',
            field=models.CharField(blank=True, help_text='dbSNP rs ID', max_length=50),
        ),
        migrations.AddField(
            model_name='genomicvariant',
            name='eligibility_relevant',
            field=models.BooleanField(default=False, help_text='Relevant for clinical trial eligibility'),
        ),
        migrations.AddField(
            model_name='genomicvariant',
            name='expression_level',
            field=models.FloatField(blank=True, help_text='Gene expression level', null=True),
        ),
        migrations.AddField(
            model_name='genomicvariant',
            name='ga4gh_id',
            field=models.CharField(blank=True, help_text='GA4GH variant ID', max_length=100),
        ),
        migrations.AddField(
            model_name='genomicvariant',
            name='gene_concept',
            field=models.ForeignKey(blank=True, help_text='OMOP concept for gene', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='gene_variants', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='genomicvariant',
            name='molecular_alteration',
            field=models.CharField(blank=True, choices=[('BRCA1', 'BRCA1 Mutation'), ('BRCA2', 'BRCA2 Mutation'), ('ESR1', 'ESR1 Mutation'), ('PIK3CA', 'PIK3CA Mutation'), ('HER2_AMP', 'HER2 Amplification'), ('EGFR', 'EGFR Mutation'), ('KRAS', 'KRAS Mutation'), ('TP53', 'TP53 Mutation'), ('MSI_H', 'Microsatellite Instability High'), ('TMB_H', 'Tumor Mutational Burden High'), ('PDL1_H', 'PD-L1 High Expression'), ('NTRK', 'NTRK Gene Fusion')], help_text='Standardized molecular alteration type', max_length=50),
        ),
        migrations.AddField(
            model_name='genomicvariant',
            name='protein_change',
            field=models.CharField(blank=True, help_text='Protein change notation', max_length=200),
        ),
        migrations.AddField(
            model_name='genomicvariant',
            name='test_kit',
            field=models.CharField(blank=True, help_text='Specific test kit or panel used', max_length=100),
        ),
        migrations.AddField(
            model_name='genomicvariant',
            name='transcript_id',
            field=models.CharField(blank=True, help_text='Transcript ID (e.g., ENST)', max_length=50),
        ),
        migrations.AddField(
            model_name='measurement',
            name='assay_method',
            field=models.CharField(blank=True, help_text='Specific assay method used', max_length=100),
        ),
        migrations.AddField(
            model_name='measurement',
            name='biomarker_type',
            field=models.CharField(blank=True, help_text='Type of biomarker (protein, genomic, metabolic)', max_length=50),
        ),
        migrations.AddField(
            model_name='measurement',
            name='clinical_interpretation',
            field=models.TextField(blank=True, help_text='Clinical interpretation of result'),
        ),
        migrations.AddField(
            model_name='measurement',
            name='loinc_code',
            field=models.CharField(blank=True, help_text='LOINC code for measurement', max_length=20),
        ),
        migrations.AddField(
            model_name='measurement',
            name='reference_range_text',
            field=models.CharField(blank=True, help_text='Text description of reference range', max_length=200),
        ),
        migrations.AddField(
            model_name='measurement',
            name='snomed_code',
            field=models.CharField(blank=True, help_text='SNOMED code for measurement', max_length=20),
        ),
        migrations.AddField(
            model_name='observation',
            name='assay_type',
            field=models.CharField(blank=True, help_text='Type of molecular assay', max_length=100),
        ),
        migrations.AddField(
            model_name='observation',
            name='clinical_significance',
            field=models.CharField(blank=True, help_text='Clinical significance of observation', max_length=100),
        ),
        migrations.AddField(
            model_name='observation',
            name='detection_method',
            field=models.CharField(blank=True, help_text='Detection method used', max_length=100),
        ),
        migrations.AddField(
            model_name='observation',
            name='genomic_variant',
            field=models.ForeignKey(blank=True, help_text='Related genomic variant', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='observations', to='omop.genomicvariant'),
        ),
        migrations.AddField(
            model_name='observation',
            name='interpretation_code',
            field=models.CharField(blank=True, help_text='Standardized interpretation code', max_length=50),
        ),
        migrations.AlterField(
            model_name='genomicvariant',
            name='clinical_significance',
            field=models.CharField(blank=True, choices=[('PATH', 'Pathogenic'), ('LPATH', 'Likely Pathogenic'), ('BEN', 'Benign'), ('LBEN', 'Likely Benign'), ('VUS', 'Variant of Uncertain Significance'), ('DRUG', 'Drug Response'), ('RISK', 'Risk Factor'), ('PROT', 'Protective')], help_text='Clinical significance (pathogenic, benign, etc.)', max_length=50),
        ),
        migrations.AlterField(
            model_name='genomicvariant',
            name='testing_method',
            field=models.CharField(blank=True, choices=[('PANEL', 'Targeted Gene Panel'), ('WES', 'Whole Exome Sequencing'), ('WGS', 'Whole Genome Sequencing'), ('RNA', 'RNA Sequencing'), ('FISH', 'Fluorescence In Situ Hybridization'), ('IHC', 'Immunohistochemistry'), ('PCR', 'Polymerase Chain Reaction'), ('LIQUID', 'Liquid Biopsy/ctDNA')], help_text='Testing method used', max_length=100),
        ),
        migrations.AlterField(
            model_name='genomicvariant',
            name='variant_type',
            field=models.CharField(blank=True, choices=[('SNV', 'Single Nucleotide Variant'), ('INDEL', 'Insertion/Deletion'), ('CNV', 'Copy Number Variant'), ('SV', 'Structural Variant'), ('FUSION', 'Gene Fusion'), ('MSI', 'Microsatellite Instability'), ('TMB', 'Tumor Mutational Burden'), ('LOH', 'Loss of Heterozygosity')], help_text='Type of variant (SNV, CNV, etc.)', max_length=50),
        ),
        migrations.AddIndex(
            model_name='conditionoccurrence',
            index=models.Index(fields=['primary_site_concept'], name='condition_o_primary_ffbdac_idx'),
        ),
        migrations.AddIndex(
            model_name='conditionoccurrence',
            index=models.Index(fields=['histology_concept'], name='condition_o_histolo_884dbc_idx'),
        ),
        migrations.AddIndex(
            model_name='conditionoccurrence',
            index=models.Index(fields=['tumor_laterality'], name='condition_o_tumor_l_c6b051_idx'),
        ),
        migrations.AddIndex(
            model_name='conditionoccurrence',
            index=models.Index(fields=['ajcc_clinical_stage'], name='condition_o_ajcc_cl_36dad7_idx'),
        ),
        migrations.AddIndex(
            model_name='conditionoccurrence',
            index=models.Index(fields=['ajcc_pathologic_stage'], name='condition_o_ajcc_pa_958fc9_idx'),
        ),
        migrations.AddIndex(
            model_name='conditionoccurrence',
            index=models.Index(fields=['histologic_grade'], name='condition_o_histolo_eed54a_idx'),
        ),
        migrations.AddIndex(
            model_name='conditionoccurrence',
            index=models.Index(fields=['estrogen_receptor_status'], name='condition_o_estroge_1f89c4_idx'),
        ),
        migrations.AddIndex(
            model_name='conditionoccurrence',
            index=models.Index(fields=['progesterone_receptor_status'], name='condition_o_progest_04192c_idx'),
        ),
        migrations.AddIndex(
            model_name='conditionoccurrence',
            index=models.Index(fields=['her2_status'], name='condition_o_her2_st_d3b23a_idx'),
        ),
        migrations.AddIndex(
            model_name='conditionoccurrence',
            index=models.Index(fields=['cancer_episode'], name='condition_o_cancer__3d85ce_idx'),
        ),
        migrations.AddIndex(
            model_name='conditionoccurrence',
            index=models.Index(fields=['staging_system'], name='condition_o_staging_725be7_idx'),
        ),
        migrations.AddIndex(
            model_name='episode',
            index=models.Index(fields=['episode_type'], name='episode_episode_5f188f_idx'),
        ),
        migrations.AddIndex(
            model_name='episode',
            index=models.Index(fields=['parent_episode'], name='episode_parent__bed27a_idx'),
        ),
        migrations.AddIndex(
            model_name='episode',
            index=models.Index(fields=['primary_cancer_condition'], name='episode_primary_bbdd95_idx'),
        ),
        migrations.AddIndex(
            model_name='genomicvariant',
            index=models.Index(fields=['molecular_alteration'], name='genomic_var_molecul_a67267_idx'),
        ),
        migrations.AddIndex(
            model_name='genomicvariant',
            index=models.Index(fields=['biomarker_status'], name='genomic_var_biomark_f266f4_idx'),
        ),
        migrations.AddIndex(
            model_name='genomicvariant',
            index=models.Index(fields=['eligibility_relevant'], name='genomic_var_eligibi_ac2e0b_idx'),
        ),
        migrations.AddIndex(
            model_name='genomicvariant',
            index=models.Index(fields=['clinvar_id'], name='genomic_var_clinvar_a29fb5_idx'),
        ),
        migrations.AddIndex(
            model_name='genomicvariant',
            index=models.Index(fields=['cosmic_id'], name='genomic_var_cosmic__08fa72_idx'),
        ),
        migrations.AddField(
            model_name='biomarkermeasurement',
            name='biomarker_concept',
            field=models.ForeignKey(help_text='OMOP concept for biomarker', on_delete=django.db.models.deletion.PROTECT, related_name='biomarker_measurements', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='biomarkermeasurement',
            name='measurement',
            field=models.ForeignKey(blank=True, help_text='Related OMOP measurement record', null=True, on_delete=django.db.models.deletion.SET_NULL, to='omop.measurement'),
        ),
        migrations.AddField(
            model_name='biomarkermeasurement',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='biomarker_measurements', to='omop.person'),
        ),
        migrations.AddIndex(
            model_name='genomicconcept',
            index=models.Index(fields=['genomic_category'], name='genomic_con_genomic_194674_idx'),
        ),
        migrations.AddIndex(
            model_name='genomicconcept',
            index=models.Index(fields=['gene_symbol'], name='genomic_con_gene_sy_ace9ee_idx'),
        ),
        migrations.AddIndex(
            model_name='genomicconcept',
            index=models.Index(fields=['clinical_actionability'], name='genomic_con_clinica_355be5_idx'),
        ),
        migrations.AddField(
            model_name='moleculartest',
            name='observation',
            field=models.ForeignKey(blank=True, help_text='Related OMOP observation record', null=True, on_delete=django.db.models.deletion.SET_NULL, to='omop.observation'),
        ),
        migrations.AddField(
            model_name='moleculartest',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='molecular_tests', to='omop.person'),
        ),
        migrations.AddField(
            model_name='observation',
            name='molecular_test_id',
            field=models.ForeignKey(blank=True, help_text='Related molecular test', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='observations', to='omop.moleculartest'),
        ),
        migrations.AddIndex(
            model_name='oncologyconcept',
            index=models.Index(fields=['oncology_category'], name='oncology_co_oncolog_322738_idx'),
        ),
        migrations.AddIndex(
            model_name='oncologyconcept',
            index=models.Index(fields=['cancer_type'], name='oncology_co_cancer__a03f2b_idx'),
        ),
        migrations.AddIndex(
            model_name='oncologyconcept',
            index=models.Index(fields=['staging_system'], name='oncology_co_staging_c3c64f_idx'),
        ),
        migrations.AddIndex(
            model_name='oncologyconcept',
            index=models.Index(fields=['biomarker_type'], name='oncology_co_biomark_62ccda_idx'),
        ),
        migrations.AddIndex(
            model_name='biomarkermeasurement',
            index=models.Index(fields=['person'], name='biomarker_m_person__7a9fb3_idx'),
        ),
        migrations.AddIndex(
            model_name='biomarkermeasurement',
            index=models.Index(fields=['biomarker_name'], name='biomarker_m_biomark_111ec5_idx'),
        ),
        migrations.AddIndex(
            model_name='biomarkermeasurement',
            index=models.Index(fields=['measurement_date'], name='biomarker_m_measure_4c4306_idx'),
        ),
        migrations.AddIndex(
            model_name='biomarkermeasurement',
            index=models.Index(fields=['biomarker_category'], name='biomarker_m_biomark_c53f75_idx'),
        ),
        migrations.AddIndex(
            model_name='biomarkermeasurement',
            index=models.Index(fields=['result_interpretation'], name='biomarker_m_result__2ed69c_idx'),
        ),
        migrations.AddIndex(
            model_name='biomarkermeasurement',
            index=models.Index(fields=['trial_eligibility_criterion'], name='biomarker_m_trial_e_63f663_idx'),
        ),
        migrations.AddIndex(
            model_name='biomarkermeasurement',
            index=models.Index(fields=['actionable_biomarker'], name='biomarker_m_actiona_980eee_idx'),
        ),
        migrations.AddIndex(
            model_name='moleculartest',
            index=models.Index(fields=['person'], name='molecular_t_person__1c2ad2_idx'),
        ),
        migrations.AddIndex(
            model_name='moleculartest',
            index=models.Index(fields=['test_date'], name='molecular_t_test_da_b0dc13_idx'),
        ),
        migrations.AddIndex(
            model_name='moleculartest',
            index=models.Index(fields=['test_type'], name='molecular_t_test_ty_9a8639_idx'),
        ),
        migrations.AddIndex(
            model_name='moleculartest',
            index=models.Index(fields=['overall_result'], name='molecular_t_overall_fbec4e_idx'),
        ),
        migrations.AddIndex(
            model_name='moleculartest',
            index=models.Index(fields=['trial_eligible'], name='molecular_t_trial_e_f642d4_idx'),
        ),
    ]
