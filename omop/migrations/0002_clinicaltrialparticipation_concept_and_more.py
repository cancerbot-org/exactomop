# Generated by Django 5.2.5 on 2025-08-28 22:38

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('omop', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ClinicalTrialParticipation',
            fields=[
                ('participation_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('trial_source_id', models.CharField(help_text='Reference to Trial.code in exactmodels', max_length=100)),
                ('trial_concept_id', models.IntegerField(blank=True, help_text='OMOP concept for trial type', null=True)),
                ('enrollment_date', models.DateField(help_text='Date patient enrolled in trial')),
                ('enrollment_datetime', models.DateTimeField(blank=True, help_text='Precise enrollment datetime', null=True)),
                ('completion_date', models.DateField(blank=True, help_text='Date participation ended', null=True)),
                ('completion_datetime', models.DateTimeField(blank=True, help_text='Precise completion datetime', null=True)),
                ('participation_status', models.CharField(blank=True, help_text='Current participation status', max_length=50)),
                ('randomization_arm', models.CharField(blank=True, help_text='Trial arm assignment', max_length=50)),
                ('withdrawal_reason', models.CharField(blank=True, help_text='Reason for withdrawal if applicable', max_length=100)),
                ('enrolling_provider_id', models.IntegerField(blank=True, help_text='Provider who enrolled patient', null=True)),
                ('enrollment_visit_id', models.IntegerField(blank=True, help_text='Visit when enrolled', null=True)),
                ('participation_source_value', models.CharField(blank=True, help_text='Source participation ID', max_length=50)),
            ],
            options={
                'db_table': 'clinical_trial_participation',
            },
        ),
        migrations.CreateModel(
            name='Concept',
            fields=[
                ('concept_id', models.IntegerField(primary_key=True, serialize=False)),
                ('concept_name', models.CharField(max_length=255)),
                ('domain_id', models.CharField(help_text='Domain (Measurement, Drug, Condition, etc.)', max_length=20)),
                ('vocabulary_id', models.CharField(help_text='Vocabulary (SNOMED, LOINC, RxNorm, etc.)', max_length=20)),
                ('concept_class_id', models.CharField(help_text='Concept class', max_length=20)),
                ('standard_concept', models.CharField(blank=True, help_text='S=Standard, C=Classification', max_length=1)),
                ('concept_code', models.CharField(help_text='Source code', max_length=50)),
                ('valid_start_date', models.DateField(help_text='Date concept became valid')),
                ('valid_end_date', models.DateField(help_text='Date concept became invalid')),
                ('invalid_reason', models.CharField(blank=True, help_text='Reason concept is invalid', max_length=1)),
            ],
            options={
                'db_table': 'concept',
            },
        ),
        migrations.CreateModel(
            name='ConceptRelationship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relationship_id', models.CharField(help_text='Type of relationship (Maps to, Is a, etc.)', max_length=20)),
                ('valid_start_date', models.DateField()),
                ('valid_end_date', models.DateField()),
                ('invalid_reason', models.CharField(blank=True, max_length=1)),
            ],
            options={
                'db_table': 'concept_relationship',
            },
        ),
        migrations.CreateModel(
            name='GenomicVariant',
            fields=[
                ('variant_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('gene_symbol', models.CharField(help_text='Gene symbol (e.g., BRCA1, TP53)', max_length=20)),
                ('hgvs_notation', models.CharField(blank=True, help_text='HGVS notation for variant', max_length=200)),
                ('variant_type', models.CharField(blank=True, help_text='Type of variant (SNV, CNV, etc.)', max_length=50)),
                ('chromosome', models.CharField(blank=True, help_text='Chromosome location', max_length=10)),
                ('genomic_position', models.BigIntegerField(blank=True, help_text='Genomic position', null=True)),
                ('reference_allele', models.CharField(blank=True, help_text='Reference allele sequence', max_length=200)),
                ('alternate_allele', models.CharField(blank=True, help_text='Alternate allele sequence', max_length=200)),
                ('variant_allele_frequency', models.FloatField(blank=True, help_text='Variant allele frequency', null=True)),
                ('clinical_significance', models.CharField(blank=True, help_text='Clinical significance (pathogenic, benign, etc.)', max_length=50)),
                ('interpretation', models.TextField(blank=True, help_text='Clinical interpretation of variant')),
                ('test_date', models.DateField(help_text='Date of genetic testing')),
                ('testing_method', models.CharField(blank=True, help_text='Testing method used', max_length=100)),
                ('laboratory', models.CharField(blank=True, help_text='Testing laboratory', max_length=100)),
                ('read_depth', models.IntegerField(blank=True, help_text='Sequencing read depth', null=True)),
                ('quality_score', models.FloatField(blank=True, help_text='Variant quality score', null=True)),
            ],
            options={
                'db_table': 'genomic_variant',
            },
        ),
        migrations.CreateModel(
            name='PatientInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('languages', models.TextField(blank=True, help_text="Language codes like 'en', 'de', 'es'", null=True)),
                ('language_skill_level', models.TextField(blank=True, help_text="'speak' or 'write'", null=True)),
                ('patient_age', models.IntegerField(blank=True, help_text="What is the patient's age?", null=True)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('UN', 'Unknown'), ('', 'Empty')], help_text="Patient's gender", max_length=2, null=True)),
                ('weight', models.FloatField(blank=True, help_text="Patient's weight", null=True)),
                ('weight_units', models.CharField(blank=True, choices=[('kg', 'Kilograms'), ('lb', 'Pounds')], default='kg', help_text="Units for the patient's weight", max_length=2, null=True)),
                ('height', models.FloatField(blank=True, help_text="Patient's height", null=True)),
                ('height_units', models.CharField(blank=True, choices=[('cm', 'Centimeters'), ('in', 'Inches')], default='cm', help_text="Units for the patient's height", max_length=2, null=True)),
                ('bmi', models.FloatField(blank=True, editable=False, help_text="Patient's BMI (computed)", null=True)),
                ('ethnicity', models.TextField(blank=True, null=True)),
                ('systolic_blood_pressure', models.IntegerField(blank=True, help_text="Patient's systolic blood pressure", null=True)),
                ('diastolic_blood_pressure', models.IntegerField(blank=True, help_text="Patient's diastolic blood pressure", null=True)),
                ('country', models.CharField(blank=True, max_length=255, null=True)),
                ('region', models.CharField(blank=True, max_length=255, null=True)),
                ('postal_code', models.CharField(blank=True, max_length=20, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('disease', models.TextField(blank=True, default='multiple myeloma', null=True)),
                ('stage', models.TextField(blank=True, null=True)),
                ('karnofsky_performance_score', models.IntegerField(blank=True, default=100, null=True)),
                ('ecog_performance_status', models.IntegerField(blank=True, null=True)),
                ('no_other_active_malignancies', models.BooleanField(default=True)),
                ('no_pre_existing_conditions', models.BooleanField(blank=True, null=True)),
                ('peripheral_neuropathy_grade', models.IntegerField(blank=True, null=True)),
                ('cytogenic_markers', models.TextField(blank=True, null=True)),
                ('molecular_markers', models.TextField(blank=True, null=True)),
                ('stem_cell_transplant_history', models.JSONField(blank=True, default=list, null=True)),
                ('plasma_cell_leukemia', models.BooleanField(blank=True, default=True, null=True)),
                ('progression', models.TextField(blank=True, null=True)),
                ('gelf_criteria_status', models.TextField(blank=True, null=True)),
                ('flipi_score', models.IntegerField(blank=True, null=True)),
                ('flipi_score_options', models.TextField(blank=True, null=True)),
                ('tumor_grade', models.IntegerField(blank=True, null=True)),
                ('heartrate', models.IntegerField(blank=True, help_text="Patient's heart rate", null=True)),
                ('heartrate_variability', models.IntegerField(blank=True, help_text="Patient's heart rate variability", null=True)),
                ('condition_code_icd_10', models.TextField(blank=True, null=True)),
                ('condition_code_snomed_ct', models.TextField(blank=True, null=True)),
                ('prior_therapy', models.TextField(blank=True, null=True)),
                ('first_line_therapy', models.TextField(blank=True, null=True)),
                ('first_line_date', models.DateField(blank=True, null=True)),
                ('first_line_outcome', models.TextField(blank=True, null=True)),
                ('second_line_therapy', models.TextField(blank=True, null=True)),
                ('second_line_date', models.DateField(blank=True, null=True)),
                ('second_line_outcome', models.TextField(blank=True, null=True)),
                ('later_therapy', models.TextField(blank=True, null=True)),
                ('later_date', models.DateField(blank=True, null=True)),
                ('later_outcome', models.TextField(blank=True, null=True)),
                ('supportive_therapies', models.TextField(blank=True, null=True)),
                ('supportive_therapy_date', models.DateField(blank=True, null=True)),
                ('relapse_count', models.IntegerField(blank=True, null=True)),
                ('treatment_refractory_status', models.CharField(blank=True, max_length=255, null=True)),
                ('therapy_lines_count', models.IntegerField(blank=True, null=True)),
                ('line_of_therapy', models.TextField(blank=True, null=True)),
                ('absolute_neutrophile_count', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('absolute_neutrophile_count_units', models.CharField(blank=True, choices=[('CELLS/UL', 'cells/microliter'), ('CELLS/L', 'cells/Liter')], default='CELLS/UL', max_length=10, null=True)),
                ('platelet_count', models.IntegerField(blank=True, null=True)),
                ('platelet_count_units', models.CharField(blank=True, choices=[('CELLS/UL', 'cells/microliter'), ('CELLS/L', 'cells/Liter')], default='CELLS/UL', max_length=10, null=True)),
                ('white_blood_cell_count', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('white_blood_cell_count_units', models.CharField(blank=True, choices=[('CELLS/UL', 'cells/microliter'), ('CELLS/L', 'cells/Liter')], default='CELLS/L', max_length=10, null=True)),
                ('red_blood_cell_count', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('red_blood_cell_count_units', models.CharField(blank=True, choices=[('CELLS/UL', 'cells/microliter'), ('CELLS/L', 'cells/Liter')], default='CELLS/L', max_length=10, null=True)),
                ('serum_calcium_level', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('serum_calcium_level_units', models.CharField(blank=True, choices=[('MG/DL', 'mg/dL'), ('MICROMOLES/L', 'micromoles/L')], default='MG/DL', max_length=15, null=True)),
                ('creatinine_clearance_rate', models.IntegerField(blank=True, null=True)),
                ('serum_creatinine_level', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('serum_creatinine_level_units', models.CharField(blank=True, choices=[('MG/DL', 'mg/dL'), ('MICROMOLES/L', 'micromoles/L')], default='MG/DL', max_length=15, null=True)),
                ('hemoglobin_level', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('hemoglobin_level_units', models.CharField(blank=True, choices=[('G/DL', 'g/deciliter'), ('G/L', 'g/Liter')], default='G/DL', max_length=5, null=True)),
                ('bone_lesions', models.TextField(blank=True, null=True)),
                ('meets_crab', models.BooleanField(blank=True, null=True)),
                ('estimated_glomerular_filtration_rate', models.IntegerField(blank=True, null=True)),
                ('renal_adequacy_status', models.BooleanField(blank=True, null=True)),
                ('liver_enzyme_levels_ast', models.IntegerField(blank=True, null=True)),
                ('liver_enzyme_levels_alt', models.IntegerField(blank=True, null=True)),
                ('liver_enzyme_levels_alp', models.IntegerField(blank=True, null=True)),
                ('serum_bilirubin_level_total', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('serum_bilirubin_level_total_units', models.CharField(blank=True, choices=[('MG/DL', 'mg/dL'), ('MICROMOLES/L', 'micromoles/L')], default='MG/DL', max_length=15, null=True)),
                ('serum_bilirubin_level_direct', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('serum_bilirubin_level_direct_units', models.CharField(blank=True, choices=[('MG/DL', 'mg/dL'), ('MICROMOLES/L', 'micromoles/L')], default='MG/DL', max_length=15, null=True)),
                ('albumin_level', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('albumin_level_units', models.CharField(blank=True, choices=[('G/DL', 'g/deciliter'), ('G/L', 'g/Liter')], default='G/DL', max_length=15, null=True)),
                ('kappa_flc', models.IntegerField(blank=True, null=True)),
                ('lambda_flc', models.IntegerField(blank=True, null=True)),
                ('meets_slim', models.BooleanField(blank=True, null=True)),
                ('liver_enzyme_levels', models.IntegerField(blank=True, null=True)),
                ('serum_bilirubin_level', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('monoclonal_protein_serum', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('monoclonal_protein_urine', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('lactate_dehydrogenase_level', models.IntegerField(blank=True, null=True)),
                ('pulmonary_function_test_result', models.BooleanField(default=False)),
                ('bone_imaging_result', models.BooleanField(default=False)),
                ('clonal_plasma_cells', models.IntegerField(blank=True, null=True)),
                ('ejection_fraction', models.IntegerField(blank=True, null=True)),
                ('consent_capability', models.BooleanField(default=True, help_text='Does the patient have cognitive ability to consent?')),
                ('caregiver_availability_status', models.BooleanField(default=False, help_text='Is there an available caregiver for the patient?')),
                ('contraceptive_use', models.BooleanField(default=False, help_text='Does the patient use contraceptives?')),
                ('no_pregnancy_or_lactation_status', models.BooleanField(default=True, help_text='Does the patient self assess as not pregnant or lactating?')),
                ('pregnancy_test_result', models.BooleanField(default=False, help_text='Does the female patient of childbearing age have a negative test result for pregnancy?')),
                ('no_mental_health_disorder_status', models.BooleanField(default=True, help_text='Does the patient have a mental health disorder?')),
                ('no_concomitant_medication_status', models.BooleanField(default=True, help_text='Does the patient have concomitant medication?')),
                ('concomitant_medication_details', models.CharField(blank=True, help_text="Details about the patient's concomitant medications", max_length=255, null=True)),
                ('no_tobacco_use_status', models.BooleanField(default=True, help_text='Does the patient use tobacco?')),
                ('tobacco_use_details', models.CharField(blank=True, help_text="Details about the patient's tobacco use", max_length=255, null=True)),
                ('no_substance_use_status', models.BooleanField(default=True, help_text='Does the patient use substances?')),
                ('substance_use_details', models.CharField(blank=True, help_text="Details about the patient's substance use", max_length=255, null=True)),
                ('no_geographic_exposure_risk', models.BooleanField(default=True, help_text='Has the patient had geographic exposure to risk?')),
                ('geographic_exposure_risk_details', models.CharField(blank=True, help_text="Details about the patient's geographic exposure risk", max_length=255, null=True)),
                ('no_hiv_status', models.BooleanField(default=True, help_text='Does the patient has had HIV?')),
                ('no_hepatitis_b_status', models.BooleanField(default=True, help_text='Does the patient has had Hepatitis B (HBV)?')),
                ('no_hepatitis_c_status', models.BooleanField(default=True, help_text='Does the patient has had Hepatitis C (HCV)?')),
                ('no_active_infection_status', models.BooleanField(default=True, help_text='Does the patient has any active infection?')),
                ('concomitant_medications', models.TextField(blank=True, null=True)),
                ('concomitant_medication_date', models.DateField(blank=True, null=True)),
                ('remission_duration_min', models.TextField(blank=True, null=True)),
                ('washout_period_duration', models.TextField(blank=True, null=True)),
                ('hiv_status', models.BooleanField(blank=True, null=True)),
                ('hepatitis_b_status', models.BooleanField(blank=True, null=True)),
                ('hepatitis_c_status', models.BooleanField(blank=True, null=True)),
                ('last_treatment', models.DateField(blank=True, help_text='Date and time of the last treatment', null=True)),
                ('bone_only_metastasis_status', models.BooleanField(blank=True, null=True)),
                ('menopausal_status', models.TextField(blank=True, null=True)),
                ('metastatic_status', models.BooleanField(blank=True, null=True)),
                ('toxicity_grade', models.IntegerField(blank=True, null=True)),
                ('planned_therapies', models.TextField(blank=True, null=True)),
                ('histologic_type', models.TextField(blank=True, null=True)),
                ('biopsy_grade_depr', models.TextField(blank=True, null=True)),
                ('biopsy_grade', models.IntegerField(blank=True, null=True)),
                ('measurable_disease_by_recist_status', models.BooleanField(blank=True, null=True)),
                ('estrogen_receptor_status', models.TextField(blank=True, null=True)),
                ('progesterone_receptor_status', models.TextField(blank=True, null=True)),
                ('her2_status', models.TextField(blank=True, null=True)),
                ('tnbc_status', models.BooleanField(blank=True, null=True)),
                ('hrd_status', models.TextField(blank=True, null=True)),
                ('hr_status', models.TextField(blank=True, null=True)),
                ('tumor_stage', models.TextField(blank=True, null=True)),
                ('nodes_stage', models.TextField(blank=True, null=True)),
                ('distant_metastasis_stage', models.TextField(blank=True, null=True)),
                ('staging_modalities', models.TextField(blank=True, null=True)),
                ('genetic_mutations', models.JSONField(blank=True, default=list)),
                ('pd_l1_tumor_cels', models.IntegerField(blank=True, null=True)),
                ('pd_l1_assay', models.TextField(blank=True, null=True)),
                ('pd_l1_ic_percentage', models.IntegerField(blank=True, null=True)),
                ('pd_l1_combined_positive_score', models.IntegerField(blank=True, null=True)),
                ('ki67_proliferation_index', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'patient_info',
            },
        ),
        migrations.CreateModel(
            name='Specimen',
            fields=[
                ('specimen_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('specimen_concept_id', models.IntegerField(help_text='OMOP concept for specimen type')),
                ('specimen_type_concept_id', models.IntegerField(help_text='Type/source of specimen record')),
                ('specimen_date', models.DateField(help_text='Date specimen was collected')),
                ('specimen_datetime', models.DateTimeField(blank=True, help_text='Datetime specimen was collected', null=True)),
                ('anatomic_site_concept_id', models.IntegerField(blank=True, help_text='Anatomic site concept', null=True)),
                ('disease_status_concept_id', models.IntegerField(blank=True, help_text='Disease status at collection', null=True)),
                ('quantity', models.FloatField(blank=True, help_text='Quantity collected', null=True)),
                ('unit_concept_id', models.IntegerField(blank=True, help_text='Unit of quantity', null=True)),
                ('specimen_source_id', models.CharField(blank=True, help_text='Source specimen identifier', max_length=50)),
                ('specimen_source_value', models.CharField(blank=True, help_text='Source specimen value', max_length=50)),
                ('unit_source_value', models.CharField(blank=True, help_text='Source unit value', max_length=50)),
                ('anatomic_site_source_value', models.CharField(blank=True, help_text='Source anatomic site', max_length=50)),
                ('disease_status_source_value', models.CharField(blank=True, help_text='Source disease status', max_length=50)),
            ],
            options={
                'db_table': 'specimen',
            },
        ),
        migrations.CreateModel(
            name='VisitOccurrence',
            fields=[
                ('visit_occurrence_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('visit_concept_id', models.IntegerField(help_text='OMOP concept for visit type')),
                ('visit_start_date', models.DateField(help_text='Visit start date')),
                ('visit_start_datetime', models.DateTimeField(blank=True, help_text='Visit start datetime', null=True)),
                ('visit_end_date', models.DateField(help_text='Visit end date')),
                ('visit_end_datetime', models.DateTimeField(blank=True, help_text='Visit end datetime', null=True)),
                ('visit_type_concept_id', models.IntegerField(help_text='Type/source of visit record')),
                ('provider_id', models.IntegerField(blank=True, help_text='Primary provider for visit', null=True)),
                ('care_site_id', models.IntegerField(blank=True, help_text='Care site where visit occurred', null=True)),
                ('visit_source_value', models.CharField(blank=True, help_text='Source visit identifier', max_length=50)),
                ('visit_source_concept_id', models.IntegerField(blank=True, help_text='Source concept ID', null=True)),
                ('admitted_from_concept_id', models.IntegerField(blank=True, help_text='Admission source', null=True)),
                ('admitted_from_source_value', models.CharField(blank=True, help_text='Source admission value', max_length=50)),
                ('discharge_to_concept_id', models.IntegerField(blank=True, help_text='Discharge destination', null=True)),
                ('discharge_to_source_value', models.CharField(blank=True, help_text='Source discharge value', max_length=50)),
                ('preceding_visit_occurrence_id', models.IntegerField(blank=True, help_text='Previous visit ID', null=True)),
            ],
            options={
                'db_table': 'visit_occurrence',
            },
        ),
        migrations.CreateModel(
            name='Vocabulary',
            fields=[
                ('vocabulary_id', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('vocabulary_name', models.CharField(max_length=255)),
                ('vocabulary_reference', models.CharField(blank=True, max_length=255)),
                ('vocabulary_version', models.CharField(blank=True, max_length=255)),
                ('vocabulary_concept_id', models.IntegerField()),
            ],
            options={
                'db_table': 'vocabulary',
            },
        ),
        migrations.RemoveIndex(
            model_name='conditionoccurrence',
            name='condition_o_conditi_219c6a_idx',
        ),
        migrations.RemoveIndex(
            model_name='drugexposure',
            name='drug_exposu_drug_co_ff492c_idx',
        ),
        migrations.RemoveIndex(
            model_name='drugexposure',
            name='drug_exposu_drug_ex_c5e70c_idx',
        ),
        migrations.RemoveIndex(
            model_name='episode',
            name='episode_episode_e6480f_idx',
        ),
        migrations.RemoveIndex(
            model_name='measurement',
            name='measurement_measure_56f692_idx',
        ),
        migrations.RemoveIndex(
            model_name='measurement',
            name='measurement_measure_85b487_idx',
        ),
        migrations.RemoveIndex(
            model_name='observation',
            name='observation_observa_620557_idx',
        ),
        migrations.RemoveIndex(
            model_name='observation',
            name='observation_observa_981e61_idx',
        ),
        migrations.RemoveIndex(
            model_name='procedureoccurrence',
            name='procedure_o_procedu_4c2dc4_idx',
        ),
        migrations.RemoveIndex(
            model_name='procedureoccurrence',
            name='procedure_o_procedu_3ab5f8_idx',
        ),
        migrations.RemoveField(
            model_name='conditionoccurrence',
            name='condition_concept_id',
        ),
        migrations.RemoveField(
            model_name='conditionoccurrence',
            name='condition_type_concept_id',
        ),
        migrations.RemoveField(
            model_name='drugexposure',
            name='dose_unit_concept_id',
        ),
        migrations.RemoveField(
            model_name='drugexposure',
            name='drug_concept_id',
        ),
        migrations.RemoveField(
            model_name='drugexposure',
            name='drug_exposure_end_date',
        ),
        migrations.RemoveField(
            model_name='drugexposure',
            name='drug_exposure_start_date',
        ),
        migrations.RemoveField(
            model_name='drugexposure',
            name='route_concept_id',
        ),
        migrations.RemoveField(
            model_name='episode',
            name='episode_concept_id',
        ),
        migrations.RemoveField(
            model_name='measurement',
            name='measurement_concept_id',
        ),
        migrations.RemoveField(
            model_name='measurement',
            name='measurement_date',
        ),
        migrations.RemoveField(
            model_name='measurement',
            name='unit_concept_id',
        ),
        migrations.RemoveField(
            model_name='measurement',
            name='value_as_concept_id',
        ),
        migrations.RemoveField(
            model_name='observation',
            name='observation_concept_id',
        ),
        migrations.RemoveField(
            model_name='observation',
            name='observation_date',
        ),
        migrations.RemoveField(
            model_name='observation',
            name='value_as_concept_id',
        ),
        migrations.RemoveField(
            model_name='procedureoccurrence',
            name='procedure_concept_id',
        ),
        migrations.RemoveField(
            model_name='procedureoccurrence',
            name='procedure_date',
        ),
        migrations.AddField(
            model_name='conditionoccurrence',
            name='condition_source_value',
            field=models.CharField(blank=True, help_text='Source code for condition', max_length=50),
        ),
        migrations.AddField(
            model_name='conditionoccurrence',
            name='condition_status_source_value',
            field=models.CharField(blank=True, help_text='Source status value', max_length=50),
        ),
        migrations.AddField(
            model_name='conditionoccurrence',
            name='provider_id',
            field=models.IntegerField(blank=True, help_text='Provider who recorded condition', null=True),
        ),
        migrations.AddField(
            model_name='conditionoccurrence',
            name='stop_reason',
            field=models.CharField(blank=True, help_text='Reason condition ended', max_length=20),
        ),
        migrations.AddField(
            model_name='conditionoccurrence',
            name='visit_detail_id',
            field=models.IntegerField(blank=True, help_text='Visit detail for condition', null=True),
        ),
        migrations.AddField(
            model_name='conditionoccurrence',
            name='visit_occurrence_id',
            field=models.IntegerField(blank=True, help_text='Visit when condition was recorded', null=True),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='combination_therapy',
            field=models.BooleanField(blank=True, help_text='Part of combination therapy', null=True),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='concomitant_medication',
            field=models.BooleanField(blank=True, help_text='Is this concomitant medication', null=True),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='days_supply',
            field=models.IntegerField(blank=True, help_text='Days supply', null=True),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='dose_modifications',
            field=models.TextField(blank=True, help_text='Dose modifications made (JSON)'),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='dose_unit_source_value',
            field=models.CharField(blank=True, help_text='Source dose unit value', max_length=50),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='drug_exposure_end_datetime',
            field=models.DateTimeField(blank=True, help_text='End datetime (set to midnight if only date known)', null=True),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='drug_exposure_start_datetime',
            field=models.DateTimeField(blank=True, help_text='Start datetime (set to midnight if only date known)', null=True),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='drug_source_value',
            field=models.CharField(blank=True, help_text='Source drug value', max_length=50),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='line_of_therapy',
            field=models.IntegerField(blank=True, help_text='Line of therapy (1st, 2nd, 3rd, etc.)', null=True),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='lot_number',
            field=models.CharField(blank=True, help_text='Lot number', max_length=50),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='maximum_toxicity_grade',
            field=models.IntegerField(blank=True, help_text='Maximum toxicity grade observed', null=True),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='overall_survival_days',
            field=models.IntegerField(blank=True, help_text='OS in days', null=True),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='progression_free_survival_days',
            field=models.IntegerField(blank=True, help_text='PFS in days', null=True),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='provider_id',
            field=models.IntegerField(blank=True, help_text='Prescribing provider', null=True),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='quantity',
            field=models.FloatField(blank=True, help_text='Quantity dispensed', null=True),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='refills',
            field=models.IntegerField(blank=True, help_text='Number of refills', null=True),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='response_assessment_date',
            field=models.DateField(blank=True, help_text='Date of response assessment', null=True),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='route_source_value',
            field=models.CharField(blank=True, help_text='Source route value', max_length=50),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='sig',
            field=models.TextField(blank=True, help_text='Sig/directions for use'),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='stop_reason',
            field=models.CharField(blank=True, help_text='Reason drug was stopped', max_length=20),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='supportive_therapy',
            field=models.BooleanField(blank=True, help_text='Is this supportive therapy', null=True),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='therapy_intent',
            field=models.CharField(blank=True, help_text='Intent of therapy (curative, palliative, etc.)', max_length=50),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='therapy_regimen',
            field=models.CharField(blank=True, help_text='Name of therapy regimen', max_length=100),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='treatment_delays',
            field=models.TextField(blank=True, help_text='Treatment delays (JSON)'),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='treatment_response',
            field=models.CharField(blank=True, help_text='Treatment response', max_length=50),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='verbatim_end_date',
            field=models.DateField(blank=True, help_text='Verbatim end date from source', null=True),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='visit_detail_id',
            field=models.IntegerField(blank=True, help_text='Visit detail for prescription', null=True),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='visit_occurrence_id',
            field=models.IntegerField(blank=True, help_text='Visit when prescribed', null=True),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='washout_period_required',
            field=models.BooleanField(blank=True, help_text='Requires washout period', null=True),
        ),
        migrations.AddField(
            model_name='location',
            name='latitude',
            field=models.FloatField(blank=True, help_text='Latitude coordinate', null=True),
        ),
        migrations.AddField(
            model_name='location',
            name='longitude',
            field=models.FloatField(blank=True, help_text='Longitude coordinate', null=True),
        ),
        migrations.AddField(
            model_name='measurement',
            name='critical_value_flag',
            field=models.BooleanField(blank=True, help_text='Whether value is critical', null=True),
        ),
        migrations.AddField(
            model_name='measurement',
            name='fasting_status',
            field=models.BooleanField(blank=True, help_text='Whether patient was fasting', null=True),
        ),
        migrations.AddField(
            model_name='measurement',
            name='instrument_id',
            field=models.CharField(blank=True, help_text='Instrument/device used', max_length=50),
        ),
        migrations.AddField(
            model_name='measurement',
            name='lab_batch_id',
            field=models.CharField(blank=True, help_text='Laboratory batch identifier', max_length=50),
        ),
        migrations.AddField(
            model_name='measurement',
            name='measurement_datetime',
            field=models.DateTimeField(blank=True, help_text='Measurement datetime (set to midnight if only date known)', null=True),
        ),
        migrations.AddField(
            model_name='measurement',
            name='measurement_method',
            field=models.CharField(blank=True, help_text='Method used for measurement', max_length=100),
        ),
        migrations.AddField(
            model_name='measurement',
            name='measurement_quality_flag',
            field=models.CharField(blank=True, help_text='Quality flag for measurement', max_length=20),
        ),
        migrations.AddField(
            model_name='measurement',
            name='measurement_source',
            field=models.CharField(blank=True, choices=[('LAB', 'Laboratory Result'), ('VITAL', 'Vital Sign'), ('PATIENT', 'Patient Reported'), ('CLINICAL', 'Clinical Assessment')], help_text='Source type of measurement', max_length=10),
        ),
        migrations.AddField(
            model_name='measurement',
            name='measurement_source_value',
            field=models.CharField(blank=True, help_text='Source value', max_length=50),
        ),
        migrations.AddField(
            model_name='measurement',
            name='provider_id',
            field=models.IntegerField(blank=True, help_text='Provider who ordered measurement', null=True),
        ),
        migrations.AddField(
            model_name='measurement',
            name='range_high',
            field=models.FloatField(blank=True, help_text='Normal range high value', null=True),
        ),
        migrations.AddField(
            model_name='measurement',
            name='range_low',
            field=models.FloatField(blank=True, help_text='Normal range low value', null=True),
        ),
        migrations.AddField(
            model_name='measurement',
            name='specimen_type',
            field=models.CharField(blank=True, help_text='Type of specimen (blood, urine, etc.)', max_length=50),
        ),
        migrations.AddField(
            model_name='measurement',
            name='unit_source_value',
            field=models.CharField(blank=True, help_text='Source unit value', max_length=50),
        ),
        migrations.AddField(
            model_name='measurement',
            name='value_source_value',
            field=models.CharField(blank=True, help_text='Source result value', max_length=50),
        ),
        migrations.AddField(
            model_name='measurement',
            name='visit_detail_id',
            field=models.IntegerField(blank=True, help_text='Visit detail for measurement', null=True),
        ),
        migrations.AddField(
            model_name='measurement',
            name='visit_occurrence_id',
            field=models.IntegerField(blank=True, help_text='Visit when measured', null=True),
        ),
        migrations.AddField(
            model_name='observation',
            name='caregiver_availability',
            field=models.BooleanField(blank=True, help_text='Caregiver availability status', null=True),
        ),
        migrations.AddField(
            model_name='observation',
            name='functional_status',
            field=models.CharField(blank=True, help_text='Functional status assessment', max_length=50),
        ),
        migrations.AddField(
            model_name='observation',
            name='genetic_test_result',
            field=models.TextField(blank=True, help_text='Genetic test results (JSON)'),
        ),
        migrations.AddField(
            model_name='observation',
            name='geographic_risk_exposure',
            field=models.TextField(blank=True, help_text='Geographic risk exposure details'),
        ),
        migrations.AddField(
            model_name='observation',
            name='infection_risk_category',
            field=models.CharField(blank=True, help_text='Infection risk category', max_length=50),
        ),
        migrations.AddField(
            model_name='observation',
            name='mutation_interpretation',
            field=models.TextField(blank=True, help_text='Clinical interpretation of genetic findings'),
        ),
        migrations.AddField(
            model_name='observation',
            name='observation_datetime',
            field=models.DateTimeField(blank=True, help_text='Observation datetime (set to midnight if only date known)', null=True),
        ),
        migrations.AddField(
            model_name='observation',
            name='observation_source',
            field=models.CharField(blank=True, choices=[('EXAM', 'Clinical Examination'), ('IMAGING', 'Medical Imaging'), ('PATH', 'Pathology Report'), ('GENETIC', 'Genetic Testing')], help_text='Source type of observation', max_length=10),
        ),
        migrations.AddField(
            model_name='observation',
            name='observation_source_value',
            field=models.CharField(blank=True, help_text='Source value', max_length=50),
        ),
        migrations.AddField(
            model_name='observation',
            name='performance_score_type',
            field=models.CharField(blank=True, help_text='Type of performance score (ECOG, Karnofsky)', max_length=20),
        ),
        migrations.AddField(
            model_name='observation',
            name='provider_id',
            field=models.IntegerField(blank=True, help_text='Provider who made observation', null=True),
        ),
        migrations.AddField(
            model_name='observation',
            name='qualifier_source_value',
            field=models.CharField(blank=True, help_text='Source qualifier value', max_length=50),
        ),
        migrations.AddField(
            model_name='observation',
            name='quality_of_life_score',
            field=models.FloatField(blank=True, help_text='Quality of life score', null=True),
        ),
        migrations.AddField(
            model_name='observation',
            name='social_support_level',
            field=models.CharField(blank=True, help_text='Level of social support', max_length=50),
        ),
        migrations.AddField(
            model_name='observation',
            name='substance_use_frequency',
            field=models.CharField(blank=True, help_text='Frequency of substance use', max_length=50),
        ),
        migrations.AddField(
            model_name='observation',
            name='substance_use_type',
            field=models.CharField(blank=True, help_text='Type of substance use', max_length=50),
        ),
        migrations.AddField(
            model_name='observation',
            name='symptom_severity',
            field=models.IntegerField(blank=True, help_text='Symptom severity score (1-10)', null=True),
        ),
        migrations.AddField(
            model_name='observation',
            name='unit_source_value',
            field=models.CharField(blank=True, help_text='Source unit value', max_length=50),
        ),
        migrations.AddField(
            model_name='observation',
            name='visit_detail_id',
            field=models.IntegerField(blank=True, help_text='Visit detail for observation', null=True),
        ),
        migrations.AddField(
            model_name='observation',
            name='visit_occurrence_id',
            field=models.IntegerField(blank=True, help_text='Visit when observed', null=True),
        ),
        migrations.AddField(
            model_name='person',
            name='care_site_id',
            field=models.IntegerField(blank=True, help_text='Primary care site ID', null=True),
        ),
        migrations.AddField(
            model_name='person',
            name='language_skill_level',
            field=models.CharField(blank=True, help_text='Language proficiency level', max_length=20),
        ),
        migrations.AddField(
            model_name='person',
            name='person_source_value',
            field=models.CharField(blank=True, help_text='Source identifier', max_length=50),
        ),
        migrations.AddField(
            model_name='person',
            name='primary_language_concept_id',
            field=models.IntegerField(blank=True, help_text='Primary language concept', null=True),
        ),
        migrations.AddField(
            model_name='person',
            name='provider_id',
            field=models.IntegerField(blank=True, help_text='Primary care provider ID', null=True),
        ),
        migrations.AddField(
            model_name='person',
            name='secondary_languages',
            field=models.TextField(blank=True, help_text='Additional languages (JSON array)'),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='anesthesia_type',
            field=models.CharField(blank=True, help_text='Type of anesthesia used', max_length=50),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='complications',
            field=models.TextField(blank=True, help_text='Complications during procedure'),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='conditioning_regimen',
            field=models.CharField(blank=True, help_text='Conditioning regimen used', max_length=100),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='contrast_used',
            field=models.BooleanField(blank=True, help_text='Whether contrast was used', null=True),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='donor_type',
            field=models.CharField(blank=True, help_text='Donor type (autologous, allogeneic)', max_length=50),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='imaging_modality',
            field=models.CharField(blank=True, help_text='Imaging modality (CT, MRI, PET)', max_length=50),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='imaging_results',
            field=models.TextField(blank=True, help_text='Imaging results summary'),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='modifier_source_value',
            field=models.CharField(blank=True, help_text='Source modifier value', max_length=50),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='pathology_results',
            field=models.TextField(blank=True, help_text='Pathology results'),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='procedure_datetime',
            field=models.DateTimeField(blank=True, help_text='Procedure datetime (set to midnight if only date known)', null=True),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='procedure_laterality',
            field=models.CharField(blank=True, help_text='Left/Right/Bilateral', max_length=20),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='procedure_location',
            field=models.CharField(blank=True, help_text='Anatomical location', max_length=100),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='procedure_outcome',
            field=models.CharField(blank=True, help_text='Outcome of procedure', max_length=100),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='procedure_source_value',
            field=models.CharField(blank=True, help_text='Source procedure value', max_length=50),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='procedure_success',
            field=models.BooleanField(blank=True, help_text='Whether procedure was successful', null=True),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='provider_id',
            field=models.IntegerField(blank=True, help_text='Provider who performed procedure', null=True),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='quantity',
            field=models.IntegerField(blank=True, help_text='Quantity of procedures', null=True),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='specimen_adequacy',
            field=models.CharField(blank=True, help_text='Specimen adequacy assessment', max_length=50),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='specimen_type',
            field=models.CharField(blank=True, help_text='Type of specimen obtained', max_length=50),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='stem_cell_source',
            field=models.CharField(blank=True, help_text='Source of stem cells', max_length=50),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='transplant_type',
            field=models.CharField(blank=True, help_text='Type of transplant', max_length=50),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='visit_detail_id',
            field=models.IntegerField(blank=True, help_text='Visit detail for procedure', null=True),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='visit_occurrence_id',
            field=models.IntegerField(blank=True, help_text='Visit when procedure occurred', null=True),
        ),
        migrations.AlterField(
            model_name='conditionoccurrence',
            name='condition_start_date',
            field=models.DateField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='episode',
            name='episode_start_date',
            field=models.DateField(blank=True, null=True),
        ),
        migrations.AddIndex(
            model_name='person',
            index=models.Index(fields=['primary_language_concept_id'], name='person_primary_c23cea_idx'),
        ),
        migrations.AddField(
            model_name='clinicaltrialparticipation',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trial_participations', to='omop.person'),
        ),
        migrations.CreateModel(
            name='MeasurementConcept',
            fields=[
                ('concept', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='omop.concept')),
                ('patient_info_field', models.CharField(help_text='Corresponding PatientInfo field name', max_length=100, unique=True)),
                ('normal_range_low', models.FloatField(blank=True, help_text='Normal range low value', null=True)),
                ('normal_range_high', models.FloatField(blank=True, help_text='Normal range high value', null=True)),
                ('measurement_category', models.CharField(blank=True, help_text='Category (vital_signs, lab_values, demographics)', max_length=50)),
                ('required_specimen_type', models.CharField(blank=True, help_text='Required specimen type if applicable', max_length=50)),
            ],
            options={
                'db_table': 'measurement_concept',
            },
        ),
        migrations.CreateModel(
            name='UnitConcept',
            fields=[
                ('concept', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='omop.concept')),
                ('unit_type', models.CharField(help_text='Type of unit (weight, height, volume, etc.)', max_length=50)),
                ('patient_info_choice_value', models.CharField(blank=True, help_text='Corresponding PatientInfo choice value', max_length=20)),
                ('conversion_factor_to_standard', models.FloatField(blank=True, help_text='Factor to convert to standard unit', null=True)),
            ],
            options={
                'db_table': 'unit_concept',
            },
        ),
        migrations.AddIndex(
            model_name='concept',
            index=models.Index(fields=['concept_name'], name='concept_concept_ed912b_idx'),
        ),
        migrations.AddIndex(
            model_name='concept',
            index=models.Index(fields=['domain_id'], name='concept_domain__252298_idx'),
        ),
        migrations.AddIndex(
            model_name='concept',
            index=models.Index(fields=['vocabulary_id'], name='concept_vocabul_dccbe4_idx'),
        ),
        migrations.AddIndex(
            model_name='concept',
            index=models.Index(fields=['concept_class_id'], name='concept_concept_bdb699_idx'),
        ),
        migrations.AddIndex(
            model_name='concept',
            index=models.Index(fields=['standard_concept'], name='concept_standar_b38e74_idx'),
        ),
        migrations.AddIndex(
            model_name='concept',
            index=models.Index(fields=['concept_code'], name='concept_concept_44dec9_idx'),
        ),
        migrations.AddField(
            model_name='conditionoccurrence',
            name='condition_concept',
            field=models.ForeignKey(blank=True, help_text='OMOP concept for the condition', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='conditions', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='conditionoccurrence',
            name='condition_source_concept',
            field=models.ForeignKey(blank=True, help_text='Source concept', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='condition_sources', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='conditionoccurrence',
            name='condition_status_concept',
            field=models.ForeignKey(blank=True, help_text='Status concept', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='condition_statuses', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='conditionoccurrence',
            name='condition_type_concept',
            field=models.ForeignKey(blank=True, help_text='Type/source of condition record', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='condition_types', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='dose_unit_concept',
            field=models.ForeignKey(blank=True, help_text='Dose unit concept', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='drug_dose_units', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='drug_concept',
            field=models.ForeignKey(blank=True, help_text='OMOP concept for the drug', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='drug_exposures', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='drug_source_concept',
            field=models.ForeignKey(blank=True, help_text='Source drug concept', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='drug_sources', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='drug_type_concept',
            field=models.ForeignKey(blank=True, help_text='Type/source of drug record', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='drug_types', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='route_concept',
            field=models.ForeignKey(blank=True, help_text='Route of administration concept', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='drug_routes', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='episode',
            name='episode_concept',
            field=models.ForeignKey(blank=True, help_text='OMOP concept for the episode', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='episodes', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='measurement',
            name='measurement_concept',
            field=models.ForeignKey(blank=True, help_text='OMOP concept for what was measured', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='measurements', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='measurement',
            name='measurement_source_concept',
            field=models.ForeignKey(blank=True, help_text='Source concept', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='measurement_sources', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='measurement',
            name='measurement_type_concept',
            field=models.ForeignKey(blank=True, help_text='Type/source of measurement', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='measurement_types', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='measurement',
            name='operator_concept',
            field=models.ForeignKey(blank=True, help_text='Operator (>, <, =, etc.)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='measurement_operators', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='measurement',
            name='unit_concept',
            field=models.ForeignKey(blank=True, help_text='Unit concept', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='measurement_units', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='measurement',
            name='value_as_concept',
            field=models.ForeignKey(blank=True, help_text='Concept for categorical values', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='measurement_values', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='observation',
            name='observation_concept',
            field=models.ForeignKey(blank=True, help_text='OMOP concept for what was observed', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='observations', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='observation',
            name='observation_source_concept',
            field=models.ForeignKey(blank=True, help_text='Source concept', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='observation_sources', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='observation',
            name='observation_type_concept',
            field=models.ForeignKey(blank=True, help_text='Type/source of observation', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='observation_types', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='observation',
            name='qualifier_concept',
            field=models.ForeignKey(blank=True, help_text='Qualifier for observation', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='observation_qualifiers', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='observation',
            name='unit_concept',
            field=models.ForeignKey(blank=True, help_text='Unit concept', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='observation_units', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='observation',
            name='value_as_concept',
            field=models.ForeignKey(blank=True, help_text='Concept for categorical values', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='observation_values', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='modifier_concept',
            field=models.ForeignKey(blank=True, help_text='Modifier for procedure', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='procedure_modifiers', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='procedure_concept',
            field=models.ForeignKey(blank=True, help_text='OMOP concept for the procedure', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='procedures', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='procedure_source_concept',
            field=models.ForeignKey(blank=True, help_text='Source concept', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='procedure_sources', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='procedure_type_concept',
            field=models.ForeignKey(blank=True, help_text='Type/source of procedure', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='procedure_types', to='omop.concept'),
        ),
        migrations.AddIndex(
            model_name='conditionoccurrence',
            index=models.Index(fields=['condition_concept'], name='condition_o_conditi_219c6a_idx'),
        ),
        migrations.AddIndex(
            model_name='drugexposure',
            index=models.Index(fields=['drug_concept'], name='drug_exposu_drug_co_ff492c_idx'),
        ),
        migrations.AddIndex(
            model_name='drugexposure',
            index=models.Index(fields=['drug_exposure_start_datetime'], name='drug_exposu_drug_ex_7dff0f_idx'),
        ),
        migrations.AddIndex(
            model_name='drugexposure',
            index=models.Index(fields=['line_of_therapy'], name='drug_exposu_line_of_9e6c5e_idx'),
        ),
        migrations.AddIndex(
            model_name='drugexposure',
            index=models.Index(fields=['therapy_intent'], name='drug_exposu_therapy_de70f9_idx'),
        ),
        migrations.AddIndex(
            model_name='drugexposure',
            index=models.Index(fields=['treatment_response'], name='drug_exposu_treatme_d69693_idx'),
        ),
        migrations.AddIndex(
            model_name='episode',
            index=models.Index(fields=['episode_concept'], name='episode_episode_e6480f_idx'),
        ),
        migrations.AddIndex(
            model_name='measurement',
            index=models.Index(fields=['measurement_concept'], name='measurement_measure_56f692_idx'),
        ),
        migrations.AddIndex(
            model_name='measurement',
            index=models.Index(fields=['measurement_datetime'], name='measurement_measure_5c26af_idx'),
        ),
        migrations.AddIndex(
            model_name='measurement',
            index=models.Index(fields=['specimen_type'], name='measurement_specime_e457fe_idx'),
        ),
        migrations.AddIndex(
            model_name='measurement',
            index=models.Index(fields=['critical_value_flag'], name='measurement_critica_b217d6_idx'),
        ),
        migrations.AddIndex(
            model_name='measurement',
            index=models.Index(fields=['unit_concept'], name='measurement_unit_co_29ea11_idx'),
        ),
        migrations.AddIndex(
            model_name='observation',
            index=models.Index(fields=['observation_concept'], name='observation_observa_620557_idx'),
        ),
        migrations.AddIndex(
            model_name='observation',
            index=models.Index(fields=['observation_datetime'], name='observation_observa_c398d5_idx'),
        ),
        migrations.AddIndex(
            model_name='observation',
            index=models.Index(fields=['performance_score_type'], name='observation_perform_498e27_idx'),
        ),
        migrations.AddIndex(
            model_name='observation',
            index=models.Index(fields=['genetic_test_result'], name='observation_genetic_ea5569_idx'),
        ),
        migrations.AddIndex(
            model_name='procedureoccurrence',
            index=models.Index(fields=['procedure_concept'], name='procedure_o_procedu_4c2dc4_idx'),
        ),
        migrations.AddIndex(
            model_name='procedureoccurrence',
            index=models.Index(fields=['procedure_datetime'], name='procedure_o_procedu_d865a1_idx'),
        ),
        migrations.AddIndex(
            model_name='procedureoccurrence',
            index=models.Index(fields=['transplant_type'], name='procedure_o_transpl_828f09_idx'),
        ),
        migrations.AddIndex(
            model_name='procedureoccurrence',
            index=models.Index(fields=['imaging_modality'], name='procedure_o_imaging_e79646_idx'),
        ),
        migrations.AddField(
            model_name='conceptrelationship',
            name='concept_id_1',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relationships_as_concept_1', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='conceptrelationship',
            name='concept_id_2',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relationships_as_concept_2', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='genomicvariant',
            name='observation',
            field=models.ForeignKey(blank=True, help_text='Related OMOP observation record', null=True, on_delete=django.db.models.deletion.SET_NULL, to='omop.observation'),
        ),
        migrations.AddField(
            model_name='genomicvariant',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='genomic_variants', to='omop.person'),
        ),
        migrations.AddField(
            model_name='patientinfo',
            name='person',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='patient_info', to='omop.person'),
        ),
        migrations.AddField(
            model_name='specimen',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='specimens', to='omop.person'),
        ),
        migrations.AddField(
            model_name='visitoccurrence',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='visits', to='omop.person'),
        ),
        migrations.AddIndex(
            model_name='clinicaltrialparticipation',
            index=models.Index(fields=['person'], name='clinical_tr_person__0bf4c7_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicaltrialparticipation',
            index=models.Index(fields=['trial_source_id'], name='clinical_tr_trial_s_e3ab8e_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicaltrialparticipation',
            index=models.Index(fields=['enrollment_date'], name='clinical_tr_enrollm_28a041_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicaltrialparticipation',
            index=models.Index(fields=['participation_status'], name='clinical_tr_partici_abd241_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='clinicaltrialparticipation',
            unique_together={('person', 'trial_source_id')},
        ),
        migrations.AddField(
            model_name='measurementconcept',
            name='preferred_unit_concept',
            field=models.ForeignKey(blank=True, help_text='Preferred unit concept for this measurement', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='preferred_measurements', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='unitconcept',
            name='standard_unit_concept',
            field=models.ForeignKey(blank=True, help_text='Standard unit concept', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='converted_units', to='omop.concept'),
        ),
        migrations.AddIndex(
            model_name='conceptrelationship',
            index=models.Index(fields=['relationship_id'], name='concept_rel_relatio_cb1813_idx'),
        ),
        migrations.AddIndex(
            model_name='conceptrelationship',
            index=models.Index(fields=['valid_start_date'], name='concept_rel_valid_s_1f1047_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='conceptrelationship',
            unique_together={('concept_id_1', 'concept_id_2', 'relationship_id')},
        ),
        migrations.AddIndex(
            model_name='genomicvariant',
            index=models.Index(fields=['person'], name='genomic_var_person__cab897_idx'),
        ),
        migrations.AddIndex(
            model_name='genomicvariant',
            index=models.Index(fields=['gene_symbol'], name='genomic_var_gene_sy_e76525_idx'),
        ),
        migrations.AddIndex(
            model_name='genomicvariant',
            index=models.Index(fields=['test_date'], name='genomic_var_test_da_3a3e4f_idx'),
        ),
        migrations.AddIndex(
            model_name='genomicvariant',
            index=models.Index(fields=['clinical_significance'], name='genomic_var_clinica_0fe002_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='genomicvariant',
            unique_together={('person', 'gene_symbol', 'hgvs_notation', 'test_date')},
        ),
        migrations.AddIndex(
            model_name='patientinfo',
            index=models.Index(fields=['person'], name='patient_inf_person__ea83ef_idx'),
        ),
        migrations.AddIndex(
            model_name='patientinfo',
            index=models.Index(fields=['patient_age'], name='patient_inf_patient_a5f152_idx'),
        ),
        migrations.AddIndex(
            model_name='patientinfo',
            index=models.Index(fields=['disease'], name='patient_inf_disease_15b4ff_idx'),
        ),
        migrations.AddIndex(
            model_name='patientinfo',
            index=models.Index(fields=['stage'], name='patient_inf_stage_1f985e_idx'),
        ),
        migrations.AddIndex(
            model_name='specimen',
            index=models.Index(fields=['person'], name='specimen_person__257c32_idx'),
        ),
        migrations.AddIndex(
            model_name='specimen',
            index=models.Index(fields=['specimen_concept_id'], name='specimen_specime_95c57b_idx'),
        ),
        migrations.AddIndex(
            model_name='specimen',
            index=models.Index(fields=['specimen_date'], name='specimen_specime_d278e4_idx'),
        ),
        migrations.AddIndex(
            model_name='visitoccurrence',
            index=models.Index(fields=['person'], name='visit_occur_person__28355c_idx'),
        ),
        migrations.AddIndex(
            model_name='visitoccurrence',
            index=models.Index(fields=['visit_concept_id'], name='visit_occur_visit_c_7892d3_idx'),
        ),
        migrations.AddIndex(
            model_name='visitoccurrence',
            index=models.Index(fields=['visit_start_date'], name='visit_occur_visit_s_2e2b86_idx'),
        ),
        migrations.AddIndex(
            model_name='visitoccurrence',
            index=models.Index(fields=['provider_id'], name='visit_occur_provide_03836c_idx'),
        ),
        migrations.AddIndex(
            model_name='measurementconcept',
            index=models.Index(fields=['patient_info_field'], name='measurement_patient_e18509_idx'),
        ),
        migrations.AddIndex(
            model_name='measurementconcept',
            index=models.Index(fields=['measurement_category'], name='measurement_measure_cce5a4_idx'),
        ),
        migrations.AddIndex(
            model_name='unitconcept',
            index=models.Index(fields=['unit_type'], name='unit_concep_unit_ty_f06e8e_idx'),
        ),
        migrations.AddIndex(
            model_name='unitconcept',
            index=models.Index(fields=['patient_info_choice_value'], name='unit_concep_patient_0a0140_idx'),
        ),
    ]
