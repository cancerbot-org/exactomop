# Generated by Django 5.2.6 on 2025-09-08 21:36

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BehavioralVocabulary',
            fields=[
                ('vocabulary_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('observation_type', models.CharField(choices=[('smoking_status', 'Smoking/Tobacco Use Status'), ('substance_use', 'Substance Use Assessment'), ('alcohol_use', 'Alcohol Use Assessment'), ('contraceptive_use', 'Contraceptive Use'), ('pregnancy_status', 'Pregnancy Status'), ('menopausal_status', 'Menopausal Status'), ('infectious_disease', 'Infectious Disease Status'), ('caregiver_status', 'Caregiver/Social Support'), ('consent_capability', 'Consent Capability'), ('mental_health', 'Mental Health Status'), ('geographic_risk', 'Geographic Risk Exposure'), ('social_determinant', 'Social Determinant of Health'), ('reproductive_health', 'Reproductive Health Status')], help_text='Type of behavioral observation', max_length=30)),
                ('observation_name', models.CharField(help_text='Standardized observation name', max_length=200)),
                ('observation_aliases', models.TextField(blank=True, help_text='Alternative names/terms')),
                ('loinc_code', models.CharField(blank=True, help_text='LOINC code for observation', max_length=20)),
                ('snomed_code', models.CharField(blank=True, help_text='SNOMED code for observation', max_length=20)),
                ('icd10_code', models.CharField(blank=True, help_text='ICD-10 code if applicable', max_length=10)),
                ('exclusion_criterion', models.BooleanField(default=False, help_text='Commonly used as exclusion criterion')),
                ('inclusion_criterion', models.BooleanField(default=False, help_text='Commonly used as inclusion criterion')),
                ('risk_assessment_factor', models.BooleanField(default=False, help_text='Used for risk assessment')),
                ('assessment_method', models.TextField(blank=True, help_text='Standard assessment methodology')),
                ('validated_instruments', models.TextField(blank=True, help_text='Validated assessment instruments')),
                ('clinical_cutoffs', models.JSONField(blank=True, help_text='Clinical cutoffs and thresholds', null=True)),
                ('applicable_populations', models.TextField(blank=True, help_text='Applicable patient populations')),
                ('contraindications', models.TextField(blank=True, help_text='When not to assess')),
                ('clinical_significance', models.TextField(help_text='Clinical significance description')),
                ('created_date', models.DateField(auto_now_add=True)),
                ('last_updated', models.DateField(auto_now=True)),
                ('curator', models.CharField(blank=True, help_text='Curator/reviewer', max_length=200)),
            ],
            options={
                'db_table': 'behavioral_vocabulary',
            },
        ),
        migrations.CreateModel(
            name='BiomarkerMeasurement',
            fields=[
                ('biomarker_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('biomarker_name', models.CharField(help_text='Biomarker name (e.g., PD-L1, TMB, MSI)', max_length=100)),
                ('biomarker_category', models.CharField(choices=[('PROTEIN', 'Protein Expression'), ('GENOMIC', 'Genomic Biomarker'), ('METABOLIC', 'Metabolic Biomarker'), ('IMMUNE', 'Immune Biomarker'), ('FUNCTIONAL', 'Functional Biomarker'), ('HORMONE_RECEPTOR', 'Hormone Receptor'), ('GROWTH_FACTOR', 'Growth Factor Receptor'), ('TUMOR_BURDEN', 'Tumor Burden Marker')], help_text='Category of biomarker', max_length=50)),
                ('measurement_date', models.DateField(help_text='Date of biomarker measurement')),
                ('numeric_value', models.FloatField(blank=True, help_text='Numeric biomarker value', null=True)),
                ('categorical_value', models.CharField(blank=True, help_text='Categorical result', max_length=50)),
                ('unit', models.CharField(blank=True, help_text='Unit of measurement', max_length=50)),
                ('result_interpretation', models.CharField(blank=True, choices=[('HIGH', 'High'), ('LOW', 'Low'), ('POSITIVE', 'Positive'), ('NEGATIVE', 'Negative'), ('INTERMEDIATE', 'Intermediate'), ('INDETERMINATE', 'Indeterminate')], help_text='Clinical interpretation of result', max_length=50)),
                ('threshold_value', models.FloatField(blank=True, help_text='Clinical threshold value', null=True)),
                ('threshold_operator', models.CharField(blank=True, choices=[('GT', 'Greater than'), ('GTE', 'Greater than or equal'), ('LT', 'Less than'), ('LTE', 'Less than or equal'), ('EQ', 'Equal to')], help_text='Threshold comparison operator', max_length=10)),
                ('assay_name', models.CharField(blank=True, help_text='Specific assay used', max_length=200)),
                ('assay_version', models.CharField(blank=True, help_text='Assay version', max_length=50)),
                ('laboratory', models.CharField(blank=True, help_text='Testing laboratory', max_length=200)),
                ('specimen_type', models.CharField(blank=True, help_text='Specimen type', max_length=100)),
                ('tissue_site', models.CharField(blank=True, help_text='Tissue site', max_length=100)),
                ('collection_method', models.CharField(blank=True, help_text='Collection method', max_length=100)),
            ],
            options={
                'db_table': 'biomarker_measurement',
            },
        ),
        migrations.CreateModel(
            name='CancerStagingMap',
            fields=[
                ('staging_map_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('source_staging_system', models.CharField(help_text='Source staging system', max_length=50)),
                ('source_stage_value', models.CharField(help_text='Stage value in source system', max_length=50)),
                ('target_staging_system', models.CharField(help_text='Target staging system', max_length=50)),
                ('target_stage_value', models.CharField(help_text='Equivalent stage value in target system', max_length=50)),
                ('mapping_confidence', models.CharField(choices=[('EXACT', 'Exact Match'), ('APPROXIMATE', 'Approximate'), ('POSSIBLE', 'Possible Match')], default='EXACT', help_text='Confidence in staging mapping', max_length=20)),
                ('mapping_source', models.CharField(blank=True, help_text='Source of staging mapping', max_length=100)),
                ('effective_start_date', models.DateField(blank=True, help_text='Start date for mapping validity', null=True)),
                ('effective_end_date', models.DateField(blank=True, help_text='End date for mapping validity', null=True)),
            ],
            options={
                'db_table': 'cancer_staging_map',
            },
        ),
        migrations.CreateModel(
            name='ClinicalLabTest',
            fields=[
                ('lab_test_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('test_name', models.CharField(help_text='Laboratory test name', max_length=200)),
                ('loinc_code', models.CharField(blank=True, help_text='LOINC code', max_length=20)),
                ('test_category', models.CharField(choices=[('HEME', 'Hematology'), ('CHEM', 'Clinical Chemistry'), ('IMMUNO', 'Immunology'), ('MOLEC', 'Molecular Diagnostics'), ('TUMOR', 'Tumor Markers'), ('COAG', 'Coagulation'), ('ENDO', 'Endocrine'), ('CARDIO', 'Cardiac Markers')], help_text='Category of laboratory test', max_length=20)),
                ('organ_system', models.CharField(blank=True, choices=[('HEPATIC', 'Hepatic Function'), ('RENAL', 'Renal Function'), ('CARDIAC', 'Cardiac Function'), ('HEMATOLOGIC', 'Hematologic'), ('METABOLIC', 'Metabolic'), ('IMMUNOLOGIC', 'Immunologic'), ('ENDOCRINE', 'Endocrine'), ('INFECTIOUS', 'Infectious Disease')], help_text='Primary organ system', max_length=50)),
                ('test_date', models.DateField(help_text='Date of laboratory test')),
                ('collection_time', models.TimeField(blank=True, help_text='Collection time', null=True)),
                ('fasting_status', models.BooleanField(blank=True, help_text='Fasting status required', null=True)),
                ('numeric_result', models.FloatField(blank=True, help_text='Numeric result', null=True)),
                ('result_unit', models.CharField(blank=True, help_text='Result unit', max_length=50)),
                ('text_result', models.CharField(blank=True, help_text='Text/categorical result', max_length=200)),
                ('reference_range_low', models.FloatField(blank=True, help_text='Reference range low', null=True)),
                ('reference_range_high', models.FloatField(blank=True, help_text='Reference range high', null=True)),
                ('abnormal_flag', models.CharField(blank=True, choices=[('N', 'Normal'), ('H', 'High'), ('L', 'Low'), ('HH', 'Critical High'), ('LL', 'Critical Low'), ('A', 'Abnormal')], help_text='Abnormal flag', max_length=10)),
                ('ctcae_grade', models.IntegerField(blank=True, choices=[(0, 'Grade 0 - Normal'), (1, 'Grade 1 - Mild'), (2, 'Grade 2 - Moderate'), (3, 'Grade 3 - Severe'), (4, 'Grade 4 - Life-threatening'), (5, 'Grade 5 - Death')], help_text='CTCAE toxicity grade', null=True)),
                ('specimen_type', models.CharField(blank=True, help_text='Specimen type', max_length=50)),
                ('collection_method', models.CharField(blank=True, help_text='Collection method', max_length=100)),
                ('processing_delay', models.IntegerField(blank=True, help_text='Processing delay in hours', null=True)),
                ('analyzer_name', models.CharField(blank=True, help_text='Laboratory analyzer', max_length=100)),
                ('methodology', models.CharField(blank=True, help_text='Testing methodology', max_length=100)),
                ('laboratory_name', models.CharField(blank=True, help_text='Testing laboratory', max_length=200)),
                ('hemolyzed', models.BooleanField(blank=True, help_text='Hemolyzed specimen', null=True)),
                ('lipemic', models.BooleanField(blank=True, help_text='Lipemic specimen', null=True)),
                ('icteric', models.BooleanField(blank=True, help_text='Icteric specimen', null=True)),
            ],
            options={
                'db_table': 'clinical_lab_test',
            },
        ),
        migrations.CreateModel(
            name='ClinicalTrial',
            fields=[
                ('clinical_trial_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('nct_number', models.CharField(blank=True, help_text='ClinicalTrials.gov NCT number', max_length=20)),
                ('trial_title', models.CharField(help_text='Official trial title', max_length=500)),
                ('trial_acronym', models.CharField(blank=True, help_text='Trial acronym/short name', max_length=100)),
                ('enrollment_date', models.DateField(help_text='Date of trial enrollment')),
                ('randomization_date', models.DateField(blank=True, help_text='Date of randomization', null=True)),
                ('trial_completion_date', models.DateField(blank=True, help_text='Date of trial completion', null=True)),
                ('trial_phase', models.CharField(choices=[('PHASE_0', 'Phase 0'), ('PHASE_I', 'Phase I'), ('PHASE_II', 'Phase II'), ('PHASE_III', 'Phase III'), ('PHASE_IV', 'Phase IV'), ('PILOT', 'Pilot Study')], help_text='Clinical trial phase', max_length=10)),
                ('trial_type', models.CharField(choices=[('INTERVENTIONAL', 'Interventional'), ('OBSERVATIONAL', 'Observational'), ('EXPANDED_ACCESS', 'Expanded Access')], help_text='Type of clinical trial', max_length=30)),
                ('randomized', models.BooleanField(blank=True, help_text='Whether trial is randomized', null=True)),
                ('blinded', models.BooleanField(blank=True, help_text='Whether trial is blinded', null=True)),
                ('placebo_controlled', models.BooleanField(blank=True, help_text='Whether trial is placebo-controlled', null=True)),
                ('treatment_arm', models.CharField(blank=True, help_text='Treatment arm assignment', max_length=100)),
                ('treatment_arm_code', models.CharField(blank=True, help_text='Treatment arm code', max_length=20)),
                ('control_arm', models.BooleanField(blank=True, help_text='Whether patient is in control arm', null=True)),
                ('investigational_drug', models.CharField(blank=True, help_text='Investigational drug name', max_length=200)),
                ('drug_mechanism', models.CharField(blank=True, help_text='Drug mechanism of action', max_length=200)),
                ('primary_endpoint', models.TextField(blank=True, help_text='Primary study endpoint')),
                ('patient_outcome', models.CharField(blank=True, choices=[('COMPLETED', 'Completed Trial'), ('WITHDRAWN', 'Withdrawn'), ('DISCONTINUED', 'Discontinued Treatment'), ('LOST_TO_FOLLOWUP', 'Lost to Follow-up'), ('DEATH', 'Death')], help_text='Patient outcome in trial', max_length=30)),
                ('serious_adverse_events', models.BooleanField(blank=True, help_text='Whether serious AEs occurred', null=True)),
                ('grade_3_4_toxicity', models.BooleanField(blank=True, help_text='Whether grade 3-4 toxicity occurred', null=True)),
                ('sponsor', models.CharField(blank=True, help_text='Trial sponsor', max_length=200)),
                ('study_site', models.CharField(blank=True, help_text='Study site', max_length=200)),
                ('principal_investigator', models.CharField(blank=True, help_text='Principal investigator', max_length=200)),
            ],
            options={
                'db_table': 'clinical_trial',
            },
        ),
        migrations.CreateModel(
            name='ClinicalTrialParticipation',
            fields=[
                ('participation_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('trial_source_id', models.CharField(help_text='Reference to Trial.code in exactmodels', max_length=100)),
                ('trial_concept_id', models.IntegerField(blank=True, help_text='OMOP concept for trial type', null=True)),
                ('enrollment_date', models.DateField(help_text='Date patient enrolled in trial')),
                ('enrollment_datetime', models.DateTimeField(blank=True, help_text='Precise enrollment datetime', null=True)),
                ('completion_date', models.DateField(blank=True, help_text='Date participation ended', null=True)),
                ('completion_datetime', models.DateTimeField(blank=True, help_text='Precise completion datetime', null=True)),
                ('participation_status', models.CharField(blank=True, help_text='Current participation status', max_length=50)),
                ('randomization_arm', models.CharField(blank=True, help_text='Trial arm assignment', max_length=50)),
                ('withdrawal_reason', models.CharField(blank=True, help_text='Reason for withdrawal if applicable', max_length=100)),
                ('enrolling_provider_id', models.IntegerField(blank=True, help_text='Provider who enrolled patient', null=True)),
                ('enrollment_visit_id', models.IntegerField(blank=True, help_text='Visit when enrolled', null=True)),
                ('participation_source_value', models.CharField(blank=True, help_text='Source participation ID', max_length=50)),
            ],
            options={
                'db_table': 'clinical_trial_participation',
            },
        ),
        migrations.CreateModel(
            name='Concept',
            fields=[
                ('concept_id', models.IntegerField(primary_key=True, serialize=False)),
                ('concept_name', models.CharField(max_length=255)),
                ('domain_id', models.CharField(help_text='Domain (Measurement, Drug, Condition, etc.)', max_length=20)),
                ('vocabulary_id', models.CharField(help_text='Vocabulary (SNOMED, LOINC, RxNorm, etc.)', max_length=20)),
                ('concept_class_id', models.CharField(help_text='Concept class', max_length=20)),
                ('standard_concept', models.CharField(blank=True, help_text='S=Standard, C=Classification', max_length=1)),
                ('concept_code', models.CharField(help_text='Source code', max_length=50)),
                ('valid_start_date', models.DateField(help_text='Date concept became valid')),
                ('valid_end_date', models.DateField(help_text='Date concept became invalid')),
                ('invalid_reason', models.CharField(blank=True, help_text='Reason concept is invalid', max_length=1)),
            ],
            options={
                'db_table': 'concept',
            },
        ),
        migrations.CreateModel(
            name='ConceptRelationship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relationship_id', models.CharField(help_text='Type of relationship (Maps to, Is a, etc.)', max_length=20)),
                ('valid_start_date', models.DateField()),
                ('valid_end_date', models.DateField()),
                ('invalid_reason', models.CharField(blank=True, max_length=1)),
            ],
            options={
                'db_table': 'concept_relationship',
            },
        ),
        migrations.CreateModel(
            name='ConditionOccurrence',
            fields=[
                ('condition_occurrence_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('condition_start_date', models.DateField(blank=True, null=True)),
                ('condition_end_date', models.DateField(blank=True, null=True)),
                ('stop_reason', models.CharField(blank=True, help_text='Reason condition ended', max_length=20)),
                ('provider_id', models.IntegerField(blank=True, help_text='Provider who recorded condition', null=True)),
                ('visit_occurrence_id', models.IntegerField(blank=True, help_text='Visit when condition was recorded', null=True)),
                ('visit_detail_id', models.IntegerField(blank=True, help_text='Visit detail for condition', null=True)),
                ('condition_source_value', models.CharField(blank=True, help_text='Source code for condition', max_length=50)),
                ('condition_status_source_value', models.CharField(blank=True, help_text='Source status value', max_length=50)),
                ('tumor_laterality', models.CharField(blank=True, choices=[('R', 'Right'), ('L', 'Left'), ('B', 'Bilateral'), ('M', 'Midline'), ('U', 'Unknown'), ('N', 'Not Applicable')], help_text='Laterality of the tumor', max_length=10)),
                ('ajcc_clinical_stage', models.CharField(blank=True, choices=[('0', 'Stage 0 (in situ)'), ('I', 'Stage I'), ('IA', 'Stage IA'), ('IB', 'Stage IB'), ('II', 'Stage II'), ('IIA', 'Stage IIA'), ('IIB', 'Stage IIB'), ('III', 'Stage III'), ('IIIA', 'Stage IIIA'), ('IIIB', 'Stage IIIB'), ('IIIC', 'Stage IIIC'), ('IV', 'Stage IV'), ('IVA', 'Stage IVA'), ('IVB', 'Stage IVB'), ('UNK', 'Unknown')], help_text='AJCC clinical stage', max_length=10)),
                ('ajcc_clinical_t', models.CharField(blank=True, choices=[('TX', 'TX - Primary tumor cannot be assessed'), ('T0', 'T0 - No evidence of primary tumor'), ('Tis', 'Tis - Carcinoma in situ'), ('T1', 'T1'), ('T1a', 'T1a'), ('T1b', 'T1b'), ('T1c', 'T1c'), ('T2', 'T2'), ('T2a', 'T2a'), ('T2b', 'T2b'), ('T3', 'T3'), ('T3a', 'T3a'), ('T3b', 'T3b'), ('T4', 'T4'), ('T4a', 'T4a'), ('T4b', 'T4b'), ('T4c', 'T4c'), ('T4d', 'T4d')], help_text='AJCC clinical T stage', max_length=10)),
                ('ajcc_clinical_n', models.CharField(blank=True, choices=[('NX', 'NX - Regional lymph nodes cannot be assessed'), ('N0', 'N0 - No regional lymph node metastasis'), ('N1', 'N1'), ('N1a', 'N1a'), ('N1b', 'N1b'), ('N1c', 'N1c'), ('N2', 'N2'), ('N2a', 'N2a'), ('N2b', 'N2b'), ('N2c', 'N2c'), ('N3', 'N3'), ('N3a', 'N3a'), ('N3b', 'N3b'), ('N3c', 'N3c')], help_text='AJCC clinical N stage', max_length=10)),
                ('ajcc_clinical_m', models.CharField(blank=True, choices=[('MX', 'MX - Distant metastasis cannot be assessed'), ('M0', 'M0 - No distant metastasis'), ('M1', 'M1 - Distant metastasis'), ('M1a', 'M1a'), ('M1b', 'M1b'), ('M1c', 'M1c')], help_text='AJCC clinical M stage', max_length=10)),
                ('ajcc_pathologic_stage', models.CharField(blank=True, choices=[('0', 'Stage 0 (in situ)'), ('I', 'Stage I'), ('IA', 'Stage IA'), ('IB', 'Stage IB'), ('II', 'Stage II'), ('IIA', 'Stage IIA'), ('IIB', 'Stage IIB'), ('III', 'Stage III'), ('IIIA', 'Stage IIIA'), ('IIIB', 'Stage IIIB'), ('IIIC', 'Stage IIIC'), ('IV', 'Stage IV'), ('IVA', 'Stage IVA'), ('IVB', 'Stage IVB'), ('UNK', 'Unknown')], help_text='AJCC pathologic stage', max_length=10)),
                ('ajcc_pathologic_t', models.CharField(blank=True, choices=[('TX', 'TX - Primary tumor cannot be assessed'), ('T0', 'T0 - No evidence of primary tumor'), ('Tis', 'Tis - Carcinoma in situ'), ('T1', 'T1'), ('T1a', 'T1a'), ('T1b', 'T1b'), ('T1c', 'T1c'), ('T2', 'T2'), ('T2a', 'T2a'), ('T2b', 'T2b'), ('T3', 'T3'), ('T3a', 'T3a'), ('T3b', 'T3b'), ('T4', 'T4'), ('T4a', 'T4a'), ('T4b', 'T4b'), ('T4c', 'T4c'), ('T4d', 'T4d')], help_text='AJCC pathologic T stage', max_length=10)),
                ('ajcc_pathologic_n', models.CharField(blank=True, choices=[('NX', 'NX - Regional lymph nodes cannot be assessed'), ('N0', 'N0 - No regional lymph node metastasis'), ('N1', 'N1'), ('N1a', 'N1a'), ('N1b', 'N1b'), ('N1c', 'N1c'), ('N2', 'N2'), ('N2a', 'N2a'), ('N2b', 'N2b'), ('N2c', 'N2c'), ('N3', 'N3'), ('N3a', 'N3a'), ('N3b', 'N3b'), ('N3c', 'N3c')], help_text='AJCC pathologic N stage', max_length=10)),
                ('ajcc_pathologic_m', models.CharField(blank=True, choices=[('MX', 'MX - Distant metastasis cannot be assessed'), ('M0', 'M0 - No distant metastasis'), ('M1', 'M1 - Distant metastasis'), ('M1a', 'M1a'), ('M1b', 'M1b'), ('M1c', 'M1c')], help_text='AJCC pathologic M stage', max_length=10)),
                ('histologic_grade', models.CharField(blank=True, choices=[('GX', 'GX - Grade cannot be assessed'), ('G1', 'G1 - Well differentiated'), ('G2', 'G2 - Moderately differentiated'), ('G3', 'G3 - Poorly differentiated'), ('G4', 'G4 - Undifferentiated')], help_text='Histologic grade', max_length=10)),
                ('nuclear_grade', models.CharField(blank=True, choices=[('GX', 'GX - Grade cannot be assessed'), ('G1', 'G1 - Well differentiated'), ('G2', 'G2 - Moderately differentiated'), ('G3', 'G3 - Poorly differentiated'), ('G4', 'G4 - Undifferentiated')], help_text='Nuclear grade', max_length=10)),
                ('estrogen_receptor_status', models.CharField(blank=True, choices=[('POS', 'Positive'), ('NEG', 'Negative'), ('EQU', 'Equivocal'), ('UNK', 'Unknown'), ('NT', 'Not Tested')], help_text='Estrogen receptor status', max_length=10)),
                ('progesterone_receptor_status', models.CharField(blank=True, choices=[('POS', 'Positive'), ('NEG', 'Negative'), ('EQU', 'Equivocal'), ('UNK', 'Unknown'), ('NT', 'Not Tested')], help_text='Progesterone receptor status', max_length=10)),
                ('her2_status', models.CharField(blank=True, choices=[('POS', 'Positive'), ('NEG', 'Negative'), ('EQU', 'Equivocal'), ('UNK', 'Unknown'), ('NT', 'Not Tested')], help_text='HER2 status', max_length=10)),
                ('staging_system', models.CharField(blank=True, help_text='Staging system used (AJCC, UICC, etc.)', max_length=50)),
                ('staging_system_version', models.CharField(blank=True, help_text='Version of staging system', max_length=20)),
            ],
            options={
                'db_table': 'condition_occurrence',
            },
        ),
        migrations.CreateModel(
            name='CuratedBiomarkerVocabulary',
            fields=[
                ('vocabulary_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('biomarker_name', models.CharField(help_text='Standard biomarker name', max_length=200)),
                ('biomarker_aliases', models.TextField(blank=True, help_text='Alternative names/synonyms')),
                ('biomarker_category', models.CharField(choices=[('PROTEIN', 'Protein Expression'), ('GENOMIC', 'Genomic Alteration'), ('IMMUNE', 'Immune Marker'), ('METABOLIC', 'Metabolic Marker'), ('BURDEN', 'Tumor Burden'), ('HORMONE', 'Hormone Receptor'), ('GROWTH', 'Growth Factor Receptor')], help_text='Biomarker category', max_length=50)),
                ('loinc_code', models.CharField(blank=True, help_text='LOINC code if available', max_length=20)),
                ('snomed_code', models.CharField(blank=True, help_text='SNOMED code if available', max_length=20)),
                ('hgnc_gene_symbol', models.CharField(blank=True, help_text='HGNC gene symbol', max_length=20)),
                ('cancer_types', models.TextField(blank=True, help_text='Applicable cancer types')),
                ('clinical_utility', models.TextField(help_text='Clinical utility description')),
                ('positive_threshold', models.FloatField(blank=True, help_text='Threshold for positive result', null=True)),
                ('high_threshold', models.FloatField(blank=True, help_text='Threshold for high expression', null=True)),
                ('units', models.CharField(blank=True, help_text='Standard units', max_length=50)),
                ('preferred_assays', models.TextField(blank=True, help_text='Preferred/validated assays')),
                ('fda_approved_assays', models.TextField(blank=True, help_text='FDA-approved companion diagnostics')),
                ('evidence_level', models.CharField(blank=True, choices=[('LEVEL_1', 'Level 1 - FDA approved'), ('LEVEL_2A', 'Level 2A - Professional guidelines'), ('LEVEL_2B', 'Level 2B - Expert consensus'), ('LEVEL_3', 'Level 3 - Emerging evidence'), ('LEVEL_4', 'Level 4 - Investigational')], help_text='Evidence level for clinical utility', max_length=20)),
                ('site_specific_codes', models.JSONField(blank=True, help_text='Site-specific codes and mappings', null=True)),
                ('local_reference_ranges', models.JSONField(blank=True, help_text='Local reference ranges by laboratory', null=True)),
                ('created_date', models.DateField(auto_now_add=True, help_text='Date added to vocabulary')),
                ('last_updated', models.DateField(auto_now=True, help_text='Last update date')),
                ('curator', models.CharField(blank=True, help_text='Curator/reviewer', max_length=200)),
            ],
            options={
                'db_table': 'curated_biomarker_vocabulary',
            },
        ),
        migrations.CreateModel(
            name='DrugExposure',
            fields=[
                ('drug_exposure_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('drug_exposure_start_datetime', models.DateTimeField(blank=True, help_text='Start datetime (set to midnight if only date known)', null=True)),
                ('drug_exposure_end_datetime', models.DateTimeField(blank=True, help_text='End datetime (set to midnight if only date known)', null=True)),
                ('dose', models.FloatField(blank=True, null=True)),
                ('verbatim_end_date', models.DateField(blank=True, help_text='Verbatim end date from source', null=True)),
                ('stop_reason', models.CharField(blank=True, help_text='Reason drug was stopped', max_length=20)),
                ('refills', models.IntegerField(blank=True, help_text='Number of refills', null=True)),
                ('quantity', models.FloatField(blank=True, help_text='Quantity dispensed', null=True)),
                ('days_supply', models.IntegerField(blank=True, help_text='Days supply', null=True)),
                ('sig', models.TextField(blank=True, help_text='Sig/directions for use')),
                ('lot_number', models.CharField(blank=True, help_text='Lot number', max_length=50)),
                ('provider_id', models.IntegerField(blank=True, help_text='Prescribing provider', null=True)),
                ('visit_occurrence_id', models.IntegerField(blank=True, help_text='Visit when prescribed', null=True)),
                ('visit_detail_id', models.IntegerField(blank=True, help_text='Visit detail for prescription', null=True)),
                ('drug_source_value', models.CharField(blank=True, help_text='Source drug value', max_length=50)),
                ('route_source_value', models.CharField(blank=True, help_text='Source route value', max_length=50)),
                ('dose_unit_source_value', models.CharField(blank=True, help_text='Source dose unit value', max_length=50)),
                ('line_of_therapy', models.IntegerField(blank=True, help_text='Line of therapy (1st, 2nd, 3rd, etc.)', null=True)),
                ('therapy_intent', models.CharField(blank=True, help_text='Intent of therapy (curative, palliative, etc.)', max_length=50)),
                ('therapy_regimen', models.CharField(blank=True, help_text='Name of therapy regimen', max_length=100)),
                ('combination_therapy', models.BooleanField(blank=True, help_text='Part of combination therapy', null=True)),
                ('treatment_response', models.CharField(blank=True, help_text='Treatment response', max_length=50)),
                ('response_assessment_date', models.DateField(blank=True, help_text='Date of response assessment', null=True)),
                ('progression_free_survival_days', models.IntegerField(blank=True, help_text='PFS in days', null=True)),
                ('overall_survival_days', models.IntegerField(blank=True, help_text='OS in days', null=True)),
                ('maximum_toxicity_grade', models.IntegerField(blank=True, help_text='Maximum toxicity grade observed', null=True)),
                ('dose_modifications', models.TextField(blank=True, help_text='Dose modifications made (JSON)')),
                ('treatment_delays', models.TextField(blank=True, help_text='Treatment delays (JSON)')),
                ('supportive_therapy', models.BooleanField(blank=True, help_text='Is this supportive therapy', null=True)),
                ('concomitant_medication', models.BooleanField(blank=True, help_text='Is this concomitant medication', null=True)),
                ('washout_period_required', models.BooleanField(blank=True, help_text='Requires washout period', null=True)),
                ('drug_classification', models.CharField(blank=True, choices=[('PLATINUM', 'Platinum-based Therapy'), ('IMMUNO', 'Immunotherapy'), ('TARGETED', 'Targeted Therapy'), ('CHEMO', 'Traditional Chemotherapy'), ('HORMONE', 'Hormone Therapy'), ('RADIATION', 'Radiation Therapy'), ('SCT', 'Stem Cell Transplant'), ('SURGERY', 'Surgical Intervention'), ('TRIAL', 'Clinical Trial Drug')], help_text='Drug classification', max_length=50)),
                ('is_platinum_agent', models.BooleanField(default=False, help_text='Is platinum-based agent')),
                ('is_immunotherapy', models.BooleanField(default=False, help_text='Is immunotherapy')),
                ('is_targeted_therapy', models.BooleanField(default=False, help_text='Is targeted therapy')),
                ('is_novel_agent', models.BooleanField(default=False, help_text='Is investigational agent')),
                ('regimen_role', models.CharField(blank=True, choices=[('PRIMARY', 'Primary Agent'), ('COMBINATION', 'Combination Agent'), ('MAINTENANCE', 'Maintenance Agent'), ('SUPPORTIVE', 'Supportive Care'), ('PREMEDICATION', 'Premedication')], help_text='Role within regimen', max_length=20)),
                ('cycle_number', models.IntegerField(blank=True, help_text='Cycle number within regimen', null=True)),
                ('cycle_day', models.IntegerField(blank=True, help_text='Day within cycle', null=True)),
                ('total_cycles_planned', models.IntegerField(blank=True, help_text='Total planned cycles', null=True)),
                ('clinical_trial_drug', models.BooleanField(default=False, help_text='Administered in clinical trial')),
                ('fda_approved_indication', models.BooleanField(blank=True, help_text='FDA approved for this indication', null=True)),
                ('compassionate_use', models.BooleanField(default=False, help_text='Compassionate use program')),
                ('gap_before_start_days', models.IntegerField(blank=True, help_text='Gap before treatment start', null=True)),
                ('gap_after_end_days', models.IntegerField(blank=True, help_text='Gap after treatment end', null=True)),
            ],
            options={
                'db_table': 'drug_exposure',
            },
        ),
        migrations.CreateModel(
            name='Episode',
            fields=[
                ('episode_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('episode_start_date', models.DateField(blank=True, null=True)),
                ('episode_end_date', models.DateField(blank=True, null=True)),
                ('episode_number', models.IntegerField(blank=True, null=True)),
                ('episode_type', models.CharField(blank=True, help_text='Episode type (primary_diagnosis, progression, recurrence, remission)', max_length=50)),
                ('disease_status', models.CharField(blank=True, help_text='Disease status (active, remission, progression, recurrence)', max_length=50)),
                ('response_to_treatment', models.CharField(blank=True, help_text='Response to treatment (complete_response, partial_response, etc.)', max_length=50)),
                ('episode_source_value', models.CharField(blank=True, help_text='Source episode identifier', max_length=50)),
            ],
            options={
                'db_table': 'episode',
            },
        ),
        migrations.CreateModel(
            name='EpisodeEvent',
            fields=[
                ('episode_event_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('event_field_concept_id', models.IntegerField()),
                ('event_id', models.BigIntegerField()),
            ],
            options={
                'db_table': 'episode_event',
            },
        ),
        migrations.CreateModel(
            name='GenomicVariant',
            fields=[
                ('variant_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('gene_symbol', models.CharField(help_text='Gene symbol (e.g., BRCA1, TP53)', max_length=20)),
                ('hgvs_notation', models.CharField(blank=True, help_text='HGVS notation for variant', max_length=200)),
                ('variant_type', models.CharField(blank=True, choices=[('SNV', 'Single Nucleotide Variant'), ('INDEL', 'Insertion/Deletion'), ('CNV', 'Copy Number Variant'), ('SV', 'Structural Variant'), ('FUSION', 'Gene Fusion'), ('MSI', 'Microsatellite Instability'), ('TMB', 'Tumor Mutational Burden'), ('LOH', 'Loss of Heterozygosity')], help_text='Type of variant (SNV, CNV, etc.)', max_length=50)),
                ('chromosome', models.CharField(blank=True, help_text='Chromosome location', max_length=10)),
                ('genomic_position', models.BigIntegerField(blank=True, help_text='Genomic position', null=True)),
                ('reference_allele', models.CharField(blank=True, help_text='Reference allele sequence', max_length=200)),
                ('alternate_allele', models.CharField(blank=True, help_text='Alternate allele sequence', max_length=200)),
                ('variant_allele_frequency', models.FloatField(blank=True, help_text='Variant allele frequency', null=True)),
                ('clinical_significance', models.CharField(blank=True, choices=[('PATH', 'Pathogenic'), ('LPATH', 'Likely Pathogenic'), ('BEN', 'Benign'), ('LBEN', 'Likely Benign'), ('VUS', 'Variant of Uncertain Significance'), ('DRUG', 'Drug Response'), ('RISK', 'Risk Factor'), ('PROT', 'Protective')], help_text='Clinical significance (pathogenic, benign, etc.)', max_length=50)),
                ('interpretation', models.TextField(blank=True, help_text='Clinical interpretation of variant')),
                ('clinvar_id', models.CharField(blank=True, help_text='ClinVar variant ID', max_length=50)),
                ('cosmic_id', models.CharField(blank=True, help_text='COSMIC variant ID', max_length=50)),
                ('dbsnp_id', models.CharField(blank=True, help_text='dbSNP rs ID', max_length=50)),
                ('ga4gh_id', models.CharField(blank=True, help_text='GA4GH variant ID', max_length=100)),
                ('transcript_id', models.CharField(blank=True, help_text='Transcript ID (e.g., ENST)', max_length=50)),
                ('protein_change', models.CharField(blank=True, help_text='Protein change notation', max_length=200)),
                ('consequence_type', models.CharField(blank=True, help_text='Variant consequence type', max_length=100)),
                ('test_date', models.DateField(help_text='Date of genetic testing')),
                ('testing_method', models.CharField(blank=True, choices=[('PANEL', 'Targeted Gene Panel'), ('WES', 'Whole Exome Sequencing'), ('WGS', 'Whole Genome Sequencing'), ('RNA', 'RNA Sequencing'), ('FISH', 'Fluorescence In Situ Hybridization'), ('IHC', 'Immunohistochemistry'), ('PCR', 'Polymerase Chain Reaction'), ('LIQUID', 'Liquid Biopsy/ctDNA')], help_text='Testing method used', max_length=100)),
                ('laboratory', models.CharField(blank=True, help_text='Testing laboratory', max_length=100)),
                ('test_kit', models.CharField(blank=True, help_text='Specific test kit or panel used', max_length=100)),
                ('read_depth', models.IntegerField(blank=True, help_text='Sequencing read depth', null=True)),
                ('quality_score', models.FloatField(blank=True, help_text='Variant quality score', null=True)),
                ('allele_fraction', models.FloatField(blank=True, help_text='Tumor allele fraction', null=True)),
                ('molecular_alteration', models.CharField(blank=True, choices=[('BRCA1', 'BRCA1 Mutation'), ('BRCA2', 'BRCA2 Mutation'), ('ESR1', 'ESR1 Mutation'), ('PIK3CA', 'PIK3CA Mutation'), ('HER2_AMP', 'HER2 Amplification'), ('EGFR', 'EGFR Mutation'), ('KRAS', 'KRAS Mutation'), ('TP53', 'TP53 Mutation'), ('MSI_H', 'Microsatellite Instability High'), ('TMB_H', 'Tumor Mutational Burden High'), ('PDL1_H', 'PD-L1 High Expression'), ('NTRK', 'NTRK Gene Fusion')], help_text='Standardized molecular alteration type', max_length=50)),
                ('biomarker_status', models.CharField(blank=True, choices=[('POS', 'Positive'), ('NEG', 'Negative'), ('EQU', 'Equivocal'), ('UNK', 'Unknown'), ('NT', 'Not Tested')], help_text='Biomarker status', max_length=10)),
                ('copy_number', models.FloatField(blank=True, help_text='Copy number value', null=True)),
                ('expression_level', models.FloatField(blank=True, help_text='Gene expression level', null=True)),
            ],
            options={
                'db_table': 'genomic_variant',
            },
        ),
        migrations.CreateModel(
            name='ICDOMorphologyConcept',
            fields=[
                ('icdo_morphology_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('icdo_morphology_code', models.CharField(help_text='ICD-O morphology code (####/#)', max_length=10, unique=True)),
                ('icdo_morphology_name', models.CharField(help_text='ICD-O morphology name', max_length=255)),
                ('histologic_type', models.CharField(help_text='Histologic type category', max_length=100)),
                ('histologic_subtype', models.CharField(blank=True, help_text='Histologic subtype', max_length=100)),
                ('behavior_code', models.CharField(choices=[('0', 'Benign'), ('1', 'Uncertain/Borderline'), ('2', 'In Situ'), ('3', 'Malignant')], help_text='ICD-O behavior code', max_length=1)),
                ('behavior_description', models.CharField(choices=[('BENIGN', 'Benign'), ('UNCERTAIN', 'Uncertain/Borderline'), ('IN_SITU', 'In Situ'), ('MALIGNANT', 'Malignant')], help_text='Behavior description', max_length=50)),
                ('grade_applicable', models.BooleanField(default=True, help_text='Whether grading applies to this morphology')),
                ('staging_applicable', models.BooleanField(default=True, help_text='Whether staging applies to this morphology')),
                ('who_classification', models.CharField(blank=True, help_text='WHO tumor classification', max_length=100)),
                ('major_category', models.CharField(help_text='Major morphology category', max_length=100)),
            ],
            options={
                'db_table': 'icdo_morphology_concept',
            },
        ),
        migrations.CreateModel(
            name='ICDOTopographyConcept',
            fields=[
                ('icdo_topography_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('icdo_site_code', models.CharField(help_text='ICD-O topography code (C##.#)', max_length=10, unique=True)),
                ('icdo_site_name', models.CharField(help_text='ICD-O topography name', max_length=255)),
                ('major_site', models.CharField(help_text='Major anatomical site category', max_length=100)),
                ('site_group', models.CharField(blank=True, help_text='Site group classification', max_length=100)),
                ('body_system', models.CharField(blank=True, choices=[('RESPIRATORY', 'Respiratory System'), ('DIGESTIVE', 'Digestive System'), ('GENITOURINARY', 'Genitourinary System'), ('HEMATOPOIETIC', 'Hematopoietic System'), ('ENDOCRINE', 'Endocrine System'), ('NERVOUS', 'Nervous System'), ('MUSCULOSKELETAL', 'Musculoskeletal System'), ('SKIN', 'Skin'), ('BREAST', 'Breast'), ('REPRODUCTIVE', 'Reproductive System'), ('OTHER', 'Other/Multiple')], help_text='Body system classification', max_length=50)),
                ('laterality_applicable', models.BooleanField(default=False, help_text='Whether laterality applies to this site')),
            ],
            options={
                'db_table': 'icdo_topography_concept',
            },
        ),
        migrations.CreateModel(
            name='ImagingMeasurement',
            fields=[
                ('imaging_measurement_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('measurement_name', models.CharField(help_text='Name of measurement', max_length=200)),
                ('anatomic_region', models.CharField(blank=True, help_text='Anatomical region', max_length=100)),
                ('laterality', models.CharField(blank=True, choices=[('R', 'Right'), ('L', 'Left'), ('B', 'Bilateral'), ('M', 'Midline'), ('U', 'Unknown'), ('N', 'Not Applicable')], help_text='Laterality if applicable', max_length=20)),
                ('numeric_value', models.FloatField(blank=True, help_text='Numeric measurement value', null=True)),
                ('unit', models.CharField(blank=True, help_text='Unit of measurement', max_length=20)),
                ('categorical_value', models.CharField(blank=True, help_text='Categorical result', max_length=100)),
                ('lesion_type', models.CharField(blank=True, choices=[('TARGET', 'Target Lesion'), ('NON_TARGET', 'Non-target Lesion'), ('NEW', 'New Lesion'), ('UNKNOWN', 'Unknown')], help_text='Type of lesion for RECIST', max_length=50)),
                ('lesion_number', models.IntegerField(blank=True, help_text='Lesion identification number', null=True)),
                ('longest_diameter', models.FloatField(blank=True, help_text='Longest diameter in mm', null=True)),
                ('perpendicular_diameter', models.FloatField(blank=True, help_text='Perpendicular diameter in mm', null=True)),
                ('volume', models.FloatField(blank=True, help_text='Volume in mm³', null=True)),
                ('response_category', models.CharField(blank=True, choices=[('CR', 'Complete Response'), ('PR', 'Partial Response'), ('SD', 'Stable Disease'), ('PD', 'Progressive Disease'), ('NE', 'Not Evaluable'), ('MR', 'Mixed Response')], help_text='Response assessment', max_length=20)),
                ('percent_change', models.FloatField(blank=True, help_text='Percent change from baseline', null=True)),
                ('measurement_confidence', models.CharField(blank=True, choices=[('HIGH', 'High Confidence'), ('MODERATE', 'Moderate Confidence'), ('LOW', 'Low Confidence')], help_text='Confidence in measurement', max_length=20)),
                ('reader_name', models.CharField(blank=True, help_text='Name of reader/radiologist', max_length=200)),
                ('measurement_date', models.DateField(help_text='Date measurement was performed')),
                ('enhancement_pattern', models.CharField(blank=True, help_text='Enhancement pattern', max_length=100)),
                ('signal_intensity', models.CharField(blank=True, help_text='Signal intensity characteristics', max_length=100)),
                ('perfusion_parameters', models.JSONField(blank=True, help_text='Perfusion parameters JSON', null=True)),
            ],
            options={
                'db_table': 'imaging_measurement',
            },
        ),
        migrations.CreateModel(
            name='ImagingStudy',
            fields=[
                ('imaging_study_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('study_uid', models.CharField(help_text='DICOM Study Instance UID', max_length=64, unique=True)),
                ('accession_number', models.CharField(blank=True, help_text='Accession number', max_length=50)),
                ('study_date', models.DateField(help_text='Date of imaging study')),
                ('study_time', models.TimeField(blank=True, help_text='Time of imaging study', null=True)),
                ('modality', models.CharField(choices=[('CT', 'Computed Tomography'), ('MRI', 'Magnetic Resonance Imaging'), ('PET', 'Positron Emission Tomography'), ('PET_CT', 'PET/CT'), ('US', 'Ultrasound'), ('XR', 'X-Ray'), ('MG', 'Mammography'), ('NM', 'Nuclear Medicine'), ('FL', 'Fluoroscopy'), ('AG', 'Angiography')], help_text='Primary imaging modality', max_length=20)),
                ('study_description', models.CharField(blank=True, help_text='Study description', max_length=200)),
                ('body_part_examined', models.CharField(blank=True, help_text='Body part examined', max_length=100)),
                ('contrast_agent', models.CharField(choices=[('NONE', 'No Contrast'), ('IOD', 'Iodinated Contrast'), ('GAD', 'Gadolinium-based'), ('BAR', 'Barium-based'), ('MB', 'Microbubble'), ('RI', 'Radioisotope')], default='NONE', help_text='Contrast agent used', max_length=20)),
                ('contrast_dose', models.FloatField(blank=True, help_text='Contrast dose in mL', null=True)),
                ('acquisition_protocol', models.CharField(blank=True, help_text='Acquisition protocol', max_length=200)),
                ('indication', models.TextField(blank=True, help_text='Clinical indication for imaging')),
                ('referring_physician', models.CharField(blank=True, help_text='Referring physician', max_length=200)),
                ('image_quality', models.CharField(blank=True, choices=[('EXCELLENT', 'Excellent'), ('GOOD', 'Good'), ('ADEQUATE', 'Adequate'), ('POOR', 'Poor'), ('NON_DIAGNOSTIC', 'Non-diagnostic')], help_text='Overall image quality', max_length=50)),
                ('artifacts_present', models.BooleanField(default=False, help_text='Imaging artifacts present')),
                ('artifact_description', models.TextField(blank=True, help_text='Description of artifacts')),
                ('dicom_available', models.BooleanField(default=True, help_text='DICOM data available')),
                ('image_count', models.IntegerField(blank=True, help_text='Number of images in study', null=True)),
                ('data_size_mb', models.FloatField(blank=True, help_text='Data size in MB', null=True)),
                ('storage_location', models.CharField(blank=True, help_text='Storage location/URL', max_length=500)),
                ('baseline_imaging', models.BooleanField(default=False, help_text='Baseline imaging for trial')),
                ('follow_up_imaging', models.BooleanField(default=False, help_text='Follow-up imaging for trial')),
                ('response_assessment', models.BooleanField(default=False, help_text='Used for response assessment')),
            ],
            options={
                'db_table': 'imaging_study',
            },
        ),
        migrations.CreateModel(
            name='InfectiousDiseaseVocabulary',
            fields=[
                ('vocabulary_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('disease_name', models.CharField(help_text='Standardized disease name', max_length=200)),
                ('disease_aliases', models.TextField(blank=True, help_text='Alternative names/abbreviations')),
                ('pathogen_type', models.CharField(choices=[('VIRUS', 'Viral'), ('BACTERIA', 'Bacterial'), ('FUNGUS', 'Fungal'), ('PARASITE', 'Parasitic'), ('PRION', 'Prion'), ('OTHER', 'Other')], help_text='Type of pathogen', max_length=20)),
                ('icd10_code', models.CharField(blank=True, help_text='ICD-10 code', max_length=10)),
                ('snomed_code', models.CharField(blank=True, help_text='SNOMED code', max_length=20)),
                ('exclusion_criterion', models.BooleanField(default=False, help_text='Commonly used as exclusion criterion')),
                ('requires_monitoring', models.BooleanField(default=False, help_text='Requires monitoring during treatment')),
                ('drug_interaction_risk', models.BooleanField(default=False, help_text='Risk of drug interactions')),
                ('standard_tests', models.JSONField(blank=True, help_text='Standard diagnostic tests', null=True)),
                ('test_interpretation', models.TextField(blank=True, help_text='Test result interpretation')),
                ('screening_recommendations', models.TextField(blank=True, help_text='Screening recommendations')),
                ('treatment_considerations', models.TextField(blank=True, help_text='Treatment considerations for trials')),
                ('monitoring_requirements', models.TextField(blank=True, help_text='Monitoring requirements')),
                ('precautions', models.TextField(blank=True, help_text='Special precautions')),
                ('endemic_regions', models.TextField(blank=True, help_text='Geographic regions where endemic')),
                ('travel_risk_areas', models.TextField(blank=True, help_text='Travel-related risk areas')),
                ('created_date', models.DateField(auto_now_add=True)),
                ('last_updated', models.DateField(auto_now=True)),
                ('curator', models.CharField(blank=True, help_text='Curator/reviewer', max_length=200)),
            ],
            options={
                'db_table': 'infectious_disease_vocabulary',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('location_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('address_1', models.CharField(blank=True, max_length=255)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('state', models.CharField(blank=True, max_length=100)),
                ('zip', models.CharField(blank=True, max_length=20)),
                ('country_concept_id', models.IntegerField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, help_text='Longitude coordinate', null=True)),
                ('latitude', models.FloatField(blank=True, help_text='Latitude coordinate', null=True)),
            ],
            options={
                'db_table': 'location',
            },
        ),
        migrations.CreateModel(
            name='Measurement',
            fields=[
                ('measurement_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('measurement_datetime', models.DateTimeField(blank=True, help_text='Measurement datetime (set to midnight if only date known)', null=True)),
                ('value_as_number', models.FloatField(blank=True, null=True)),
                ('modifier_of_event_id', models.BigIntegerField(blank=True, null=True)),
                ('modifier_of_field_concept_id', models.IntegerField(blank=True, null=True)),
                ('range_low', models.FloatField(blank=True, help_text='Normal range low value', null=True)),
                ('range_high', models.FloatField(blank=True, help_text='Normal range high value', null=True)),
                ('provider_id', models.IntegerField(blank=True, help_text='Provider who ordered measurement', null=True)),
                ('visit_occurrence_id', models.IntegerField(blank=True, help_text='Visit when measured', null=True)),
                ('visit_detail_id', models.IntegerField(blank=True, help_text='Visit detail for measurement', null=True)),
                ('measurement_source_value', models.CharField(blank=True, help_text='Source value', max_length=50)),
                ('unit_source_value', models.CharField(blank=True, help_text='Source unit value', max_length=50)),
                ('value_source_value', models.CharField(blank=True, help_text='Source result value', max_length=50)),
                ('measurement_source', models.CharField(blank=True, choices=[('LAB', 'Laboratory Result'), ('VITAL', 'Vital Sign'), ('PATIENT', 'Patient Reported'), ('CLINICAL', 'Clinical Assessment')], help_text='Source type of measurement', max_length=10)),
                ('specimen_type', models.CharField(blank=True, help_text='Type of specimen (blood, urine, etc.)', max_length=50)),
                ('fasting_status', models.BooleanField(blank=True, help_text='Whether patient was fasting', null=True)),
                ('measurement_method', models.CharField(blank=True, help_text='Method used for measurement', max_length=100)),
                ('critical_value_flag', models.BooleanField(blank=True, help_text='Whether value is critical', null=True)),
                ('measurement_quality_flag', models.CharField(blank=True, help_text='Quality flag for measurement', max_length=20)),
                ('instrument_id', models.CharField(blank=True, help_text='Instrument/device used', max_length=50)),
                ('lab_batch_id', models.CharField(blank=True, help_text='Laboratory batch identifier', max_length=50)),
                ('biomarker_type', models.CharField(blank=True, help_text='Type of biomarker (protein, genomic, metabolic)', max_length=50)),
                ('assay_method', models.CharField(blank=True, help_text='Specific assay method used', max_length=100)),
                ('reference_range_text', models.CharField(blank=True, help_text='Text description of reference range', max_length=200)),
                ('clinical_interpretation', models.TextField(blank=True, help_text='Clinical interpretation of result')),
                ('loinc_code', models.CharField(blank=True, help_text='LOINC code for measurement', max_length=20)),
                ('snomed_code', models.CharField(blank=True, help_text='SNOMED code for measurement', max_length=20)),
                ('lab_test_category', models.CharField(blank=True, choices=[('HEME', 'Hematology'), ('CHEM', 'Clinical Chemistry'), ('IMMUNO', 'Immunology'), ('MOLEC', 'Molecular Diagnostics'), ('TUMOR', 'Tumor Markers'), ('COAG', 'Coagulation'), ('ENDO', 'Endocrine'), ('CARDIO', 'Cardiac Markers')], help_text='Laboratory test category', max_length=20)),
                ('delta_check_flag', models.BooleanField(blank=True, help_text='Delta check alert flag', null=True)),
                ('panic_value_flag', models.BooleanField(blank=True, help_text='Panic/critical value flag', null=True)),
                ('hemolysis_flag', models.BooleanField(blank=True, help_text='Hemolysis interference flag', null=True)),
                ('lipemia_flag', models.BooleanField(blank=True, help_text='Lipemia interference flag', null=True)),
                ('icterus_flag', models.BooleanField(blank=True, help_text='Icterus interference flag', null=True)),
                ('drug_concentration', models.FloatField(blank=True, help_text='Drug concentration level', null=True)),
                ('therapeutic_range_low', models.FloatField(blank=True, help_text='Therapeutic range lower bound', null=True)),
                ('therapeutic_range_high', models.FloatField(blank=True, help_text='Therapeutic range upper bound', null=True)),
                ('tumor_marker_trend', models.CharField(blank=True, choices=[('INCREASING', 'Increasing'), ('DECREASING', 'Decreasing'), ('STABLE', 'Stable'), ('FLUCTUATING', 'Fluctuating')], help_text='Tumor marker trend', max_length=20)),
                ('previous_value', models.FloatField(blank=True, help_text='Previous measurement value', null=True)),
                ('percent_change', models.FloatField(blank=True, help_text='Percent change from previous', null=True)),
                ('expression_level', models.CharField(blank=True, choices=[('NEGATIVE', 'Negative (0%)'), ('LOW', 'Low (1-10%)'), ('MODERATE', 'Moderate (11-50%)'), ('HIGH', 'High (>50%)'), ('OVEREXPRESSED', 'Overexpressed')], help_text='Biomarker expression level classification', max_length=20)),
                ('ihc_score', models.CharField(blank=True, choices=[('0', 'Score 0'), ('1+', 'Score 1+'), ('2+', 'Score 2+'), ('3+', 'Score 3+')], help_text='IHC intensity score', max_length=10)),
                ('percent_positive_cells', models.FloatField(blank=True, help_text='Percentage of positive cells', null=True)),
                ('h_score', models.FloatField(blank=True, help_text='H-score (0-300)', null=True)),
                ('allred_intensity', models.IntegerField(blank=True, help_text='Allred intensity score (0-3)', null=True)),
                ('allred_proportion', models.IntegerField(blank=True, help_text='Allred proportion score (0-5)', null=True)),
                ('allred_total', models.IntegerField(blank=True, help_text='Total Allred score (0-8)', null=True)),
                ('fish_ratio', models.FloatField(blank=True, help_text='FISH signal ratio', null=True)),
                ('fish_signal_count', models.FloatField(blank=True, help_text='Average signal count per nucleus', null=True)),
                ('fish_interpretation', models.CharField(blank=True, choices=[('AMPLIFIED', 'Amplified'), ('NOT_AMPLIFIED', 'Not Amplified'), ('EQUIVOCAL', 'Equivocal')], help_text='FISH interpretation', max_length=20)),
                ('mutation_status', models.CharField(blank=True, choices=[('WILD_TYPE', 'Wild Type'), ('MUTATED', 'Mutated'), ('UNKNOWN', 'Unknown'), ('NOT_TESTED', 'Not Tested')], help_text='Mutation status', max_length=20)),
                ('tmb_score', models.FloatField(blank=True, help_text='Tumor mutational burden (mutations/Mb)', null=True)),
                ('tmb_status', models.CharField(blank=True, choices=[('TMB_HIGH', 'TMB-High'), ('TMB_LOW', 'TMB-Low'), ('TMB_INTERMEDIATE', 'TMB-Intermediate')], help_text='TMB status classification', max_length=20)),
                ('msi_status', models.CharField(blank=True, choices=[('MSI_HIGH', 'MSI-High'), ('MSI_LOW', 'MSI-Low'), ('MSS', 'Microsatellite Stable')], help_text='Microsatellite instability status', max_length=15)),
                ('pdl1_combined_positive_score', models.FloatField(blank=True, help_text='PD-L1 Combined Positive Score', null=True)),
                ('pdl1_tumor_proportion_score', models.FloatField(blank=True, help_text='PD-L1 Tumor Proportion Score', null=True)),
                ('pdl1_immune_cell_score', models.FloatField(blank=True, help_text='PD-L1 Immune Cell Score', null=True)),
                ('hrd_score', models.FloatField(blank=True, help_text='Homologous recombination deficiency score', null=True)),
                ('hrd_status', models.CharField(blank=True, choices=[('HRD_POSITIVE', 'HRD Positive'), ('HRD_NEGATIVE', 'HRD Negative'), ('INCONCLUSIVE', 'Inconclusive')], help_text='HRD status', max_length=15)),
                ('til_percentage', models.FloatField(blank=True, help_text='Tumor infiltrating lymphocytes percentage', null=True)),
                ('til_density', models.CharField(blank=True, choices=[('ABSENT', 'Absent (0%)'), ('LOW', 'Low (1-10%)'), ('INTERMEDIATE', 'Intermediate (11-50%)'), ('HIGH', 'High (>50%)')], help_text='TIL density classification', max_length=15)),
                ('ctdna_detected', models.BooleanField(blank=True, help_text='Whether ctDNA was detected', null=True)),
                ('ctdna_allele_frequency', models.FloatField(blank=True, help_text='ctDNA variant allele frequency', null=True)),
                ('ctdna_copy_number', models.FloatField(blank=True, help_text='ctDNA copy number', null=True)),
            ],
            options={
                'db_table': 'measurement',
            },
        ),
        migrations.CreateModel(
            name='Modifier',
            fields=[
                ('modifier_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('modifier_of_event_id', models.BigIntegerField(help_text='ID of the event being modified')),
                ('modifier_value_as_number', models.FloatField(blank=True, help_text='Numeric value of the modifier', null=True)),
                ('modifier_value_as_string', models.CharField(blank=True, help_text='String value of the modifier', max_length=255)),
                ('modifier_datetime', models.DateTimeField(blank=True, help_text='Datetime of modifier', null=True)),
                ('provider_id', models.IntegerField(blank=True, help_text='Provider who recorded modifier', null=True)),
                ('visit_occurrence_id', models.IntegerField(blank=True, help_text='Visit when modifier was recorded', null=True)),
                ('modifier_source_value', models.CharField(blank=True, help_text='Source value for modifier', max_length=50)),
            ],
            options={
                'db_table': 'modifier',
            },
        ),
        migrations.CreateModel(
            name='MolecularTest',
            fields=[
                ('test_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('test_name', models.CharField(help_text='Name of molecular test/panel', max_length=200)),
                ('test_type', models.CharField(choices=[('PANEL', 'Targeted Gene Panel'), ('WES', 'Whole Exome Sequencing'), ('WGS', 'Whole Genome Sequencing'), ('RNA', 'RNA Sequencing'), ('FISH', 'Fluorescence In Situ Hybridization'), ('IHC', 'Immunohistochemistry'), ('PCR', 'Polymerase Chain Reaction'), ('LIQUID', 'Liquid Biopsy/ctDNA')], help_text='Type of molecular testing', max_length=50)),
                ('test_date', models.DateField(help_text='Date of testing')),
                ('laboratory', models.CharField(help_text='Testing laboratory', max_length=200)),
                ('laboratory_id', models.CharField(blank=True, help_text='Laboratory identifier', max_length=50)),
                ('test_version', models.CharField(blank=True, help_text='Test version/kit version', max_length=50)),
                ('specimen_type', models.CharField(help_text='Type of specimen tested', max_length=100)),
                ('specimen_site', models.CharField(blank=True, help_text='Anatomical site of specimen', max_length=100)),
                ('collection_date', models.DateField(blank=True, help_text='Specimen collection date', null=True)),
                ('overall_result', models.CharField(choices=[('POSITIVE', 'Positive'), ('NEGATIVE', 'Negative'), ('INDETERMINATE', 'Indeterminate'), ('FAILED', 'Failed')], help_text='Overall test result', max_length=50)),
                ('tumor_content', models.FloatField(blank=True, help_text='Tumor content percentage', null=True)),
                ('dna_quality', models.CharField(blank=True, help_text='DNA quality assessment', max_length=50)),
                ('actionable_alterations_count', models.IntegerField(default=0, help_text='Number of actionable alterations found')),
                ('report_date', models.DateField(blank=True, help_text='Date of report', null=True)),
                ('report_url', models.URLField(blank=True, help_text='URL to full report')),
                ('raw_data_available', models.BooleanField(default=False, help_text='Raw sequencing data available')),
            ],
            options={
                'db_table': 'molecular_test',
            },
        ),
        migrations.CreateModel(
            name='Observation',
            fields=[
                ('observation_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('observation_datetime', models.DateTimeField(blank=True, help_text='Observation datetime (set to midnight if only date known)', null=True)),
                ('value_as_number', models.FloatField(blank=True, null=True)),
                ('value_as_string', models.CharField(blank=True, max_length=255)),
                ('provider_id', models.IntegerField(blank=True, help_text='Provider who made observation', null=True)),
                ('visit_occurrence_id', models.IntegerField(blank=True, help_text='Visit when observed', null=True)),
                ('visit_detail_id', models.IntegerField(blank=True, help_text='Visit detail for observation', null=True)),
                ('observation_source_value', models.CharField(blank=True, help_text='Source value', max_length=50)),
                ('unit_source_value', models.CharField(blank=True, help_text='Source unit value', max_length=50)),
                ('qualifier_source_value', models.CharField(blank=True, help_text='Source qualifier value', max_length=50)),
                ('observation_source', models.CharField(blank=True, choices=[('EXAM', 'Clinical Examination'), ('IMAGING', 'Medical Imaging'), ('PATH', 'Pathology Report'), ('GENETIC', 'Genetic Testing')], help_text='Source type of observation', max_length=10)),
                ('clinical_significance', models.CharField(blank=True, help_text='Clinical significance of observation', max_length=100)),
                ('interpretation_code', models.CharField(blank=True, help_text='Standardized interpretation code', max_length=50)),
                ('assay_type', models.CharField(blank=True, help_text='Type of molecular assay', max_length=100)),
                ('detection_method', models.CharField(blank=True, help_text='Detection method used', max_length=100)),
                ('performance_score_type', models.CharField(blank=True, help_text='Type of performance score (ECOG, Karnofsky)', max_length=20)),
                ('genetic_test_result', models.TextField(blank=True, help_text='Genetic test results (JSON)')),
                ('mutation_interpretation', models.TextField(blank=True, help_text='Clinical interpretation of genetic findings')),
                ('symptom_severity', models.IntegerField(blank=True, help_text='Symptom severity score (1-10)', null=True)),
                ('functional_status', models.CharField(blank=True, help_text='Functional status assessment', max_length=50)),
                ('quality_of_life_score', models.FloatField(blank=True, help_text='Quality of life score', null=True)),
                ('substance_use_type', models.CharField(blank=True, help_text='Type of substance use', max_length=50)),
                ('substance_use_frequency', models.CharField(blank=True, help_text='Frequency of substance use', max_length=50)),
                ('social_support_level', models.CharField(blank=True, help_text='Level of social support', max_length=50)),
                ('caregiver_availability', models.BooleanField(blank=True, help_text='Caregiver availability status', null=True)),
                ('infection_risk_category', models.CharField(blank=True, help_text='Infection risk category', max_length=50)),
                ('geographic_risk_exposure', models.TextField(blank=True, help_text='Geographic risk exposure details')),
                ('behavioral_category', models.CharField(blank=True, choices=[('smoking_status', 'Smoking/Tobacco Use Status'), ('substance_use', 'Substance Use Assessment'), ('alcohol_use', 'Alcohol Use Assessment'), ('contraceptive_use', 'Contraceptive Use'), ('pregnancy_status', 'Pregnancy Status'), ('menopausal_status', 'Menopausal Status'), ('infectious_disease', 'Infectious Disease Status'), ('caregiver_status', 'Caregiver/Social Support'), ('consent_capability', 'Consent Capability'), ('mental_health', 'Mental Health Status'), ('geographic_risk', 'Geographic Risk Exposure'), ('social_determinant', 'Social Determinant of Health'), ('reproductive_health', 'Reproductive Health Status')], help_text='Category of behavioral/social observation', max_length=30)),
                ('smoking_status', models.CharField(blank=True, choices=[('never_smoker', 'Never Smoker'), ('current_smoker', 'Current Smoker'), ('former_smoker', 'Former Smoker'), ('passive_smoker', 'Passive Smoker (Environmental Exposure)'), ('unknown', 'Unknown Smoking Status')], help_text='Current smoking status', max_length=20)),
                ('tobacco_product_type', models.CharField(blank=True, choices=[('cigarettes', 'Cigarettes'), ('cigars', 'Cigars'), ('pipe', 'Pipe Tobacco'), ('chewing_tobacco', 'Chewing Tobacco'), ('snuff', 'Snuff'), ('e_cigarettes', 'Electronic Cigarettes/Vaping'), ('hookah', 'Hookah/Shisha'), ('other', 'Other Tobacco Product')], help_text='Type of tobacco product used', max_length=20)),
                ('pack_years', models.FloatField(blank=True, help_text='Pack-years of smoking (packs per day × years smoked)', null=True)),
                ('smoking_cessation_date', models.DateField(blank=True, help_text='Date smoking was stopped (for former smokers)', null=True)),
                ('substance_use_category', models.CharField(blank=True, choices=[('alcohol', 'Alcohol Use'), ('illicit_drugs', 'Illicit Drug Use'), ('prescription_misuse', 'Prescription Drug Misuse'), ('marijuana', 'Marijuana/Cannabis'), ('opioids', 'Opioid Use'), ('stimulants', 'Stimulant Use'), ('sedatives', 'Sedative/Hypnotic Use'), ('none', 'No Substance Use'), ('unknown', 'Unknown')], help_text='Category of substance use', max_length=20)),
                ('alcohol_use_level', models.CharField(blank=True, choices=[('never', 'Never'), ('minimal', 'Minimal (< 1 drink/week)'), ('light', 'Light (1-7 drinks/week)'), ('moderate', 'Moderate (8-14 drinks/week)'), ('heavy', 'Heavy (> 14 drinks/week)'), ('binge', 'Binge Drinking Pattern'), ('former_user', 'Former Alcohol User'), ('unknown', 'Unknown')], help_text='Level of alcohol consumption', max_length=15)),
                ('drinks_per_week', models.IntegerField(blank=True, help_text='Average number of alcoholic drinks per week', null=True)),
                ('substance_use_details', models.TextField(blank=True, help_text='Detailed substance use history and patterns')),
                ('contraceptive_method', models.CharField(blank=True, choices=[('none', 'No Contraception'), ('hormonal_oral', 'Oral Contraceptive Pills'), ('hormonal_patch', 'Contraceptive Patch'), ('hormonal_ring', 'Vaginal Ring'), ('hormonal_injection', 'Injectable Contraceptive'), ('hormonal_implant', 'Contraceptive Implant'), ('iud_hormonal', 'Hormonal IUD'), ('iud_copper', 'Copper IUD'), ('barrier_condom', 'Condoms'), ('barrier_diaphragm', 'Diaphragm'), ('sterilization', 'Surgical Sterilization'), ('natural_methods', 'Natural Family Planning'), ('emergency', 'Emergency Contraception'), ('unknown', 'Unknown Method')], help_text='Current contraceptive method', max_length=20)),
                ('pregnancy_status', models.CharField(blank=True, choices=[('not_pregnant', 'Not Pregnant (Confirmed)'), ('pregnant', 'Pregnant'), ('possibly_pregnant', 'Possibly Pregnant'), ('postpartum', 'Postpartum (< 6 months)'), ('lactating', 'Currently Lactating'), ('not_applicable', 'Not Applicable (Male/Postmenopausal)'), ('unknown', 'Unknown')], help_text='Current pregnancy status', max_length=20)),
                ('pregnancy_test_date', models.DateField(blank=True, help_text='Date of pregnancy test', null=True)),
                ('last_menstrual_period', models.DateField(blank=True, help_text='Date of last menstrual period', null=True)),
                ('menopausal_status', models.CharField(blank=True, choices=[('premenopausal', 'Premenopausal'), ('perimenopausal', 'Perimenopausal'), ('postmenopausal', 'Postmenopausal'), ('postmenopausal_natural', 'Postmenopausal (Natural)'), ('postmenopausal_surgical', 'Postmenopausal (Surgical)'), ('postmenopausal_treatment', 'Postmenopausal (Treatment-Induced)'), ('unknown', 'Unknown Menopausal Status'), ('not_applicable', 'Not Applicable (Male)')], help_text='Menopausal status', max_length=25)),
                ('menopause_age', models.IntegerField(blank=True, help_text='Age at menopause', null=True)),
                ('lactation_status', models.BooleanField(blank=True, help_text='Currently lactating/breastfeeding', null=True)),
                ('infectious_disease_type', models.CharField(blank=True, help_text='Type of infectious disease (HIV, HBV, HCV, etc.)', max_length=100)),
                ('infectious_disease_status', models.CharField(blank=True, choices=[('negative', 'Negative/Not Infected'), ('positive_active', 'Positive/Active Infection'), ('positive_treated', 'Positive/Treated'), ('positive_chronic', 'Positive/Chronic'), ('positive_resolved', 'Positive/Resolved'), ('indeterminate', 'Indeterminate'), ('not_tested', 'Not Tested'), ('immune', 'Immune (Vaccinated/Natural)'), ('unknown', 'Unknown Status')], help_text='Status of infectious disease', max_length=20)),
                ('infection_test_date', models.DateField(blank=True, help_text='Date of infectious disease test', null=True)),
                ('infection_test_result', models.CharField(blank=True, help_text='Detailed infectious disease test result', max_length=255)),
                ('vaccination_status', models.CharField(blank=True, help_text='Vaccination status for relevant diseases', max_length=100)),
                ('caregiver_status', models.CharField(blank=True, choices=[('available_family', 'Family Caregiver Available'), ('available_friend', 'Friend/Non-family Caregiver Available'), ('available_professional', 'Professional Caregiver Available'), ('limited_support', 'Limited Caregiver Support'), ('no_caregiver', 'No Caregiver Available'), ('self_care', 'Independent/Self-Care'), ('unknown', 'Unknown Caregiver Status')], help_text='Caregiver availability and type', max_length=25)),
                ('caregiver_relationship', models.CharField(blank=True, help_text='Relationship to primary caregiver', max_length=100)),
                ('social_support_score', models.IntegerField(blank=True, help_text='Quantitative social support assessment score', null=True)),
                ('lives_alone', models.BooleanField(blank=True, help_text='Patient lives alone', null=True)),
                ('transportation_access', models.BooleanField(blank=True, help_text='Has reliable transportation for medical visits', null=True)),
                ('consent_capability', models.CharField(blank=True, choices=[('capable', 'Capable of Informed Consent'), ('impaired', 'Impaired Consent Capability'), ('guardian_required', 'Guardian/Proxy Consent Required'), ('fluctuating', 'Fluctuating Cognitive Status'), ('assessed_capable', 'Formally Assessed as Capable'), ('not_assessed', 'Consent Capability Not Assessed'), ('unknown', 'Unknown Consent Capability')], help_text='Capability to provide informed consent', max_length=20)),
                ('mental_health_status', models.CharField(blank=True, choices=[('no_disorder', 'No Mental Health Disorder'), ('depression', 'Depression'), ('anxiety', 'Anxiety Disorder'), ('bipolar', 'Bipolar Disorder'), ('psychotic', 'Psychotic Disorder'), ('cognitive_impairment', 'Cognitive Impairment'), ('substance_induced', 'Substance-Induced Mental Disorder'), ('personality_disorder', 'Personality Disorder'), ('adjustment_disorder', 'Adjustment Disorder'), ('other', 'Other Mental Health Condition'), ('multiple', 'Multiple Mental Health Conditions'), ('unknown', 'Unknown Mental Health Status')], help_text='Mental health disorder status', max_length=25)),
                ('cognitive_assessment_score', models.IntegerField(blank=True, help_text='Cognitive assessment score (MMSE, MoCA, etc.)', null=True)),
                ('depression_screening_score', models.IntegerField(blank=True, help_text='Depression screening score (PHQ-9, etc.)', null=True)),
                ('anxiety_screening_score', models.IntegerField(blank=True, help_text='Anxiety screening score (GAD-7, etc.)', null=True)),
                ('geographic_risk_category', models.CharField(blank=True, choices=[('no_risk', 'No Geographic Risk Exposure'), ('endemic_disease', 'Endemic Disease Area Exposure'), ('environmental_toxin', 'Environmental Toxin Exposure'), ('radiation_exposure', 'Radiation Exposure Area'), ('infectious_outbreak', 'Infectious Disease Outbreak Area'), ('occupational_hazard', 'Occupational Hazard Exposure'), ('conflict_zone', 'Conflict Zone/War Area'), ('natural_disaster', 'Natural Disaster Area'), ('high_altitude', 'High Altitude Exposure'), ('extreme_climate', 'Extreme Climate Exposure'), ('other', 'Other Geographic Risk'), ('unknown', 'Unknown Geographic Risk Status')], help_text='Category of geographic risk exposure', max_length=25)),
                ('endemic_disease_exposure', models.TextField(blank=True, help_text='Exposure to endemic diseases in travel/residence areas')),
                ('occupational_exposure', models.TextField(blank=True, help_text='Occupational hazard or toxin exposure history')),
                ('environmental_toxin_exposure', models.TextField(blank=True, help_text='Environmental toxin exposure details')),
                ('risk_assessment_date', models.DateField(blank=True, help_text='Date of comprehensive risk assessment', null=True)),
                ('assessment_provider', models.CharField(blank=True, help_text='Provider who performed behavioral/social assessment', max_length=255)),
                ('behavioral_data_complete', models.BooleanField(default=False, help_text='Indicates if behavioral assessment is complete')),
                ('social_data_complete', models.BooleanField(default=False, help_text='Indicates if social determinants assessment is complete')),
                ('assessment_method', models.CharField(blank=True, help_text='Method used for behavioral/social assessment (interview, questionnaire, etc.)', max_length=100)),
            ],
            options={
                'db_table': 'observation',
            },
        ),
        migrations.CreateModel(
            name='OncologyEpisodeDetail',
            fields=[
                ('episode_detail_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('detail_date', models.DateField(help_text='Date of this episode detail')),
                ('days_from_diagnosis', models.IntegerField(blank=True, help_text='Days from initial cancer diagnosis', null=True)),
                ('days_from_treatment_start', models.IntegerField(blank=True, help_text='Days from current treatment start', null=True)),
                ('disease_status', models.CharField(choices=[('NEWLY_DIAGNOSED', 'Newly Diagnosed'), ('STABLE_DISEASE', 'Stable Disease'), ('RESPONDING', 'Responding to Treatment'), ('PROGRESSIVE', 'Progressive Disease'), ('RECURRENT', 'Recurrent Disease'), ('REMISSION', 'In Remission'), ('REFRACTORY', 'Refractory Disease')], help_text='Current disease status', max_length=30)),
                ('progression_type', models.CharField(blank=True, choices=[('LOCAL', 'Local Progression'), ('REGIONAL', 'Regional Progression'), ('DISTANT', 'Distant Metastases'), ('NEW_PRIMARY', 'New Primary'), ('BIOCHEMICAL', 'Biochemical Progression')], help_text='Type of disease progression', max_length=30)),
                ('new_metastatic_sites', models.JSONField(blank=True, default=list, help_text='New metastatic sites as JSON list')),
                ('total_metastatic_sites', models.IntegerField(blank=True, help_text='Total number of metastatic sites', null=True)),
                ('ecog_performance_status', models.IntegerField(blank=True, choices=[(0, 'ECOG 0'), (1, 'ECOG 1'), (2, 'ECOG 2'), (3, 'ECOG 3'), (4, 'ECOG 4')], help_text='ECOG Performance Status (0-4)', null=True)),
                ('karnofsky_score', models.IntegerField(blank=True, help_text='Karnofsky Performance Score', null=True)),
                ('overall_survival_days', models.IntegerField(blank=True, help_text='Overall survival in days', null=True)),
                ('progression_free_survival_days', models.IntegerField(blank=True, help_text='Progression-free survival in days', null=True)),
                ('time_to_progression_days', models.IntegerField(blank=True, help_text='Time to progression in days', null=True)),
                ('treatment_line_at_assessment', models.IntegerField(blank=True, help_text='Treatment line at time of assessment', null=True)),
                ('on_treatment', models.BooleanField(blank=True, help_text='Whether patient is currently on treatment', null=True)),
            ],
            options={
                'db_table': 'oncology_episode_detail',
            },
        ),
        migrations.CreateModel(
            name='OncologyModifier',
            fields=[
                ('oncology_modifier_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('modifier_datetime', models.DateTimeField(blank=True, null=True)),
                ('cancer_modifier_type', models.CharField(choices=[('STAGING', 'Cancer Staging'), ('BIOMARKER', 'Biomarker Result'), ('GENETICS', 'Genetic Finding'), ('MORPHOLOGY', 'Tumor Morphology'), ('TOPOGRAPHY', 'Tumor Location'), ('RESPONSE', 'Treatment Response'), ('PROGRESSION', 'Disease Progression')], help_text='Type of oncology modifier', max_length=50)),
                ('staging_basis', models.CharField(blank=True, choices=[('CLINICAL', 'Clinical'), ('PATHOLOGIC', 'Pathologic'), ('POST_THERAPY', 'Post-therapy'), ('AUTOPSY', 'Autopsy')], help_text='Basis for staging assessment', max_length=20)),
                ('biomarker_test_method', models.CharField(blank=True, help_text='Method used for biomarker testing', max_length=100)),
                ('biomarker_result_interpretation', models.CharField(blank=True, help_text='Clinical interpretation of biomarker result', max_length=50)),
                ('response_criteria', models.CharField(blank=True, help_text='Response criteria used (RECIST, WHO, etc.)', max_length=50)),
                ('response_assessment_method', models.CharField(blank=True, help_text='Method used for response assessment', max_length=100)),
            ],
            options={
                'db_table': 'oncology_modifier',
            },
        ),
        migrations.CreateModel(
            name='OncologyVocabulary',
            fields=[
                ('oncology_vocabulary_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('vocabulary_id', models.CharField(help_text='Vocabulary identifier', max_length=50)),
                ('concept_code', models.CharField(help_text='Concept code in vocabulary', max_length=50)),
                ('concept_name', models.CharField(help_text='Concept name', max_length=255)),
                ('oncology_domain', models.CharField(choices=[('TOPOGRAPHY', 'Tumor Topography'), ('MORPHOLOGY', 'Tumor Morphology'), ('STAGING', 'Cancer Staging'), ('BIOMARKER', 'Biomarker'), ('TREATMENT', 'Cancer Treatment'), ('RESPONSE', 'Treatment Response'), ('GENETICS', 'Genetic Marker')], help_text='Oncology domain classification', max_length=50)),
                ('icdo_site_code', models.CharField(blank=True, help_text='ICD-O topography code', max_length=10)),
                ('icdo_morphology_code', models.CharField(blank=True, help_text='ICD-O morphology code', max_length=10)),
                ('icdo_behavior_code', models.CharField(blank=True, help_text='ICD-O behavior code', max_length=1)),
                ('ajcc_chapter', models.CharField(blank=True, help_text='AJCC chapter/cancer site', max_length=50)),
                ('uicc_edition', models.CharField(blank=True, help_text='UICC TNM edition', max_length=20)),
                ('valid_start_date', models.DateField(help_text='Start date for concept validity')),
                ('valid_end_date', models.DateField(default='2099-12-31', help_text='End date for concept validity')),
                ('invalid_reason', models.CharField(blank=True, help_text='Reason for invalidity', max_length=1)),
            ],
            options={
                'db_table': 'oncology_vocabulary',
            },
        ),
        migrations.CreateModel(
            name='PatientInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('languages', models.TextField(blank=True, help_text="Language codes like 'en', 'de', 'es'", null=True)),
                ('language_skill_level', models.TextField(blank=True, help_text="'speak' or 'write'", null=True)),
                ('patient_age', models.IntegerField(blank=True, help_text="What is the patient's age?", null=True)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('UN', 'Unknown'), ('', 'Empty')], help_text="Patient's gender", max_length=2, null=True)),
                ('weight', models.FloatField(blank=True, help_text="Patient's weight", null=True)),
                ('weight_units', models.CharField(blank=True, choices=[('kg', 'Kilograms'), ('lb', 'Pounds')], default='kg', help_text="Units for the patient's weight", max_length=2, null=True)),
                ('height', models.FloatField(blank=True, help_text="Patient's height", null=True)),
                ('height_units', models.CharField(blank=True, choices=[('cm', 'Centimeters'), ('in', 'Inches')], default='cm', help_text="Units for the patient's height", max_length=2, null=True)),
                ('bmi', models.FloatField(blank=True, editable=False, help_text="Patient's BMI (computed)", null=True)),
                ('ethnicity', models.TextField(blank=True, null=True)),
                ('systolic_blood_pressure', models.IntegerField(blank=True, help_text="Patient's systolic blood pressure", null=True)),
                ('diastolic_blood_pressure', models.IntegerField(blank=True, help_text="Patient's diastolic blood pressure", null=True)),
                ('country', models.CharField(blank=True, max_length=255, null=True)),
                ('region', models.CharField(blank=True, max_length=255, null=True)),
                ('postal_code', models.CharField(blank=True, max_length=20, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('disease', models.TextField(blank=True, default='multiple myeloma', null=True)),
                ('stage', models.TextField(blank=True, null=True)),
                ('karnofsky_performance_score', models.IntegerField(blank=True, default=100, null=True)),
                ('ecog_performance_status', models.IntegerField(blank=True, null=True)),
                ('no_other_active_malignancies', models.BooleanField(default=True)),
                ('no_pre_existing_conditions', models.BooleanField(blank=True, null=True)),
                ('peripheral_neuropathy_grade', models.IntegerField(blank=True, null=True)),
                ('cytogenic_markers', models.TextField(blank=True, null=True)),
                ('molecular_markers', models.TextField(blank=True, null=True)),
                ('stem_cell_transplant_history', models.JSONField(blank=True, default=list, null=True)),
                ('plasma_cell_leukemia', models.BooleanField(blank=True, default=True, null=True)),
                ('progression', models.TextField(blank=True, null=True)),
                ('gelf_criteria_status', models.TextField(blank=True, null=True)),
                ('flipi_score', models.IntegerField(blank=True, null=True)),
                ('flipi_score_options', models.TextField(blank=True, null=True)),
                ('tumor_grade', models.IntegerField(blank=True, null=True)),
                ('heartrate', models.IntegerField(blank=True, help_text="Patient's heart rate", null=True)),
                ('heartrate_variability', models.IntegerField(blank=True, help_text="Patient's heart rate variability", null=True)),
                ('condition_code_icd_10', models.TextField(blank=True, null=True)),
                ('condition_code_snomed_ct', models.TextField(blank=True, null=True)),
                ('prior_therapy', models.TextField(blank=True, null=True)),
                ('first_line_therapy', models.TextField(blank=True, null=True)),
                ('first_line_date', models.DateField(blank=True, null=True)),
                ('first_line_outcome', models.TextField(blank=True, null=True)),
                ('second_line_therapy', models.TextField(blank=True, null=True)),
                ('second_line_date', models.DateField(blank=True, null=True)),
                ('second_line_outcome', models.TextField(blank=True, null=True)),
                ('later_therapy', models.TextField(blank=True, null=True)),
                ('later_date', models.DateField(blank=True, null=True)),
                ('later_outcome', models.TextField(blank=True, null=True)),
                ('supportive_therapies', models.TextField(blank=True, null=True)),
                ('supportive_therapy_date', models.DateField(blank=True, null=True)),
                ('relapse_count', models.IntegerField(blank=True, null=True)),
                ('treatment_refractory_status', models.CharField(blank=True, max_length=255, null=True)),
                ('therapy_lines_count', models.IntegerField(blank=True, null=True)),
                ('line_of_therapy', models.TextField(blank=True, null=True)),
                ('absolute_neutrophile_count', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('absolute_neutrophile_count_units', models.CharField(blank=True, choices=[('CELLS/UL', 'cells/microliter'), ('CELLS/L', 'cells/Liter')], default='CELLS/UL', max_length=10, null=True)),
                ('platelet_count', models.IntegerField(blank=True, null=True)),
                ('platelet_count_units', models.CharField(blank=True, choices=[('CELLS/UL', 'cells/microliter'), ('CELLS/L', 'cells/Liter')], default='CELLS/UL', max_length=10, null=True)),
                ('white_blood_cell_count', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('white_blood_cell_count_units', models.CharField(blank=True, choices=[('CELLS/UL', 'cells/microliter'), ('CELLS/L', 'cells/Liter')], default='CELLS/L', max_length=10, null=True)),
                ('red_blood_cell_count', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('red_blood_cell_count_units', models.CharField(blank=True, choices=[('CELLS/UL', 'cells/microliter'), ('CELLS/L', 'cells/Liter')], default='CELLS/L', max_length=10, null=True)),
                ('serum_calcium_level', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('serum_calcium_level_units', models.CharField(blank=True, choices=[('MG/DL', 'mg/dL'), ('MICROMOLES/L', 'micromoles/L')], default='MG/DL', max_length=15, null=True)),
                ('creatinine_clearance_rate', models.IntegerField(blank=True, null=True)),
                ('serum_creatinine_level', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('serum_creatinine_level_units', models.CharField(blank=True, choices=[('MG/DL', 'mg/dL'), ('MICROMOLES/L', 'micromoles/L')], default='MG/DL', max_length=15, null=True)),
                ('hemoglobin_level', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('hemoglobin_level_units', models.CharField(blank=True, choices=[('G/DL', 'g/deciliter'), ('G/L', 'g/Liter')], default='G/DL', max_length=5, null=True)),
                ('bone_lesions', models.TextField(blank=True, null=True)),
                ('meets_crab', models.BooleanField(blank=True, null=True)),
                ('estimated_glomerular_filtration_rate', models.IntegerField(blank=True, null=True)),
                ('renal_adequacy_status', models.BooleanField(blank=True, null=True)),
                ('liver_enzyme_levels_ast', models.IntegerField(blank=True, null=True)),
                ('liver_enzyme_levels_alt', models.IntegerField(blank=True, null=True)),
                ('liver_enzyme_levels_alp', models.IntegerField(blank=True, null=True)),
                ('serum_bilirubin_level_total', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('serum_bilirubin_level_total_units', models.CharField(blank=True, choices=[('MG/DL', 'mg/dL'), ('MICROMOLES/L', 'micromoles/L')], default='MG/DL', max_length=15, null=True)),
                ('serum_bilirubin_level_direct', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('serum_bilirubin_level_direct_units', models.CharField(blank=True, choices=[('MG/DL', 'mg/dL'), ('MICROMOLES/L', 'micromoles/L')], default='MG/DL', max_length=15, null=True)),
                ('albumin_level', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('albumin_level_units', models.CharField(blank=True, choices=[('G/DL', 'g/deciliter'), ('G/L', 'g/Liter')], default='G/DL', max_length=15, null=True)),
                ('kappa_flc', models.IntegerField(blank=True, null=True)),
                ('lambda_flc', models.IntegerField(blank=True, null=True)),
                ('meets_slim', models.BooleanField(blank=True, null=True)),
                ('liver_enzyme_levels', models.IntegerField(blank=True, null=True)),
                ('serum_bilirubin_level', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('monoclonal_protein_serum', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('monoclonal_protein_urine', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('lactate_dehydrogenase_level', models.IntegerField(blank=True, null=True)),
                ('pulmonary_function_test_result', models.BooleanField(default=False)),
                ('bone_imaging_result', models.BooleanField(default=False)),
                ('clonal_plasma_cells', models.IntegerField(blank=True, null=True)),
                ('ejection_fraction', models.IntegerField(blank=True, null=True)),
                ('consent_capability', models.BooleanField(default=True, help_text='Does the patient have cognitive ability to consent?')),
                ('caregiver_availability_status', models.BooleanField(default=False, help_text='Is there an available caregiver for the patient?')),
                ('contraceptive_use', models.BooleanField(default=False, help_text='Does the patient use contraceptives?')),
                ('no_pregnancy_or_lactation_status', models.BooleanField(default=True, help_text='Does the patient self assess as not pregnant or lactating?')),
                ('pregnancy_test_result', models.BooleanField(default=False, help_text='Does the female patient of childbearing age have a negative test result for pregnancy?')),
                ('no_mental_health_disorder_status', models.BooleanField(default=True, help_text='Does the patient have a mental health disorder?')),
                ('no_concomitant_medication_status', models.BooleanField(default=True, help_text='Does the patient have concomitant medication?')),
                ('concomitant_medication_details', models.CharField(blank=True, help_text="Details about the patient's concomitant medications", max_length=255, null=True)),
                ('no_tobacco_use_status', models.BooleanField(default=True, help_text='Does the patient use tobacco?')),
                ('tobacco_use_details', models.CharField(blank=True, help_text="Details about the patient's tobacco use", max_length=255, null=True)),
                ('no_substance_use_status', models.BooleanField(default=True, help_text='Does the patient use substances?')),
                ('substance_use_details', models.CharField(blank=True, help_text="Details about the patient's substance use", max_length=255, null=True)),
                ('no_geographic_exposure_risk', models.BooleanField(default=True, help_text='Has the patient had geographic exposure to risk?')),
                ('geographic_exposure_risk_details', models.CharField(blank=True, help_text="Details about the patient's geographic exposure risk", max_length=255, null=True)),
                ('no_hiv_status', models.BooleanField(default=True, help_text='Does the patient has had HIV?')),
                ('no_hepatitis_b_status', models.BooleanField(default=True, help_text='Does the patient has had Hepatitis B (HBV)?')),
                ('no_hepatitis_c_status', models.BooleanField(default=True, help_text='Does the patient has had Hepatitis C (HCV)?')),
                ('no_active_infection_status', models.BooleanField(default=True, help_text='Does the patient has any active infection?')),
                ('concomitant_medications', models.TextField(blank=True, null=True)),
                ('concomitant_medication_date', models.DateField(blank=True, null=True)),
                ('remission_duration_min', models.TextField(blank=True, null=True)),
                ('washout_period_duration', models.TextField(blank=True, null=True)),
                ('hiv_status', models.BooleanField(blank=True, null=True)),
                ('hepatitis_b_status', models.BooleanField(blank=True, null=True)),
                ('hepatitis_c_status', models.BooleanField(blank=True, null=True)),
                ('last_treatment', models.DateField(blank=True, help_text='Date and time of the last treatment', null=True)),
                ('bone_only_metastasis_status', models.BooleanField(blank=True, null=True)),
                ('menopausal_status', models.TextField(blank=True, null=True)),
                ('metastatic_status', models.BooleanField(blank=True, null=True)),
                ('toxicity_grade', models.IntegerField(blank=True, null=True)),
                ('planned_therapies', models.TextField(blank=True, null=True)),
                ('histologic_type', models.TextField(blank=True, null=True)),
                ('biopsy_grade_depr', models.TextField(blank=True, null=True)),
                ('biopsy_grade', models.IntegerField(blank=True, null=True)),
                ('measurable_disease_by_recist_status', models.BooleanField(blank=True, null=True)),
                ('estrogen_receptor_status', models.TextField(blank=True, null=True)),
                ('progesterone_receptor_status', models.TextField(blank=True, null=True)),
                ('her2_status', models.TextField(blank=True, null=True)),
                ('tnbc_status', models.BooleanField(blank=True, null=True)),
                ('hrd_status', models.TextField(blank=True, null=True)),
                ('hr_status', models.TextField(blank=True, null=True)),
                ('tumor_stage', models.TextField(blank=True, null=True)),
                ('nodes_stage', models.TextField(blank=True, null=True)),
                ('distant_metastasis_stage', models.TextField(blank=True, null=True)),
                ('staging_modalities', models.TextField(blank=True, null=True)),
                ('genetic_mutations', models.JSONField(blank=True, default=list)),
                ('pd_l1_tumor_cels', models.IntegerField(blank=True, null=True)),
                ('pd_l1_assay', models.TextField(blank=True, null=True)),
                ('pd_l1_ic_percentage', models.IntegerField(blank=True, null=True)),
                ('pd_l1_combined_positive_score', models.IntegerField(blank=True, null=True)),
                ('ki67_proliferation_index', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'patient_info',
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('person_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('gender_concept_id', models.IntegerField(help_text='Standard concept for biological sex at birth')),
                ('year_of_birth', models.IntegerField(blank=True, help_text='Year of birth - required field', null=True)),
                ('month_of_birth', models.IntegerField(blank=True, help_text='Month of birth if available', null=True)),
                ('day_of_birth', models.IntegerField(blank=True, help_text='Day of birth if available', null=True)),
                ('birth_datetime', models.DateTimeField(blank=True, help_text='Precise birth datetime - highly encouraged', null=True)),
                ('death_datetime', models.DateTimeField(blank=True, help_text='Date and time of death', null=True)),
                ('race_concept_id', models.IntegerField(blank=True, help_text='Standard concept for race', null=True)),
                ('ethnicity_concept_id', models.IntegerField(blank=True, help_text='Standard concept for ethnicity (Hispanic/Not Hispanic)', null=True)),
                ('provider_id', models.BigIntegerField(blank=True, help_text='Primary care provider ID', null=True)),
                ('care_site_id', models.BigIntegerField(blank=True, help_text='Primary care site ID', null=True)),
                ('person_source_value', models.CharField(blank=True, help_text='Source identifier for person', max_length=50)),
                ('gender_source_value', models.CharField(blank=True, help_text='Source value for gender', max_length=50)),
                ('gender_source_concept_id', models.IntegerField(default=0, help_text='Source concept ID for gender')),
                ('race_source_value', models.CharField(blank=True, help_text='Source value for race', max_length=50)),
                ('race_source_concept_id', models.IntegerField(default=0, help_text='Source concept ID for race')),
                ('ethnicity_source_value', models.CharField(blank=True, help_text='Source value for ethnicity', max_length=50)),
                ('ethnicity_source_concept_id', models.IntegerField(default=0, help_text='Source concept ID for ethnicity')),
                ('primary_language_concept_id', models.IntegerField(blank=True, help_text='Primary language concept', null=True)),
                ('secondary_languages', models.TextField(blank=True, help_text='Additional languages (JSON array)')),
                ('language_skill_level', models.CharField(blank=True, help_text='Language proficiency level', max_length=20)),
            ],
            options={
                'db_table': 'person',
            },
        ),
        migrations.CreateModel(
            name='ProcedureOccurrence',
            fields=[
                ('procedure_occurrence_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('procedure_datetime', models.DateTimeField(blank=True, help_text='Procedure datetime (set to midnight if only date known)', null=True)),
                ('quantity', models.IntegerField(blank=True, help_text='Quantity of procedures', null=True)),
                ('provider_id', models.IntegerField(blank=True, help_text='Provider who performed procedure', null=True)),
                ('visit_occurrence_id', models.IntegerField(blank=True, help_text='Visit when procedure occurred', null=True)),
                ('visit_detail_id', models.IntegerField(blank=True, help_text='Visit detail for procedure', null=True)),
                ('procedure_source_value', models.CharField(blank=True, help_text='Source procedure value', max_length=50)),
                ('modifier_source_value', models.CharField(blank=True, help_text='Source modifier value', max_length=50)),
                ('procedure_outcome', models.CharField(blank=True, help_text='Outcome of procedure', max_length=100)),
                ('procedure_location', models.CharField(blank=True, help_text='Anatomical location', max_length=100)),
                ('procedure_laterality', models.CharField(blank=True, help_text='Left/Right/Bilateral', max_length=20)),
                ('transplant_type', models.CharField(blank=True, help_text='Type of transplant', max_length=50)),
                ('donor_type', models.CharField(blank=True, help_text='Donor type (autologous, allogeneic)', max_length=50)),
                ('stem_cell_source', models.CharField(blank=True, help_text='Source of stem cells', max_length=50)),
                ('conditioning_regimen', models.CharField(blank=True, help_text='Conditioning regimen used', max_length=100)),
                ('imaging_modality', models.CharField(blank=True, help_text='Imaging modality (CT, MRI, PET)', max_length=50)),
                ('contrast_used', models.BooleanField(blank=True, help_text='Whether contrast was used', null=True)),
                ('imaging_results', models.TextField(blank=True, help_text='Imaging results summary')),
                ('specimen_type', models.CharField(blank=True, help_text='Type of specimen obtained', max_length=50)),
                ('specimen_adequacy', models.CharField(blank=True, help_text='Specimen adequacy assessment', max_length=50)),
                ('pathology_results', models.TextField(blank=True, help_text='Pathology results')),
                ('procedure_success', models.BooleanField(blank=True, help_text='Whether procedure was successful', null=True)),
                ('complications', models.TextField(blank=True, help_text='Complications during procedure')),
                ('anesthesia_type', models.CharField(blank=True, help_text='Type of anesthesia used', max_length=50)),
                ('surgical_approach', models.CharField(blank=True, choices=[('OPEN', 'Open Surgery'), ('LAPAROSCOPIC', 'Laparoscopic'), ('ROBOTIC', 'Robotic-assisted'), ('THORACOSCOPIC', 'Thoracoscopic'), ('ENDOSCOPIC', 'Endoscopic')], help_text='Surgical approach used', max_length=30)),
                ('resection_type', models.CharField(blank=True, choices=[('COMPLETE', 'Complete Resection'), ('PARTIAL', 'Partial Resection'), ('BIOPSY_ONLY', 'Biopsy Only'), ('DEBULKING', 'Tumor Debulking'), ('PALLIATIVE', 'Palliative Resection')], help_text='Type of tumor resection', max_length=50)),
                ('margin_status', models.CharField(blank=True, choices=[('NEGATIVE', 'Negative Margins (R0)'), ('MICROSCOPIC', 'Microscopic Positive (R1)'), ('MACROSCOPIC', 'Macroscopic Positive (R2)'), ('UNKNOWN', 'Unknown')], help_text='Surgical margin status', max_length=20)),
                ('lymph_nodes_examined', models.IntegerField(blank=True, help_text='Number of lymph nodes examined', null=True)),
                ('lymph_nodes_positive', models.IntegerField(blank=True, help_text='Number of positive lymph nodes', null=True)),
                ('sentinel_node_examined', models.BooleanField(blank=True, help_text='Whether sentinel nodes were examined', null=True)),
                ('sentinel_node_positive', models.BooleanField(blank=True, help_text='Whether sentinel nodes were positive', null=True)),
                ('surgical_intent', models.CharField(blank=True, choices=[('CURATIVE', 'Curative Intent'), ('PALLIATIVE', 'Palliative Intent'), ('DIAGNOSTIC', 'Diagnostic'), ('STAGING', 'Staging'), ('PROPHYLACTIC', 'Prophylactic')], help_text='Intent of surgical procedure', max_length=30)),
                ('tumor_size_pathologic', models.FloatField(blank=True, help_text='Pathologic tumor size (cm)', null=True)),
                ('multifocal_tumor', models.BooleanField(blank=True, help_text='Whether tumor was multifocal', null=True)),
                ('tumor_grade_pathologic', models.CharField(blank=True, choices=[('GX', 'GX - Grade cannot be assessed'), ('G1', 'G1 - Well differentiated'), ('G2', 'G2 - Moderately differentiated'), ('G3', 'G3 - Poorly differentiated'), ('G4', 'G4 - Undifferentiated')], help_text='Pathologic tumor grade', max_length=10)),
                ('operative_time_minutes', models.IntegerField(blank=True, help_text='Duration of surgery in minutes', null=True)),
                ('blood_loss_ml', models.IntegerField(blank=True, help_text='Estimated blood loss in mL', null=True)),
                ('conversion_to_open', models.BooleanField(blank=True, help_text='Whether minimally invasive approach was converted to open', null=True)),
                ('reconstruction_performed', models.BooleanField(blank=True, help_text='Whether reconstruction was performed', null=True)),
                ('reconstruction_type', models.CharField(blank=True, help_text='Type of reconstruction', max_length=100)),
                ('implant_used', models.BooleanField(blank=True, help_text='Whether implant was used', null=True)),
                ('length_of_stay_days', models.IntegerField(blank=True, help_text='Length of hospital stay in days', null=True)),
                ('icu_stay_required', models.BooleanField(blank=True, help_text='Whether ICU stay was required', null=True)),
                ('readmission_30day', models.BooleanField(blank=True, help_text='Whether readmission occurred within 30 days', null=True)),
                ('pathology_report_id', models.CharField(blank=True, help_text='Associated pathology report ID', max_length=50)),
                ('frozen_section_performed', models.BooleanField(blank=True, help_text='Whether frozen section was performed', null=True)),
                ('intraoperative_consultation', models.BooleanField(blank=True, help_text='Whether intraoperative pathology consultation occurred', null=True)),
            ],
            options={
                'db_table': 'procedure_occurrence',
            },
        ),
        migrations.CreateModel(
            name='RadiationOccurrence',
            fields=[
                ('radiation_occurrence_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('radiation_occurrence_start_date', models.DateField()),
                ('radiation_occurrence_end_date', models.DateField(blank=True, null=True)),
                ('radiation_technique', models.CharField(choices=[('EXTERNAL_BEAM', 'External Beam Radiation'), ('BRACHYTHERAPY', 'Brachytherapy'), ('RADIOACTIVE_IMPLANT', 'Radioactive Implant'), ('STEREOTACTIC', 'Stereotactic Radiosurgery'), ('PROTON_THERAPY', 'Proton Therapy'), ('ELECTRON_THERAPY', 'Electron Therapy')], help_text='Radiation delivery technique', max_length=50)),
                ('total_dose', models.FloatField(blank=True, help_text='Total radiation dose', null=True)),
                ('fractions_delivered', models.IntegerField(blank=True, help_text='Number of fractions delivered', null=True)),
                ('fractions_planned', models.IntegerField(blank=True, help_text='Number of fractions planned', null=True)),
                ('dose_per_fraction', models.FloatField(blank=True, help_text='Dose per fraction', null=True)),
                ('treatment_intent', models.CharField(blank=True, choices=[('CURATIVE', 'Curative'), ('PALLIATIVE', 'Palliative'), ('ADJUVANT', 'Adjuvant'), ('NEOADJUVANT', 'Neoadjuvant'), ('PROPHYLACTIC', 'Prophylactic')], help_text='Intent of radiation treatment', max_length=30)),
                ('treatment_completed', models.BooleanField(blank=True, help_text='Whether treatment was completed as planned', null=True)),
                ('stop_reason', models.CharField(blank=True, help_text='Reason treatment was stopped if incomplete', max_length=100)),
                ('provider_id', models.IntegerField(blank=True, help_text='Radiation oncologist', null=True)),
                ('visit_occurrence_id', models.IntegerField(blank=True, help_text='Visit when treatment occurred', null=True)),
                ('radiation_source_value', models.CharField(blank=True, help_text='Source value', max_length=50)),
            ],
            options={
                'db_table': 'radiation_occurrence',
            },
        ),
        migrations.CreateModel(
            name='SocialDeterminantsVocabulary',
            fields=[
                ('vocabulary_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('determinant_category', models.CharField(help_text='Category of social determinant', max_length=50)),
                ('determinant_name', models.CharField(help_text='Standardized determinant name', max_length=200)),
                ('determinant_aliases', models.TextField(blank=True, help_text='Alternative names/terms')),
                ('loinc_code', models.CharField(blank=True, help_text='LOINC code for determinant', max_length=20)),
                ('snomed_code', models.CharField(blank=True, help_text='SNOMED code for determinant', max_length=20)),
                ('z_code', models.CharField(blank=True, help_text='ICD-10 Z-code for social factor', max_length=10)),
                ('affects_compliance', models.BooleanField(default=False, help_text='Affects treatment compliance')),
                ('affects_outcomes', models.BooleanField(default=False, help_text='Affects clinical outcomes')),
                ('assessment_method', models.TextField(blank=True, help_text='How to assess this determinant')),
                ('screening_questions', models.JSONField(blank=True, help_text='Standard screening questions', null=True)),
                ('intervention_options', models.TextField(blank=True, help_text='Possible interventions')),
                ('health_impact_level', models.CharField(blank=True, choices=[('HIGH', 'High Impact'), ('MODERATE', 'Moderate Impact'), ('LOW', 'Low Impact'), ('UNKNOWN', 'Unknown Impact')], help_text='Level of health impact', max_length=10)),
                ('evidence_base', models.TextField(blank=True, help_text='Evidence for health impact')),
                ('clinical_recommendations', models.TextField(blank=True, help_text='Clinical practice recommendations')),
                ('geographic_specificity', models.CharField(blank=True, help_text='Geographic areas where relevant', max_length=100)),
                ('demographic_specificity', models.CharField(blank=True, help_text='Specific demographic groups', max_length=100)),
                ('created_date', models.DateField(auto_now_add=True)),
                ('last_updated', models.DateField(auto_now=True)),
                ('curator', models.CharField(blank=True, help_text='Curator/reviewer', max_length=200)),
            ],
            options={
                'db_table': 'social_determinants_vocabulary',
            },
        ),
        migrations.CreateModel(
            name='Specimen',
            fields=[
                ('specimen_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('specimen_concept_id', models.IntegerField(help_text='OMOP concept for specimen type')),
                ('specimen_type_concept_id', models.IntegerField(help_text='Type/source of specimen record')),
                ('specimen_date', models.DateField(help_text='Date specimen was collected')),
                ('specimen_datetime', models.DateTimeField(blank=True, help_text='Datetime specimen was collected', null=True)),
                ('anatomic_site_concept_id', models.IntegerField(blank=True, help_text='Anatomic site concept', null=True)),
                ('disease_status_concept_id', models.IntegerField(blank=True, help_text='Disease status at collection', null=True)),
                ('quantity', models.FloatField(blank=True, help_text='Quantity collected', null=True)),
                ('unit_concept_id', models.IntegerField(blank=True, help_text='Unit of quantity', null=True)),
                ('specimen_source_id', models.CharField(blank=True, help_text='Source specimen identifier', max_length=50)),
                ('specimen_source_value', models.CharField(blank=True, help_text='Source specimen value', max_length=50)),
                ('unit_source_value', models.CharField(blank=True, help_text='Source unit value', max_length=50)),
                ('anatomic_site_source_value', models.CharField(blank=True, help_text='Source anatomic site', max_length=50)),
                ('disease_status_source_value', models.CharField(blank=True, help_text='Source disease status', max_length=50)),
            ],
            options={
                'db_table': 'specimen',
            },
        ),
        migrations.CreateModel(
            name='StagingMeasurementConcept',
            fields=[
                ('staging_concept_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('staging_system', models.CharField(help_text='Staging system (AJCC, UICC, etc.)', max_length=50)),
                ('staging_system_version', models.CharField(help_text='Version of staging system', max_length=20)),
                ('staging_component', models.CharField(choices=[('T', 'Primary Tumor (T)'), ('N', 'Regional Nodes (N)'), ('M', 'Distant Metastasis (M)'), ('OVERALL', 'Overall Stage'), ('GRADE', 'Histologic Grade')], help_text='Component of staging', max_length=20)),
                ('assessment_method', models.CharField(choices=[('CLINICAL', 'Clinical Assessment'), ('PATHOLOGIC', 'Pathologic Assessment'), ('IMAGING', 'Imaging Assessment'), ('AUTOPSY', 'Autopsy Assessment')], help_text='Method of staging assessment', max_length=30)),
            ],
            options={
                'db_table': 'staging_measurement_concept',
            },
        ),
        migrations.CreateModel(
            name='StemCellTransplant',
            fields=[
                ('stem_cell_transplant_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('transplant_date', models.DateField()),
                ('transplant_type', models.CharField(choices=[('AUTOLOGOUS', 'Autologous'), ('ALLOGENEIC', 'Allogeneic'), ('SYNGENEIC', 'Syngeneic')], help_text='Source of stem cells', max_length=20)),
                ('stem_cell_source', models.CharField(blank=True, choices=[('BONE_MARROW', 'Bone Marrow'), ('PERIPHERAL_BLOOD', 'Peripheral Blood'), ('CORD_BLOOD', 'Umbilical Cord Blood')], help_text='Source of stem cells', max_length=30)),
                ('donor_type', models.CharField(blank=True, choices=[('RELATED', 'Related Donor'), ('UNRELATED', 'Unrelated Donor'), ('HAPLOIDENTICAL', 'Haploidentical')], help_text='Type of donor relationship', max_length=30)),
                ('hla_match_grade', models.CharField(blank=True, choices=[('FULL_MATCH', 'Full Match (8/8)'), ('PARTIAL_MATCH', 'Partial Match'), ('MISMATCH', 'Mismatch')], help_text='HLA matching grade', max_length=20)),
                ('conditioning_regimen', models.CharField(blank=True, choices=[('MYELOABLATIVE', 'Myeloablative'), ('REDUCED_INTENSITY', 'Reduced Intensity'), ('NON_MYELOABLATIVE', 'Non-myeloablative')], help_text='Conditioning regimen intensity', max_length=30)),
                ('cd34_cell_dose', models.FloatField(blank=True, help_text='CD34+ cell dose (x10^6/kg)', null=True)),
                ('total_nucleated_cell_dose', models.FloatField(blank=True, help_text='TNC dose (x10^8/kg)', null=True)),
                ('engraftment_date', models.DateField(blank=True, help_text='Date of neutrophil engraftment', null=True)),
                ('platelet_engraftment_date', models.DateField(blank=True, help_text='Date of platelet engraftment', null=True)),
                ('graft_failure', models.BooleanField(blank=True, help_text='Whether graft failure occurred', null=True)),
                ('acute_gvhd_grade', models.CharField(blank=True, choices=[('NONE', 'No GVHD'), ('GRADE_I', 'Grade I'), ('GRADE_II', 'Grade II'), ('GRADE_III', 'Grade III'), ('GRADE_IV', 'Grade IV')], help_text='Acute GVHD grade', max_length=10)),
                ('chronic_gvhd_severity', models.CharField(blank=True, choices=[('NONE', 'No chronic GVHD'), ('MILD', 'Mild'), ('MODERATE', 'Moderate'), ('SEVERE', 'Severe')], help_text='Chronic GVHD severity', max_length=20)),
                ('provider_id', models.IntegerField(blank=True, help_text='Transplant physician', null=True)),
                ('visit_occurrence_id', models.IntegerField(blank=True, help_text='Transplant visit', null=True)),
                ('transplant_source_value', models.CharField(blank=True, help_text='Source value', max_length=50)),
            ],
            options={
                'db_table': 'stem_cell_transplant',
            },
        ),
        migrations.CreateModel(
            name='TreatmentLine',
            fields=[
                ('treatment_line_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('line_number', models.IntegerField(blank=True, help_text='Treatment line number (1, 2, 3, etc.)', null=True)),
                ('line_sequence', models.CharField(choices=[('1', 'First Line'), ('2', 'Second Line'), ('3', 'Third Line'), ('4', 'Fourth Line'), ('5+', 'Later Line (5+)')], help_text='Standardized line designation', max_length=10)),
                ('line_start_date', models.DateField(help_text='Start date of treatment line')),
                ('line_end_date', models.DateField(blank=True, help_text='End date of treatment line', null=True)),
                ('treatment_intent', models.CharField(choices=[('CURATIVE', 'Curative'), ('PALLIATIVE', 'Palliative'), ('ADJUVANT', 'Adjuvant'), ('NEOADJUVANT', 'Neoadjuvant'), ('MAINTENANCE', 'Maintenance'), ('SUPPORTIVE', 'Supportive Care')], help_text='Intent of treatment line', max_length=50)),
                ('treatment_status', models.CharField(blank=True, choices=[('NAIVE', 'Treatment Naive'), ('PREV_TX', 'Previously Treated'), ('REFRACTORY', 'Refractory'), ('RELAPSED', 'Relapsed'), ('REL_REF', 'Relapsed/Refractory')], help_text='Treatment status at line start', max_length=20)),
                ('regimen_name', models.CharField(blank=True, help_text='Standard regimen name', max_length=200)),
                ('regimen_type', models.CharField(blank=True, choices=[('SINGLE', 'Single Agent'), ('COMBO', 'Combination Therapy'), ('SEQ', 'Sequential Therapy'), ('CONC', 'Concurrent Therapy'), ('ALT', 'Alternating Therapy')], help_text='Type of regimen', max_length=20)),
                ('drug_classifications', models.JSONField(default=list, help_text='List of drug classifications in this line')),
                ('platinum_based', models.BooleanField(default=False, help_text='Contains platinum-based therapy')),
                ('immunotherapy_based', models.BooleanField(default=False, help_text='Contains immunotherapy')),
                ('targeted_therapy_based', models.BooleanField(default=False, help_text='Contains targeted therapy')),
                ('hormone_therapy_based', models.BooleanField(default=False, help_text='Contains hormone therapy')),
                ('treatment_response', models.CharField(blank=True, choices=[('CR', 'Complete Response'), ('PR', 'Partial Response'), ('SD', 'Stable Disease'), ('PD', 'Progressive Disease'), ('NE', 'Not Evaluable')], help_text='Best response achieved', max_length=20)),
                ('progression_free_survival_days', models.IntegerField(blank=True, help_text='PFS duration in days', null=True)),
                ('time_to_progression_days', models.IntegerField(blank=True, help_text='Time to progression in days', null=True)),
                ('treatment_outcome', models.CharField(blank=True, choices=[('COMPLETED', 'Treatment Completed'), ('PROGRESSION', 'Disease Progression'), ('TOXICITY', 'Unacceptable Toxicity'), ('PT_CHOICE', 'Patient Choice'), ('MD_CHOICE', 'Physician Decision'), ('DEATH', 'Death'), ('TRANSPLANT', 'Proceeded to Transplant'), ('ONGOING', 'Treatment Ongoing')], help_text='Reason treatment line ended', max_length=20)),
                ('received_in_trial', models.BooleanField(default=False, help_text='Received as part of clinical trial')),
                ('trial_identifier', models.CharField(blank=True, help_text='Clinical trial identifier', max_length=100)),
                ('line_calculation_method', models.CharField(blank=True, help_text='Method used to calculate treatment line', max_length=100)),
                ('gap_threshold_days', models.IntegerField(default=30, help_text='Gap threshold for line determination')),
                ('combination_window_days', models.IntegerField(default=60, help_text='Window for combination therapy grouping')),
                ('data_source', models.CharField(blank=True, help_text='Source of treatment data', max_length=100)),
                ('calculated_automatically', models.BooleanField(default=False, help_text='Calculated via automated algorithm')),
                ('manually_reviewed', models.BooleanField(default=False, help_text='Manually reviewed by clinician')),
                ('confidence_score', models.FloatField(blank=True, help_text='Confidence in line assignment (0-1)', null=True)),
            ],
            options={
                'db_table': 'treatment_line',
            },
        ),
        migrations.CreateModel(
            name='TreatmentLineComponent',
            fields=[
                ('component_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('component_type', models.CharField(choices=[('DRUG', 'Drug Exposure'), ('PROCEDURE', 'Procedure'), ('RADIATION', 'Radiation Therapy'), ('SURGERY', 'Surgical Procedure')], help_text='Type of treatment component', max_length=20)),
                ('component_role', models.CharField(choices=[('PRIMARY', 'Primary Agent'), ('COMBINATION', 'Combination Agent'), ('SUPPORTIVE', 'Supportive Care'), ('PREMEDICATION', 'Premedication')], help_text='Role within treatment line', max_length=20)),
                ('drug_classification', models.CharField(blank=True, choices=[('PLATINUM', 'Platinum-based Therapy'), ('IMMUNO', 'Immunotherapy'), ('TARGETED', 'Targeted Therapy'), ('CHEMO', 'Traditional Chemotherapy'), ('HORMONE', 'Hormone Therapy'), ('RADIATION', 'Radiation Therapy'), ('SCT', 'Stem Cell Transplant'), ('SURGERY', 'Surgical Intervention'), ('TRIAL', 'Clinical Trial Drug')], help_text='Drug classification', max_length=50)),
                ('component_start_date', models.DateField(help_text='Start date of component')),
                ('component_end_date', models.DateField(blank=True, help_text='End date of component', null=True)),
                ('is_platinum_agent', models.BooleanField(default=False, help_text='Is platinum-based agent')),
                ('is_immunotherapy', models.BooleanField(default=False, help_text='Is immunotherapy agent')),
                ('is_targeted_therapy', models.BooleanField(default=False, help_text='Is targeted therapy')),
                ('is_novel_agent', models.BooleanField(default=False, help_text='Is novel/investigational agent')),
                ('fda_approved', models.BooleanField(blank=True, help_text='FDA approved for indication', null=True)),
                ('approval_date', models.DateField(blank=True, help_text='FDA approval date', null=True)),
                ('off_label_use', models.BooleanField(default=False, help_text='Used off-label')),
            ],
            options={
                'db_table': 'treatment_line_component',
            },
        ),
        migrations.CreateModel(
            name='TreatmentRegimen',
            fields=[
                ('regimen_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('regimen_name', models.CharField(help_text='Standard regimen name (e.g., FOLFOX, R-CHOP)', max_length=200)),
                ('regimen_code', models.CharField(help_text='Standard regimen code', max_length=50)),
                ('regimen_start_date', models.DateField(help_text='Start date of regimen')),
                ('regimen_end_date', models.DateField(blank=True, help_text='End date of regimen', null=True)),
                ('line_number', models.IntegerField(blank=True, help_text='Line of therapy number', null=True)),
                ('regimen_type', models.CharField(choices=[('CHEMOTHERAPY', 'Chemotherapy'), ('IMMUNOTHERAPY', 'Immunotherapy'), ('TARGETED_THERAPY', 'Targeted Therapy'), ('HORMONE_THERAPY', 'Hormone Therapy'), ('COMBINATION', 'Combination Therapy'), ('MAINTENANCE', 'Maintenance Therapy')], help_text='Type of treatment regimen', max_length=30)),
                ('treatment_intent', models.CharField(blank=True, choices=[('CURATIVE', 'Curative'), ('PALLIATIVE', 'Palliative'), ('ADJUVANT', 'Adjuvant'), ('NEOADJUVANT', 'Neoadjuvant'), ('MAINTENANCE', 'Maintenance')], help_text='Intent of treatment', max_length=30, null=True)),
                ('treatment_setting', models.CharField(blank=True, choices=[('INPATIENT', 'Inpatient'), ('OUTPATIENT', 'Outpatient'), ('AMBULATORY', 'Ambulatory')], help_text='Treatment setting', max_length=20, null=True)),
                ('cycles_planned', models.IntegerField(blank=True, help_text='Number of planned cycles', null=True)),
                ('cycles_completed', models.IntegerField(blank=True, help_text='Number of completed cycles', null=True)),
                ('cycle_length_days', models.IntegerField(blank=True, help_text='Length of each cycle in days', null=True)),
                ('best_response', models.CharField(choices=[('CR', 'Complete Response'), ('PR', 'Partial Response'), ('SD', 'Stable Disease'), ('PD', 'Progressive Disease'), ('NE', 'Not Evaluable'), ('MR', 'Mixed Response')], help_text='Best overall response to regimen', max_length=20)),
                ('response_assessment_date', models.DateField(blank=True, help_text='Date of response assessment', null=True)),
                ('progression_date', models.DateField(blank=True, help_text='Date of disease progression', null=True)),
                ('regimen_discontinued', models.BooleanField(default=False, help_text='Whether regimen was discontinued early')),
                ('discontinuation_reason', models.CharField(blank=True, choices=[('COMPLETED', 'Completed as Planned'), ('PROGRESSION', 'Disease Progression'), ('TOXICITY', 'Unacceptable Toxicity'), ('PATIENT_CHOICE', 'Patient Choice'), ('DEATH', 'Death'), ('OTHER', 'Other Reason')], help_text='Reason for discontinuation', max_length=50)),
            ],
            options={
                'db_table': 'treatment_regimen',
            },
        ),
        migrations.CreateModel(
            name='TumorAssessment',
            fields=[
                ('tumor_assessment_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('assessment_date', models.DateField()),
                ('assessment_method', models.CharField(choices=[('RECIST_1_1', 'RECIST 1.1'), ('WHO', 'WHO Criteria'), ('RANO', 'RANO Criteria'), ('IMMUNE_RECIST', 'iRECIST'), ('CHESON', 'Cheson Criteria'), ('CLINICAL', 'Clinical Assessment')], help_text='Assessment criteria used', max_length=30)),
                ('overall_response', models.CharField(blank=True, choices=[('CR', 'Complete Response'), ('PR', 'Partial Response'), ('SD', 'Stable Disease'), ('PD', 'Progressive Disease'), ('NE', 'Not Evaluable'), ('MR', 'Mixed Response')], help_text='Overall tumor response', max_length=20)),
                ('disease_status', models.CharField(blank=True, choices=[('MEASURABLE', 'Measurable Disease'), ('NON_MEASURABLE', 'Non-measurable Disease'), ('NO_EVIDENCE', 'No Evidence of Disease'), ('UNKNOWN', 'Unknown')], help_text='Disease status at assessment', max_length=20)),
                ('sum_target_lesions', models.FloatField(blank=True, help_text='Sum of target lesion measurements', null=True)),
                ('target_lesion_count', models.IntegerField(blank=True, help_text='Number of target lesions', null=True)),
                ('new_lesions_present', models.BooleanField(blank=True, help_text='Whether new lesions are present', null=True)),
                ('non_target_response', models.CharField(blank=True, choices=[('COMPLETE', 'Complete Response'), ('INCOMPLETE', 'Incomplete Response'), ('STABLE', 'Stable Disease'), ('PROGRESSIVE', 'Progressive Disease'), ('NOT_EVALUATED', 'Not Evaluated')], help_text='Non-target lesion response', max_length=20)),
                ('time_from_treatment_start', models.IntegerField(blank=True, help_text='Days from treatment start', null=True)),
                ('time_from_last_assessment', models.IntegerField(blank=True, help_text='Days from previous assessment', null=True)),
                ('assessment_quality', models.CharField(blank=True, choices=[('ADEQUATE', 'Adequate'), ('SUBOPTIMAL', 'Suboptimal'), ('INADEQUATE', 'Inadequate')], help_text='Quality of assessment', max_length=20)),
                ('provider_id', models.IntegerField(blank=True, help_text='Assessing physician', null=True)),
                ('visit_occurrence_id', models.IntegerField(blank=True, help_text='Assessment visit', null=True)),
                ('assessment_source_value', models.CharField(blank=True, help_text='Source value', max_length=50)),
            ],
            options={
                'db_table': 'tumor_assessment',
            },
        ),
        migrations.CreateModel(
            name='TumorAssessmentMeasurement',
            fields=[
                ('tumor_measurement_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('lesion_id', models.CharField(help_text='Unique lesion identifier', max_length=50)),
                ('lesion_type', models.CharField(choices=[('TARGET', 'Target Lesion'), ('NON_TARGET', 'Non-target Lesion'), ('NEW', 'New Lesion')], help_text='Type of lesion', max_length=20)),
                ('laterality', models.CharField(blank=True, choices=[('R', 'Right'), ('L', 'Left'), ('B', 'Bilateral'), ('M', 'Midline'), ('U', 'Unknown'), ('N', 'Not Applicable')], help_text='Laterality of lesion', max_length=10)),
                ('longest_diameter', models.FloatField(blank=True, help_text='Longest diameter (mm)', null=True)),
                ('perpendicular_diameter', models.FloatField(blank=True, help_text='Perpendicular diameter (mm)', null=True)),
                ('area', models.FloatField(blank=True, help_text='Lesion area (mm²)', null=True)),
                ('volume', models.FloatField(blank=True, help_text='Lesion volume (mm³)', null=True)),
                ('measurement_method', models.CharField(blank=True, help_text='Measurement method/imaging', max_length=50)),
                ('lesion_response', models.CharField(blank=True, choices=[('COMPLETE', 'Complete Response'), ('PARTIAL', 'Partial Response'), ('STABLE', 'Stable Disease'), ('PROGRESSIVE', 'Progressive Disease'), ('NEW', 'New Lesion')], help_text='Individual lesion response', max_length=20)),
                ('percent_change', models.FloatField(blank=True, help_text='Percent change from baseline', null=True)),
                ('absolute_change', models.FloatField(blank=True, help_text='Absolute change from baseline (mm)', null=True)),
                ('measurement_quality', models.CharField(blank=True, choices=[('MEASURABLE', 'Clearly Measurable'), ('EVALUABLE', 'Evaluable'), ('NOT_EVALUABLE', 'Not Evaluable')], help_text='Quality of measurement', max_length=20)),
            ],
            options={
                'db_table': 'tumor_assessment_measurement',
            },
        ),
        migrations.CreateModel(
            name='VisitOccurrence',
            fields=[
                ('visit_occurrence_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('visit_concept_id', models.IntegerField(help_text='OMOP concept for visit type')),
                ('visit_start_date', models.DateField(help_text='Visit start date')),
                ('visit_start_datetime', models.DateTimeField(blank=True, help_text='Visit start datetime', null=True)),
                ('visit_end_date', models.DateField(help_text='Visit end date')),
                ('visit_end_datetime', models.DateTimeField(blank=True, help_text='Visit end datetime', null=True)),
                ('visit_type_concept_id', models.IntegerField(help_text='Type/source of visit record')),
                ('provider_id', models.IntegerField(blank=True, help_text='Primary provider for visit', null=True)),
                ('care_site_id', models.IntegerField(blank=True, help_text='Care site where visit occurred', null=True)),
                ('visit_source_value', models.CharField(blank=True, help_text='Source visit identifier', max_length=50)),
                ('visit_source_concept_id', models.IntegerField(blank=True, help_text='Source concept ID', null=True)),
                ('admitted_from_concept_id', models.IntegerField(blank=True, help_text='Admission source', null=True)),
                ('admitted_from_source_value', models.CharField(blank=True, help_text='Source admission value', max_length=50)),
                ('discharge_to_concept_id', models.IntegerField(blank=True, help_text='Discharge destination', null=True)),
                ('discharge_to_source_value', models.CharField(blank=True, help_text='Source discharge value', max_length=50)),
                ('preceding_visit_occurrence_id', models.IntegerField(blank=True, help_text='Previous visit ID', null=True)),
            ],
            options={
                'db_table': 'visit_occurrence',
            },
        ),
        migrations.CreateModel(
            name='Vocabulary',
            fields=[
                ('vocabulary_id', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('vocabulary_name', models.CharField(max_length=255)),
                ('vocabulary_reference', models.CharField(blank=True, max_length=255)),
                ('vocabulary_version', models.CharField(blank=True, max_length=255)),
                ('vocabulary_concept_id', models.IntegerField()),
            ],
            options={
                'db_table': 'vocabulary',
            },
        ),
        migrations.CreateModel(
            name='BiospecimenCollection',
            fields=[
                ('biospecimen_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('collection_date', models.DateField(help_text='Date of biospecimen collection')),
                ('collection_method', models.CharField(choices=[('SURGICAL_RESECTION', 'Surgical Resection'), ('CORE_BIOPSY', 'Core Needle Biopsy'), ('FINE_NEEDLE_ASPIRATION', 'Fine Needle Aspiration'), ('LIQUID_BIOPSY', 'Liquid Biopsy'), ('BONE_MARROW_BIOPSY', 'Bone Marrow Biopsy'), ('PLEURAL_FLUID', 'Pleural Fluid'), ('ASCITES', 'Ascitic Fluid'), ('CSF', 'Cerebrospinal Fluid')], help_text='Method of biospecimen collection', max_length=50)),
                ('specimen_type', models.CharField(choices=[('FRESH_TISSUE', 'Fresh Tissue'), ('FROZEN_TISSUE', 'Frozen Tissue'), ('FFPE_TISSUE', 'FFPE Tissue'), ('BLOOD', 'Blood'), ('PLASMA', 'Plasma'), ('SERUM', 'Serum'), ('BUFFY_COAT', 'Buffy Coat'), ('URINE', 'Urine'), ('OTHER_FLUID', 'Other Body Fluid')], help_text='Type of biospecimen', max_length=50)),
                ('laterality', models.CharField(blank=True, choices=[('R', 'Right'), ('L', 'Left'), ('B', 'Bilateral'), ('M', 'Midline'), ('U', 'Unknown'), ('N', 'Not Applicable')], help_text='Laterality of collection site', max_length=10)),
                ('tumor_content', models.FloatField(blank=True, help_text='Tumor content percentage', null=True)),
                ('necrosis_percentage', models.FloatField(blank=True, help_text='Necrosis percentage', null=True)),
                ('specimen_quality', models.CharField(blank=True, choices=[('EXCELLENT', 'Excellent'), ('GOOD', 'Good'), ('FAIR', 'Fair'), ('POOR', 'Poor'), ('INADEQUATE', 'Inadequate')], help_text='Overall specimen quality', max_length=20)),
                ('processing_time_hours', models.FloatField(blank=True, help_text='Time from collection to processing (hours)', null=True)),
                ('storage_temperature', models.CharField(blank=True, help_text='Storage temperature', max_length=20)),
                ('fixation_type', models.CharField(blank=True, help_text='Fixation type for tissue', max_length=50)),
                ('fixation_time_hours', models.FloatField(blank=True, help_text='Fixation time in hours', null=True)),
                ('genomic_testing', models.BooleanField(blank=True, help_text='Used for genomic testing', null=True)),
                ('proteomics_testing', models.BooleanField(blank=True, help_text='Used for proteomics testing', null=True)),
                ('immunohistochemistry', models.BooleanField(blank=True, help_text='Used for IHC', null=True)),
                ('biobank_id', models.CharField(blank=True, help_text='Biobank specimen ID', max_length=100)),
                ('laboratory_id', models.CharField(blank=True, help_text='Laboratory specimen ID', max_length=100)),
                ('research_study', models.ForeignKey(blank=True, help_text='Associated research study', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='biospecimens', to='omop.clinicaltrial')),
            ],
            options={
                'db_table': 'biospecimen_collection',
            },
        ),
        migrations.CreateModel(
            name='ClinicalTrialBiomarker',
            fields=[
                ('biomarker_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('biomarker_type', models.CharField(choices=[('TMB', 'Tumor Mutational Burden'), ('PD_L1', 'PD-L1 Expression'), ('MSI', 'Microsatellite Instability'), ('HER2_IHC', 'HER2 Immunohistochemistry'), ('HER2_FISH', 'HER2 Fluorescence In Situ Hybridization'), ('ER_STATUS', 'Estrogen Receptor Status'), ('PR_STATUS', 'Progesterone Receptor Status'), ('TIL', 'Tumor Infiltrating Lymphocytes'), ('BRCA_STATUS', 'BRCA Mutation Status'), ('NTRK_FUSION', 'NTRK Gene Fusion'), ('CDK4_6', 'CDK4/6 Expression'), ('PI3K_AKT', 'PI3K/AKT Pathway')], help_text='Type of biomarker', max_length=50)),
                ('test_date', models.DateField(help_text='Date of biomarker testing')),
                ('test_method', models.CharField(choices=[('IHC', 'Immunohistochemistry'), ('FISH', 'Fluorescence In Situ Hybridization'), ('NGS', 'Next Generation Sequencing'), ('PCR', 'Polymerase Chain Reaction'), ('WES', 'Whole Exome Sequencing'), ('WGS', 'Whole Genome Sequencing'), ('FLOW_CYTOMETRY', 'Flow Cytometry'), ('ELISA', 'Enzyme-Linked Immunosorbent Assay')], help_text='Testing methodology', max_length=100)),
                ('numeric_value', models.FloatField(blank=True, help_text='Numeric result value', null=True)),
                ('unit', models.CharField(blank=True, help_text='Unit of measurement', max_length=50)),
                ('categorical_result', models.CharField(blank=True, choices=[('POSITIVE', 'Positive'), ('NEGATIVE', 'Negative'), ('HIGH', 'High'), ('LOW', 'Low'), ('INTERMEDIATE', 'Intermediate'), ('EQUIVOCAL', 'Equivocal'), ('MSI_HIGH', 'MSI-High'), ('MSI_LOW', 'MSI-Low'), ('MSS', 'Microsatellite Stable'), ('HER2_0', 'HER2 0'), ('HER2_1PLUS', 'HER2 1+'), ('HER2_2PLUS', 'HER2 2+'), ('HER2_3PLUS', 'HER2 3+'), ('AMPLIFIED', 'Amplified'), ('NOT_AMPLIFIED', 'Not Amplified')], help_text='Categorical interpretation', max_length=50)),
                ('threshold_value', models.FloatField(blank=True, help_text='Threshold value used', null=True)),
                ('threshold_description', models.CharField(blank=True, help_text='Description of threshold criteria', max_length=200)),
                ('assay_name', models.CharField(blank=True, help_text='Specific assay/kit used', max_length=200)),
                ('assay_manufacturer', models.CharField(blank=True, help_text='Assay manufacturer', max_length=200)),
                ('assay_version', models.CharField(blank=True, help_text='Assay version', max_length=50)),
                ('specimen_type', models.CharField(blank=True, help_text='Specimen type tested', max_length=100)),
                ('tissue_site', models.CharField(blank=True, help_text='Tissue site', max_length=100)),
                ('tumor_content', models.FloatField(blank=True, help_text='Tumor content percentage', null=True)),
                ('laboratory', models.CharField(blank=True, help_text='Testing laboratory', max_length=200)),
                ('lab_certification', models.CharField(blank=True, help_text='Laboratory certification', max_length=100)),
                ('quality_score', models.CharField(blank=True, help_text='Quality assessment', max_length=50)),
                ('drug_target', models.CharField(blank=True, help_text='Associated drug target', max_length=200)),
                ('loinc_code', models.CharField(blank=True, help_text='LOINC code', max_length=20)),
                ('snomed_code', models.CharField(blank=True, help_text='SNOMED code', max_length=20)),
                ('biomarker_measurement', models.ForeignKey(blank=True, help_text='Related biomarker measurement', null=True, on_delete=django.db.models.deletion.SET_NULL, to='omop.biomarkermeasurement')),
            ],
            options={
                'db_table': 'clinical_trial_biomarker',
            },
        ),
        migrations.CreateModel(
            name='GenomicConcept',
            fields=[
                ('concept', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='omop.concept')),
                ('genomic_category', models.CharField(choices=[('GENE', 'Gene'), ('VARIANT', 'Variant'), ('CONSEQUENCE', 'Consequence'), ('PATHWAY', 'Pathway'), ('BIOMARKER', 'Biomarker'), ('SIGNATURE', 'Gene Signature')], help_text='Category of genomic concept', max_length=50)),
                ('gene_symbol', models.CharField(blank=True, help_text='Official gene symbol', max_length=20)),
                ('gene_aliases', models.TextField(blank=True, help_text='Alternative gene names/symbols')),
                ('chromosome', models.CharField(blank=True, help_text='Chromosome location', max_length=10)),
                ('hgnc_id', models.CharField(blank=True, help_text='HGNC gene ID', max_length=20)),
                ('ensembl_gene_id', models.CharField(blank=True, help_text='Ensembl gene ID', max_length=20)),
                ('ncbi_gene_id', models.CharField(blank=True, help_text='NCBI Gene ID', max_length=20)),
                ('clinical_actionability', models.CharField(blank=True, choices=[('HIGH', 'High'), ('MODERATE', 'Moderate'), ('LOW', 'Low'), ('UNKNOWN', 'Unknown')], help_text='Clinical actionability level', max_length=20)),
                ('therapeutic_implications', models.TextField(blank=True, help_text='Known therapeutic implications')),
            ],
            options={
                'db_table': 'genomic_concept',
            },
        ),
        migrations.CreateModel(
            name='MeasurementConcept',
            fields=[
                ('concept', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='omop.concept')),
                ('patient_info_field', models.CharField(help_text='Corresponding PatientInfo field name', max_length=100, unique=True)),
                ('normal_range_low', models.FloatField(blank=True, help_text='Normal range low value', null=True)),
                ('normal_range_high', models.FloatField(blank=True, help_text='Normal range high value', null=True)),
                ('measurement_category', models.CharField(blank=True, help_text='Category (vital_signs, lab_values, demographics)', max_length=50)),
                ('required_specimen_type', models.CharField(blank=True, help_text='Required specimen type if applicable', max_length=50)),
            ],
            options={
                'db_table': 'measurement_concept',
            },
        ),
        migrations.CreateModel(
            name='OncologyConcept',
            fields=[
                ('concept', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='omop.concept')),
                ('oncology_category', models.CharField(help_text='Category (staging, histology, biomarker, site, grade)', max_length=50)),
                ('cancer_type', models.CharField(blank=True, help_text='Specific cancer type this concept applies to', max_length=100)),
                ('staging_system', models.CharField(blank=True, help_text='Staging system (AJCC, UICC, etc.)', max_length=50)),
                ('staging_system_version', models.CharField(blank=True, help_text='Version of staging system', max_length=20)),
                ('icdo_topography_code', models.CharField(blank=True, help_text='ICD-O topography code', max_length=10)),
                ('icdo_morphology_code', models.CharField(blank=True, help_text='ICD-O morphology code', max_length=10)),
                ('biomarker_type', models.CharField(blank=True, help_text='Type of biomarker (protein, genetic, etc.)', max_length=50)),
                ('measurement_method', models.CharField(blank=True, help_text='Standard measurement method', max_length=100)),
            ],
            options={
                'db_table': 'oncology_concept',
            },
        ),
        migrations.CreateModel(
            name='UnitConcept',
            fields=[
                ('concept', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='omop.concept')),
                ('unit_type', models.CharField(help_text='Type of unit (weight, height, volume, etc.)', max_length=50)),
                ('patient_info_choice_value', models.CharField(blank=True, help_text='Corresponding PatientInfo choice value', max_length=20)),
                ('conversion_factor_to_standard', models.FloatField(blank=True, help_text='Factor to convert to standard unit', null=True)),
            ],
            options={
                'db_table': 'unit_concept',
            },
        ),
        migrations.AddIndex(
            model_name='concept',
            index=models.Index(fields=['concept_name'], name='concept_concept_ed912b_idx'),
        ),
        migrations.AddIndex(
            model_name='concept',
            index=models.Index(fields=['domain_id'], name='concept_domain__252298_idx'),
        ),
        migrations.AddIndex(
            model_name='concept',
            index=models.Index(fields=['vocabulary_id'], name='concept_vocabul_dccbe4_idx'),
        ),
        migrations.AddIndex(
            model_name='concept',
            index=models.Index(fields=['concept_class_id'], name='concept_concept_bdb699_idx'),
        ),
        migrations.AddIndex(
            model_name='concept',
            index=models.Index(fields=['standard_concept'], name='concept_standar_b38e74_idx'),
        ),
        migrations.AddIndex(
            model_name='concept',
            index=models.Index(fields=['concept_code'], name='concept_concept_44dec9_idx'),
        ),
        migrations.AddField(
            model_name='clinicallabtest',
            name='test_concept',
            field=models.ForeignKey(help_text='OMOP concept for test', on_delete=django.db.models.deletion.PROTECT, related_name='lab_tests', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='cancerstagingmap',
            name='cancer_type_concept',
            field=models.ForeignKey(blank=True, help_text='Cancer type for staging mapping', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='staging_maps', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='biospecimencollection',
            name='anatomical_site_concept',
            field=models.ForeignKey(blank=True, help_text='Anatomical site of collection', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='biospecimen_sites', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='biomarkermeasurement',
            name='biomarker_concept',
            field=models.ForeignKey(help_text='OMOP concept for biomarker', on_delete=django.db.models.deletion.PROTECT, related_name='biomarker_measurements', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='behavioralvocabulary',
            name='concept',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='behavioral_concepts', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='conceptrelationship',
            name='concept_id_1',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relationships_as_concept_1', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='conceptrelationship',
            name='concept_id_2',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relationships_as_concept_2', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='conditionoccurrence',
            name='behavior_concept',
            field=models.ForeignKey(blank=True, help_text='Tumor behavior concept (benign, malignant, etc.)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='behaviors', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='conditionoccurrence',
            name='condition_concept',
            field=models.ForeignKey(blank=True, help_text='OMOP concept for the condition', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='conditions', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='conditionoccurrence',
            name='condition_source_concept',
            field=models.ForeignKey(blank=True, help_text='Source concept', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='condition_sources', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='conditionoccurrence',
            name='condition_status_concept',
            field=models.ForeignKey(blank=True, help_text='Status concept', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='condition_statuses', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='conditionoccurrence',
            name='condition_type_concept',
            field=models.ForeignKey(blank=True, help_text='Type/source of condition record', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='condition_types', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='conditionoccurrence',
            name='histology_concept',
            field=models.ForeignKey(blank=True, help_text='Histology/morphology concept (ICD-O, SNOMED)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='histologies', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='conditionoccurrence',
            name='primary_site_concept',
            field=models.ForeignKey(blank=True, help_text='Primary tumor site concept (ICD-O topography)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='primary_sites', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='curatedbiomarkervocabulary',
            name='concept',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='curated_biomarkers', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='dose_unit_concept',
            field=models.ForeignKey(blank=True, help_text='Dose unit concept', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='drug_dose_units', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='drug_concept',
            field=models.ForeignKey(blank=True, help_text='OMOP concept for the drug', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='drug_exposures', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='drug_source_concept',
            field=models.ForeignKey(blank=True, help_text='Source drug concept', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='drug_sources', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='drug_type_concept',
            field=models.ForeignKey(blank=True, help_text='Type/source of drug record', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='drug_types', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='route_concept',
            field=models.ForeignKey(blank=True, help_text='Route of administration concept', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='drug_routes', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='episode',
            name='episode_concept',
            field=models.ForeignKey(blank=True, help_text='OMOP concept for the episode', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='episodes', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='episode',
            name='episode_source_concept',
            field=models.ForeignKey(blank=True, help_text='Source episode concept', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='episode_sources', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='episode',
            name='parent_episode',
            field=models.ForeignKey(blank=True, help_text='Parent episode for progression/recurrence tracking', null=True, on_delete=django.db.models.deletion.CASCADE, to='omop.episode'),
        ),
        migrations.AddField(
            model_name='episode',
            name='primary_cancer_condition',
            field=models.ForeignKey(blank=True, help_text='Primary cancer condition for this episode', null=True, on_delete=django.db.models.deletion.SET_NULL, to='omop.conditionoccurrence'),
        ),
        migrations.AddField(
            model_name='conditionoccurrence',
            name='cancer_episode',
            field=models.ForeignKey(blank=True, help_text='Associated cancer episode for progression tracking', null=True, on_delete=django.db.models.deletion.SET_NULL, to='omop.episode'),
        ),
        migrations.AddField(
            model_name='episodeevent',
            name='episode',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='omop.episode'),
        ),
        migrations.AddField(
            model_name='genomicvariant',
            name='gene_concept',
            field=models.ForeignKey(blank=True, help_text='OMOP concept for gene', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='gene_variants', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='icdomorphologyconcept',
            name='concept',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='icdo_morphology', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='icdotopographyconcept',
            name='concept',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='icdo_topography', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='imagingmeasurement',
            name='measurement_concept',
            field=models.ForeignKey(help_text='OMOP concept for measurement type', on_delete=django.db.models.deletion.PROTECT, related_name='imaging_measurements', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='imagingmeasurement',
            name='imaging_study',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='measurements', to='omop.imagingstudy'),
        ),
        migrations.AddField(
            model_name='infectiousdiseasevocabulary',
            name='concept',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='infectious_disease_concepts', to='omop.concept'),
        ),
        migrations.AddIndex(
            model_name='location',
            index=models.Index(fields=['zip'], name='location_zip_0f5ae9_idx'),
        ),
        migrations.AddField(
            model_name='measurement',
            name='measurement_concept',
            field=models.ForeignKey(blank=True, help_text='OMOP concept for what was measured', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='measurements', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='measurement',
            name='measurement_source_concept',
            field=models.ForeignKey(blank=True, help_text='Source concept', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='measurement_sources', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='measurement',
            name='measurement_type_concept',
            field=models.ForeignKey(blank=True, help_text='Type/source of measurement', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='measurement_types', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='measurement',
            name='operator_concept',
            field=models.ForeignKey(blank=True, help_text='Operator (>, <, =, etc.)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='measurement_operators', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='measurement',
            name='unit_concept',
            field=models.ForeignKey(blank=True, help_text='Unit concept', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='measurement_units', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='measurement',
            name='value_as_concept',
            field=models.ForeignKey(blank=True, help_text='Concept for categorical values', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='measurement_values', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='imagingmeasurement',
            name='measurement_record',
            field=models.ForeignKey(blank=True, help_text='Related OMOP measurement record', null=True, on_delete=django.db.models.deletion.SET_NULL, to='omop.measurement'),
        ),
        migrations.AddField(
            model_name='clinicallabtest',
            name='measurement',
            field=models.ForeignKey(blank=True, help_text='Related OMOP measurement record', null=True, on_delete=django.db.models.deletion.SET_NULL, to='omop.measurement'),
        ),
        migrations.AddField(
            model_name='biomarkermeasurement',
            name='measurement',
            field=models.ForeignKey(blank=True, help_text='Related OMOP measurement record', null=True, on_delete=django.db.models.deletion.SET_NULL, to='omop.measurement'),
        ),
        migrations.AddField(
            model_name='modifier',
            name='modifier_concept',
            field=models.ForeignKey(help_text='Concept representing the modifier', on_delete=django.db.models.deletion.PROTECT, related_name='modifiers', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='modifier',
            name='modifier_of_field_concept',
            field=models.ForeignKey(help_text='Concept representing the field being modified', on_delete=django.db.models.deletion.PROTECT, related_name='modifier_fields', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='modifier',
            name='modifier_type_concept',
            field=models.ForeignKey(help_text='Type of modifier', on_delete=django.db.models.deletion.PROTECT, related_name='modifier_types', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='modifier',
            name='modifier_value_as_concept',
            field=models.ForeignKey(blank=True, help_text='Concept value of the modifier', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='modifier_values', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='observation',
            name='genomic_variant',
            field=models.ForeignKey(blank=True, help_text='Related genomic variant', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='observations', to='omop.genomicvariant'),
        ),
        migrations.AddField(
            model_name='observation',
            name='molecular_test_id',
            field=models.ForeignKey(blank=True, help_text='Related molecular test', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='observations', to='omop.moleculartest'),
        ),
        migrations.AddField(
            model_name='observation',
            name='observation_concept',
            field=models.ForeignKey(blank=True, help_text='OMOP concept for what was observed', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='observations', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='observation',
            name='observation_source_concept',
            field=models.ForeignKey(blank=True, help_text='Source concept', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='observation_sources', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='observation',
            name='observation_type_concept',
            field=models.ForeignKey(blank=True, help_text='Type/source of observation', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='observation_types', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='observation',
            name='qualifier_concept',
            field=models.ForeignKey(blank=True, help_text='Qualifier for observation', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='observation_qualifiers', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='observation',
            name='unit_concept',
            field=models.ForeignKey(blank=True, help_text='Unit concept', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='observation_units', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='observation',
            name='value_as_concept',
            field=models.ForeignKey(blank=True, help_text='Concept for categorical values', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='observation_values', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='moleculartest',
            name='observation',
            field=models.ForeignKey(blank=True, help_text='Related OMOP observation record', null=True, on_delete=django.db.models.deletion.SET_NULL, to='omop.observation'),
        ),
        migrations.AddField(
            model_name='genomicvariant',
            name='observation',
            field=models.ForeignKey(blank=True, help_text='Related OMOP observation record', null=True, on_delete=django.db.models.deletion.SET_NULL, to='omop.observation'),
        ),
        migrations.AddField(
            model_name='oncologyepisodedetail',
            name='episode',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='oncology_details', to='omop.episode'),
        ),
        migrations.AddField(
            model_name='oncologymodifier',
            name='modifier_source_concept',
            field=models.ForeignKey(help_text='Source concept for oncology modifier', on_delete=django.db.models.deletion.PROTECT, related_name='oncology_modifier_sources', to='omop.concept'),
        ),
        migrations.AddIndex(
            model_name='oncologyvocabulary',
            index=models.Index(fields=['vocabulary_id', 'concept_code'], name='oncology_vo_vocabul_d13697_idx'),
        ),
        migrations.AddIndex(
            model_name='oncologyvocabulary',
            index=models.Index(fields=['oncology_domain'], name='oncology_vo_oncolog_7a7aa6_idx'),
        ),
        migrations.AddIndex(
            model_name='oncologyvocabulary',
            index=models.Index(fields=['icdo_site_code'], name='oncology_vo_icdo_si_214876_idx'),
        ),
        migrations.AddIndex(
            model_name='oncologyvocabulary',
            index=models.Index(fields=['icdo_morphology_code'], name='oncology_vo_icdo_mo_9b5573_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='oncologyvocabulary',
            unique_together={('vocabulary_id', 'concept_code')},
        ),
        migrations.AddField(
            model_name='person',
            name='location_id',
            field=models.ForeignKey(blank=True, db_column='location_id', help_text='Most recent/current location', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='persons', to='omop.location'),
        ),
        migrations.AddField(
            model_name='patientinfo',
            name='person',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='patient_info', to='omop.person'),
        ),
        migrations.AddField(
            model_name='oncologymodifier',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='omop.person'),
        ),
        migrations.AddField(
            model_name='oncologyepisodedetail',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='omop.person'),
        ),
        migrations.AddField(
            model_name='observation',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='omop.person'),
        ),
        migrations.AddField(
            model_name='moleculartest',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='molecular_tests', to='omop.person'),
        ),
        migrations.AddField(
            model_name='modifier',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='omop.person'),
        ),
        migrations.AddField(
            model_name='measurement',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='omop.person'),
        ),
        migrations.AddField(
            model_name='imagingstudy',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='imaging_studies', to='omop.person'),
        ),
        migrations.AddField(
            model_name='imagingmeasurement',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='imaging_measurements', to='omop.person'),
        ),
        migrations.AddField(
            model_name='genomicvariant',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='genomic_variants', to='omop.person'),
        ),
        migrations.AddField(
            model_name='episode',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='omop.person'),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='omop.person'),
        ),
        migrations.AddField(
            model_name='conditionoccurrence',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='omop.person'),
        ),
        migrations.AddField(
            model_name='clinicaltrialparticipation',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trial_participations', to='omop.person'),
        ),
        migrations.AddField(
            model_name='clinicaltrialbiomarker',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trial_biomarkers', to='omop.person'),
        ),
        migrations.AddField(
            model_name='clinicaltrial',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='omop.person'),
        ),
        migrations.AddField(
            model_name='clinicallabtest',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='clinical_lab_tests', to='omop.person'),
        ),
        migrations.AddField(
            model_name='biospecimencollection',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='omop.person'),
        ),
        migrations.AddField(
            model_name='biomarkermeasurement',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='biomarker_measurements', to='omop.person'),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='modifier_concept',
            field=models.ForeignKey(blank=True, help_text='Modifier for procedure', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='procedure_modifiers', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='omop.person'),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='procedure_concept',
            field=models.ForeignKey(blank=True, help_text='OMOP concept for the procedure', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='procedures', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='procedure_source_concept',
            field=models.ForeignKey(blank=True, help_text='Source concept', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='procedure_sources', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='procedureoccurrence',
            name='procedure_type_concept',
            field=models.ForeignKey(blank=True, help_text='Type/source of procedure', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='procedure_types', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='imagingstudy',
            name='procedure_occurrence',
            field=models.ForeignKey(blank=True, help_text='Related OMOP procedure occurrence', null=True, on_delete=django.db.models.deletion.SET_NULL, to='omop.procedureoccurrence'),
        ),
        migrations.AddField(
            model_name='radiationoccurrence',
            name='anatomical_site_concept',
            field=models.ForeignKey(blank=True, help_text='Anatomical site treated', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='radiation_sites', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='radiationoccurrence',
            name='dose_unit_concept',
            field=models.ForeignKey(blank=True, help_text='Unit for radiation dose', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='radiation_dose_units', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='radiationoccurrence',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='omop.person'),
        ),
        migrations.AddField(
            model_name='radiationoccurrence',
            name='radiation_concept',
            field=models.ForeignKey(help_text='Concept for radiation therapy type', on_delete=django.db.models.deletion.PROTECT, related_name='radiation_occurrences', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='radiationoccurrence',
            name='radiation_type_concept',
            field=models.ForeignKey(help_text='Type of radiation therapy', on_delete=django.db.models.deletion.PROTECT, related_name='radiation_types', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='socialdeterminantsvocabulary',
            name='concept',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='social_determinant_concepts', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='specimen',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='specimens', to='omop.person'),
        ),
        migrations.AddField(
            model_name='stagingmeasurementconcept',
            name='applicable_cancer_types',
            field=models.ManyToManyField(help_text='Cancer types where this staging concept applies', related_name='applicable_staging_concepts', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='stagingmeasurementconcept',
            name='concept',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='staging_details', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='stemcelltransplant',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='omop.person'),
        ),
        migrations.AddField(
            model_name='stemcelltransplant',
            name='transplant_concept',
            field=models.ForeignKey(help_text='Concept for transplant type', on_delete=django.db.models.deletion.PROTECT, related_name='stem_cell_transplants', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='stemcelltransplant',
            name='transplant_type_concept',
            field=models.ForeignKey(help_text='Type of stem cell transplant', on_delete=django.db.models.deletion.PROTECT, related_name='transplant_types', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='treatmentline',
            name='condition_occurrence',
            field=models.ForeignKey(help_text='Primary condition being treated', on_delete=django.db.models.deletion.CASCADE, related_name='treatment_lines', to='omop.conditionoccurrence'),
        ),
        migrations.AddField(
            model_name='treatmentline',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='treatment_lines', to='omop.person'),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='treatment_line',
            field=models.ForeignKey(blank=True, help_text='Associated treatment line', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='drug_exposures', to='omop.treatmentline'),
        ),
        migrations.AddField(
            model_name='treatmentlinecomponent',
            name='drug_exposure',
            field=models.ForeignKey(blank=True, help_text='Related drug exposure', null=True, on_delete=django.db.models.deletion.CASCADE, to='omop.drugexposure'),
        ),
        migrations.AddField(
            model_name='treatmentlinecomponent',
            name='indication_concept',
            field=models.ForeignKey(blank=True, help_text='Indication for treatment component', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='treatment_indications', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='treatmentlinecomponent',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='treatment_components', to='omop.person'),
        ),
        migrations.AddField(
            model_name='treatmentlinecomponent',
            name='procedure_occurrence',
            field=models.ForeignKey(blank=True, help_text='Related procedure', null=True, on_delete=django.db.models.deletion.CASCADE, to='omop.procedureoccurrence'),
        ),
        migrations.AddField(
            model_name='treatmentlinecomponent',
            name='treatment_line',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='components', to='omop.treatmentline'),
        ),
        migrations.AddField(
            model_name='treatmentregimen',
            name='clinical_trial',
            field=models.ForeignKey(blank=True, help_text='Associated clinical trial', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='regimens', to='omop.clinicaltrial'),
        ),
        migrations.AddField(
            model_name='treatmentregimen',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='omop.person'),
        ),
        migrations.AddField(
            model_name='treatmentregimen',
            name='regimen_concept',
            field=models.ForeignKey(blank=True, help_text='Concept for regimen type', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='treatment_regimens', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='treatmentregimen',
            name='treatment_line',
            field=models.ForeignKey(blank=True, help_text='Associated treatment line', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='regimens', to='omop.treatmentline'),
        ),
        migrations.AddField(
            model_name='treatmentlinecomponent',
            name='treatment_regimen',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='components', to='omop.treatmentregimen'),
        ),
        migrations.AddField(
            model_name='drugexposure',
            name='treatment_regimen',
            field=models.ForeignKey(blank=True, help_text='Associated regimen', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='drug_exposures', to='omop.treatmentregimen'),
        ),
        migrations.AddField(
            model_name='tumorassessment',
            name='assessment_concept',
            field=models.ForeignKey(help_text='Concept for assessment type', on_delete=django.db.models.deletion.PROTECT, related_name='tumor_assessments', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='tumorassessment',
            name='assessment_type_concept',
            field=models.ForeignKey(help_text='Type of tumor assessment', on_delete=django.db.models.deletion.PROTECT, related_name='assessment_types', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='tumorassessment',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='omop.person'),
        ),
        migrations.AddField(
            model_name='tumorassessmentmeasurement',
            name='anatomical_site_concept',
            field=models.ForeignKey(blank=True, help_text='Anatomical site of lesion', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='lesion_sites', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='tumorassessmentmeasurement',
            name='measurement_concept',
            field=models.ForeignKey(help_text='Concept for measurement type', on_delete=django.db.models.deletion.PROTECT, related_name='tumor_measurements', to='omop.concept'),
        ),
        migrations.AddField(
            model_name='tumorassessmentmeasurement',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='omop.person'),
        ),
        migrations.AddField(
            model_name='tumorassessmentmeasurement',
            name='tumor_assessment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='measurements', to='omop.tumorassessment'),
        ),
        migrations.AddField(
            model_name='visitoccurrence',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='visits', to='omop.person'),
        ),
        migrations.AddIndex(
            model_name='genomicconcept',
            index=models.Index(fields=['genomic_category'], name='genomic_con_genomic_194674_idx'),
        ),
        migrations.AddIndex(
            model_name='genomicconcept',
            index=models.Index(fields=['gene_symbol'], name='genomic_con_gene_sy_ace9ee_idx'),
        ),
        migrations.AddIndex(
            model_name='genomicconcept',
            index=models.Index(fields=['clinical_actionability'], name='genomic_con_clinica_355be5_idx'),
        ),
        migrations.AddField(
            model_name='measurementconcept',
            name='preferred_unit_concept',
            field=models.ForeignKey(blank=True, help_text='Preferred unit concept for this measurement', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='preferred_measurements', to='omop.concept'),
        ),
        migrations.AddIndex(
            model_name='oncologyconcept',
            index=models.Index(fields=['oncology_category'], name='oncology_co_oncolog_322738_idx'),
        ),
        migrations.AddIndex(
            model_name='oncologyconcept',
            index=models.Index(fields=['cancer_type'], name='oncology_co_cancer__a03f2b_idx'),
        ),
        migrations.AddIndex(
            model_name='oncologyconcept',
            index=models.Index(fields=['staging_system'], name='oncology_co_staging_c3c64f_idx'),
        ),
        migrations.AddIndex(
            model_name='oncologyconcept',
            index=models.Index(fields=['biomarker_type'], name='oncology_co_biomark_62ccda_idx'),
        ),
        migrations.AddField(
            model_name='unitconcept',
            name='standard_unit_concept',
            field=models.ForeignKey(blank=True, help_text='Standard unit concept', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='converted_units', to='omop.concept'),
        ),
        migrations.AddIndex(
            model_name='cancerstagingmap',
            index=models.Index(fields=['source_staging_system', 'source_stage_value'], name='cancer_stag_source__9b3e1f_idx'),
        ),
        migrations.AddIndex(
            model_name='cancerstagingmap',
            index=models.Index(fields=['target_staging_system', 'target_stage_value'], name='cancer_stag_target__49c647_idx'),
        ),
        migrations.AddIndex(
            model_name='cancerstagingmap',
            index=models.Index(fields=['cancer_type_concept'], name='cancer_stag_cancer__49afc9_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='cancerstagingmap',
            unique_together={('source_staging_system', 'source_stage_value', 'target_staging_system', 'cancer_type_concept')},
        ),
        migrations.AddIndex(
            model_name='behavioralvocabulary',
            index=models.Index(fields=['observation_type'], name='behavioral__observa_321f35_idx'),
        ),
        migrations.AddIndex(
            model_name='behavioralvocabulary',
            index=models.Index(fields=['observation_name'], name='behavioral__observa_91d777_idx'),
        ),
        migrations.AddIndex(
            model_name='behavioralvocabulary',
            index=models.Index(fields=['loinc_code'], name='behavioral__loinc_c_49474a_idx'),
        ),
        migrations.AddIndex(
            model_name='behavioralvocabulary',
            index=models.Index(fields=['exclusion_criterion'], name='behavioral__exclusi_b8c028_idx'),
        ),
        migrations.AddIndex(
            model_name='behavioralvocabulary',
            index=models.Index(fields=['inclusion_criterion'], name='behavioral__inclusi_898c0c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='behavioralvocabulary',
            unique_together={('observation_type', 'observation_name')},
        ),
        migrations.AddIndex(
            model_name='conceptrelationship',
            index=models.Index(fields=['relationship_id'], name='concept_rel_relatio_cb1813_idx'),
        ),
        migrations.AddIndex(
            model_name='conceptrelationship',
            index=models.Index(fields=['valid_start_date'], name='concept_rel_valid_s_1f1047_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='conceptrelationship',
            unique_together={('concept_id_1', 'concept_id_2', 'relationship_id')},
        ),
        migrations.AddIndex(
            model_name='curatedbiomarkervocabulary',
            index=models.Index(fields=['biomarker_name'], name='curated_bio_biomark_e2667a_idx'),
        ),
        migrations.AddIndex(
            model_name='curatedbiomarkervocabulary',
            index=models.Index(fields=['biomarker_category'], name='curated_bio_biomark_23437d_idx'),
        ),
        migrations.AddIndex(
            model_name='curatedbiomarkervocabulary',
            index=models.Index(fields=['loinc_code'], name='curated_bio_loinc_c_027fcb_idx'),
        ),
        migrations.AddIndex(
            model_name='curatedbiomarkervocabulary',
            index=models.Index(fields=['evidence_level'], name='curated_bio_evidenc_6d6efa_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='curatedbiomarkervocabulary',
            unique_together={('biomarker_name', 'biomarker_category')},
        ),
        migrations.AddIndex(
            model_name='episodeevent',
            index=models.Index(fields=['episode'], name='episode_eve_episode_c7b37c_idx'),
        ),
        migrations.AddIndex(
            model_name='episodeevent',
            index=models.Index(fields=['event_field_concept_id'], name='episode_eve_event_f_31115a_idx'),
        ),
        migrations.AddIndex(
            model_name='icdomorphologyconcept',
            index=models.Index(fields=['icdo_morphology_code'], name='icdo_morpho_icdo_mo_e26341_idx'),
        ),
        migrations.AddIndex(
            model_name='icdomorphologyconcept',
            index=models.Index(fields=['behavior_code'], name='icdo_morpho_behavio_814d0c_idx'),
        ),
        migrations.AddIndex(
            model_name='icdomorphologyconcept',
            index=models.Index(fields=['major_category'], name='icdo_morpho_major_c_87ed48_idx'),
        ),
        migrations.AddIndex(
            model_name='icdomorphologyconcept',
            index=models.Index(fields=['histologic_type'], name='icdo_morpho_histolo_cd7595_idx'),
        ),
        migrations.AddIndex(
            model_name='icdotopographyconcept',
            index=models.Index(fields=['icdo_site_code'], name='icdo_topogr_icdo_si_db4a49_idx'),
        ),
        migrations.AddIndex(
            model_name='icdotopographyconcept',
            index=models.Index(fields=['major_site'], name='icdo_topogr_major_s_a9519c_idx'),
        ),
        migrations.AddIndex(
            model_name='icdotopographyconcept',
            index=models.Index(fields=['body_system'], name='icdo_topogr_body_sy_a4ce7e_idx'),
        ),
        migrations.AddIndex(
            model_name='infectiousdiseasevocabulary',
            index=models.Index(fields=['disease_name'], name='infectious__disease_baf3ea_idx'),
        ),
        migrations.AddIndex(
            model_name='infectiousdiseasevocabulary',
            index=models.Index(fields=['pathogen_type'], name='infectious__pathoge_f1c255_idx'),
        ),
        migrations.AddIndex(
            model_name='infectiousdiseasevocabulary',
            index=models.Index(fields=['icd10_code'], name='infectious__icd10_c_aa064a_idx'),
        ),
        migrations.AddIndex(
            model_name='infectiousdiseasevocabulary',
            index=models.Index(fields=['exclusion_criterion'], name='infectious__exclusi_e6ce91_idx'),
        ),
        migrations.AddIndex(
            model_name='infectiousdiseasevocabulary',
            index=models.Index(fields=['requires_monitoring'], name='infectious__require_5d536b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='infectiousdiseasevocabulary',
            unique_together={('disease_name', 'pathogen_type')},
        ),
        migrations.AddIndex(
            model_name='person',
            index=models.Index(fields=['gender_concept_id'], name='person_gender__5d32aa_idx'),
        ),
        migrations.AddIndex(
            model_name='person',
            index=models.Index(fields=['year_of_birth'], name='person_year_of_e6c783_idx'),
        ),
        migrations.AddIndex(
            model_name='person',
            index=models.Index(fields=['race_concept_id'], name='person_race_co_45266c_idx'),
        ),
        migrations.AddIndex(
            model_name='person',
            index=models.Index(fields=['ethnicity_concept_id'], name='person_ethnici_ac973f_idx'),
        ),
        migrations.AddIndex(
            model_name='person',
            index=models.Index(fields=['death_datetime'], name='person_death_d_4c0f49_idx'),
        ),
        migrations.AddIndex(
            model_name='person',
            index=models.Index(fields=['provider_id'], name='person_provide_b753b3_idx'),
        ),
        migrations.AddIndex(
            model_name='person',
            index=models.Index(fields=['care_site_id'], name='person_care_si_d7704e_idx'),
        ),
        migrations.AddIndex(
            model_name='person',
            index=models.Index(fields=['primary_language_concept_id'], name='person_primary_c23cea_idx'),
        ),
        migrations.AddIndex(
            model_name='patientinfo',
            index=models.Index(fields=['person'], name='patient_inf_person__ea83ef_idx'),
        ),
        migrations.AddIndex(
            model_name='patientinfo',
            index=models.Index(fields=['patient_age'], name='patient_inf_patient_a5f152_idx'),
        ),
        migrations.AddIndex(
            model_name='patientinfo',
            index=models.Index(fields=['disease'], name='patient_inf_disease_15b4ff_idx'),
        ),
        migrations.AddIndex(
            model_name='patientinfo',
            index=models.Index(fields=['stage'], name='patient_inf_stage_1f985e_idx'),
        ),
        migrations.AddIndex(
            model_name='oncologymodifier',
            index=models.Index(fields=['person'], name='oncology_mo_person__146d7d_idx'),
        ),
        migrations.AddIndex(
            model_name='oncologymodifier',
            index=models.Index(fields=['cancer_modifier_type'], name='oncology_mo_cancer__eee713_idx'),
        ),
        migrations.AddIndex(
            model_name='oncologymodifier',
            index=models.Index(fields=['staging_basis'], name='oncology_mo_staging_902529_idx'),
        ),
        migrations.AddIndex(
            model_name='oncologyepisodedetail',
            index=models.Index(fields=['episode'], name='oncology_ep_episode_914a26_idx'),
        ),
        migrations.AddIndex(
            model_name='oncologyepisodedetail',
            index=models.Index(fields=['person'], name='oncology_ep_person__a8d71e_idx'),
        ),
        migrations.AddIndex(
            model_name='oncologyepisodedetail',
            index=models.Index(fields=['detail_date'], name='oncology_ep_detail__f90436_idx'),
        ),
        migrations.AddIndex(
            model_name='oncologyepisodedetail',
            index=models.Index(fields=['disease_status'], name='oncology_ep_disease_f23211_idx'),
        ),
        migrations.AddIndex(
            model_name='oncologyepisodedetail',
            index=models.Index(fields=['progression_type'], name='oncology_ep_progres_530573_idx'),
        ),
        migrations.AddIndex(
            model_name='observation',
            index=models.Index(fields=['person'], name='observation_person__08cc56_idx'),
        ),
        migrations.AddIndex(
            model_name='observation',
            index=models.Index(fields=['observation_concept'], name='observation_observa_620557_idx'),
        ),
        migrations.AddIndex(
            model_name='observation',
            index=models.Index(fields=['observation_datetime'], name='observation_observa_c398d5_idx'),
        ),
        migrations.AddIndex(
            model_name='observation',
            index=models.Index(fields=['performance_score_type'], name='observation_perform_498e27_idx'),
        ),
        migrations.AddIndex(
            model_name='observation',
            index=models.Index(fields=['genetic_test_result'], name='observation_genetic_ea5569_idx'),
        ),
        migrations.AddIndex(
            model_name='observation',
            index=models.Index(fields=['behavioral_category'], name='observation_behavio_ae7fce_idx'),
        ),
        migrations.AddIndex(
            model_name='observation',
            index=models.Index(fields=['smoking_status'], name='observation_smoking_cbdad3_idx'),
        ),
        migrations.AddIndex(
            model_name='observation',
            index=models.Index(fields=['substance_use_category'], name='observation_substan_963bab_idx'),
        ),
        migrations.AddIndex(
            model_name='observation',
            index=models.Index(fields=['alcohol_use_level'], name='observation_alcohol_55735a_idx'),
        ),
        migrations.AddIndex(
            model_name='observation',
            index=models.Index(fields=['pregnancy_status'], name='observation_pregnan_0ff3c9_idx'),
        ),
        migrations.AddIndex(
            model_name='observation',
            index=models.Index(fields=['menopausal_status'], name='observation_menopau_ebac63_idx'),
        ),
        migrations.AddIndex(
            model_name='observation',
            index=models.Index(fields=['infectious_disease_status'], name='observation_infecti_0cb1ca_idx'),
        ),
        migrations.AddIndex(
            model_name='observation',
            index=models.Index(fields=['caregiver_status'], name='observation_caregiv_0d73ba_idx'),
        ),
        migrations.AddIndex(
            model_name='observation',
            index=models.Index(fields=['consent_capability'], name='observation_consent_9a9d47_idx'),
        ),
        migrations.AddIndex(
            model_name='observation',
            index=models.Index(fields=['mental_health_status'], name='observation_mental__c043f3_idx'),
        ),
        migrations.AddIndex(
            model_name='observation',
            index=models.Index(fields=['geographic_risk_category'], name='observation_geograp_26ee2c_idx'),
        ),
        migrations.AddIndex(
            model_name='observation',
            index=models.Index(fields=['risk_assessment_date'], name='observation_risk_as_61eb68_idx'),
        ),
        migrations.AddIndex(
            model_name='moleculartest',
            index=models.Index(fields=['person'], name='molecular_t_person__1c2ad2_idx'),
        ),
        migrations.AddIndex(
            model_name='moleculartest',
            index=models.Index(fields=['test_date'], name='molecular_t_test_da_b0dc13_idx'),
        ),
        migrations.AddIndex(
            model_name='moleculartest',
            index=models.Index(fields=['test_type'], name='molecular_t_test_ty_9a8639_idx'),
        ),
        migrations.AddIndex(
            model_name='moleculartest',
            index=models.Index(fields=['overall_result'], name='molecular_t_overall_fbec4e_idx'),
        ),
        migrations.AddIndex(
            model_name='modifier',
            index=models.Index(fields=['person'], name='modifier_person__a3fb9f_idx'),
        ),
        migrations.AddIndex(
            model_name='modifier',
            index=models.Index(fields=['modifier_concept'], name='modifier_modifie_77f432_idx'),
        ),
        migrations.AddIndex(
            model_name='modifier',
            index=models.Index(fields=['modifier_of_event_id', 'modifier_of_field_concept'], name='modifier_modifie_e6ef87_idx'),
        ),
        migrations.AddIndex(
            model_name='measurement',
            index=models.Index(fields=['person'], name='measurement_person__e8eb0d_idx'),
        ),
        migrations.AddIndex(
            model_name='measurement',
            index=models.Index(fields=['measurement_concept'], name='measurement_measure_56f692_idx'),
        ),
        migrations.AddIndex(
            model_name='measurement',
            index=models.Index(fields=['measurement_datetime'], name='measurement_measure_5c26af_idx'),
        ),
        migrations.AddIndex(
            model_name='measurement',
            index=models.Index(fields=['specimen_type'], name='measurement_specime_e457fe_idx'),
        ),
        migrations.AddIndex(
            model_name='measurement',
            index=models.Index(fields=['critical_value_flag'], name='measurement_critica_b217d6_idx'),
        ),
        migrations.AddIndex(
            model_name='measurement',
            index=models.Index(fields=['unit_concept'], name='measurement_unit_co_29ea11_idx'),
        ),
        migrations.AddIndex(
            model_name='measurement',
            index=models.Index(fields=['lab_test_category'], name='measurement_lab_tes_6a0fdc_idx'),
        ),
        migrations.AddIndex(
            model_name='measurement',
            index=models.Index(fields=['loinc_code'], name='measurement_loinc_c_bfe5c5_idx'),
        ),
        migrations.AddIndex(
            model_name='measurement',
            index=models.Index(fields=['biomarker_type'], name='measurement_biomark_2ba62e_idx'),
        ),
        migrations.AddIndex(
            model_name='measurement',
            index=models.Index(fields=['panic_value_flag'], name='measurement_panic_v_3119ec_idx'),
        ),
        migrations.AddIndex(
            model_name='measurement',
            index=models.Index(fields=['expression_level'], name='measurement_express_c1ed54_idx'),
        ),
        migrations.AddIndex(
            model_name='measurement',
            index=models.Index(fields=['ihc_score'], name='measurement_ihc_sco_307282_idx'),
        ),
        migrations.AddIndex(
            model_name='measurement',
            index=models.Index(fields=['mutation_status'], name='measurement_mutatio_84a6ab_idx'),
        ),
        migrations.AddIndex(
            model_name='measurement',
            index=models.Index(fields=['tmb_status'], name='measurement_tmb_sta_0a4eb7_idx'),
        ),
        migrations.AddIndex(
            model_name='measurement',
            index=models.Index(fields=['msi_status'], name='measurement_msi_sta_a55b93_idx'),
        ),
        migrations.AddIndex(
            model_name='measurement',
            index=models.Index(fields=['hrd_status'], name='measurement_hrd_sta_a74ee5_idx'),
        ),
        migrations.AddIndex(
            model_name='imagingmeasurement',
            index=models.Index(fields=['person'], name='imaging_mea_person__56c8bc_idx'),
        ),
        migrations.AddIndex(
            model_name='imagingmeasurement',
            index=models.Index(fields=['imaging_study'], name='imaging_mea_imaging_b8a048_idx'),
        ),
        migrations.AddIndex(
            model_name='imagingmeasurement',
            index=models.Index(fields=['measurement_date'], name='imaging_mea_measure_9bb08f_idx'),
        ),
        migrations.AddIndex(
            model_name='imagingmeasurement',
            index=models.Index(fields=['lesion_type'], name='imaging_mea_lesion__75c547_idx'),
        ),
        migrations.AddIndex(
            model_name='imagingmeasurement',
            index=models.Index(fields=['response_category'], name='imaging_mea_respons_ed1c49_idx'),
        ),
        migrations.AddIndex(
            model_name='imagingmeasurement',
            index=models.Index(fields=['measurement_concept'], name='imaging_mea_measure_5d9101_idx'),
        ),
        migrations.AddIndex(
            model_name='genomicvariant',
            index=models.Index(fields=['person'], name='genomic_var_person__cab897_idx'),
        ),
        migrations.AddIndex(
            model_name='genomicvariant',
            index=models.Index(fields=['gene_symbol'], name='genomic_var_gene_sy_e76525_idx'),
        ),
        migrations.AddIndex(
            model_name='genomicvariant',
            index=models.Index(fields=['test_date'], name='genomic_var_test_da_3a3e4f_idx'),
        ),
        migrations.AddIndex(
            model_name='genomicvariant',
            index=models.Index(fields=['clinical_significance'], name='genomic_var_clinica_0fe002_idx'),
        ),
        migrations.AddIndex(
            model_name='genomicvariant',
            index=models.Index(fields=['molecular_alteration'], name='genomic_var_molecul_a67267_idx'),
        ),
        migrations.AddIndex(
            model_name='genomicvariant',
            index=models.Index(fields=['biomarker_status'], name='genomic_var_biomark_f266f4_idx'),
        ),
        migrations.AddIndex(
            model_name='genomicvariant',
            index=models.Index(fields=['clinvar_id'], name='genomic_var_clinvar_a29fb5_idx'),
        ),
        migrations.AddIndex(
            model_name='genomicvariant',
            index=models.Index(fields=['cosmic_id'], name='genomic_var_cosmic__08fa72_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='genomicvariant',
            unique_together={('person', 'gene_symbol', 'hgvs_notation', 'test_date')},
        ),
        migrations.AddIndex(
            model_name='episode',
            index=models.Index(fields=['person'], name='episode_person__5042c5_idx'),
        ),
        migrations.AddIndex(
            model_name='episode',
            index=models.Index(fields=['episode_concept'], name='episode_episode_e6480f_idx'),
        ),
        migrations.AddIndex(
            model_name='episode',
            index=models.Index(fields=['episode_start_date'], name='episode_episode_dec526_idx'),
        ),
        migrations.AddIndex(
            model_name='episode',
            index=models.Index(fields=['episode_type'], name='episode_episode_5f188f_idx'),
        ),
        migrations.AddIndex(
            model_name='episode',
            index=models.Index(fields=['parent_episode'], name='episode_parent__bed27a_idx'),
        ),
        migrations.AddIndex(
            model_name='episode',
            index=models.Index(fields=['primary_cancer_condition'], name='episode_primary_bbdd95_idx'),
        ),
        migrations.AddIndex(
            model_name='conditionoccurrence',
            index=models.Index(fields=['person'], name='condition_o_person__f913ee_idx'),
        ),
        migrations.AddIndex(
            model_name='conditionoccurrence',
            index=models.Index(fields=['condition_concept'], name='condition_o_conditi_219c6a_idx'),
        ),
        migrations.AddIndex(
            model_name='conditionoccurrence',
            index=models.Index(fields=['condition_start_date'], name='condition_o_conditi_5187ef_idx'),
        ),
        migrations.AddIndex(
            model_name='conditionoccurrence',
            index=models.Index(fields=['primary_site_concept'], name='condition_o_primary_ffbdac_idx'),
        ),
        migrations.AddIndex(
            model_name='conditionoccurrence',
            index=models.Index(fields=['histology_concept'], name='condition_o_histolo_884dbc_idx'),
        ),
        migrations.AddIndex(
            model_name='conditionoccurrence',
            index=models.Index(fields=['tumor_laterality'], name='condition_o_tumor_l_c6b051_idx'),
        ),
        migrations.AddIndex(
            model_name='conditionoccurrence',
            index=models.Index(fields=['ajcc_clinical_stage'], name='condition_o_ajcc_cl_36dad7_idx'),
        ),
        migrations.AddIndex(
            model_name='conditionoccurrence',
            index=models.Index(fields=['ajcc_pathologic_stage'], name='condition_o_ajcc_pa_958fc9_idx'),
        ),
        migrations.AddIndex(
            model_name='conditionoccurrence',
            index=models.Index(fields=['histologic_grade'], name='condition_o_histolo_eed54a_idx'),
        ),
        migrations.AddIndex(
            model_name='conditionoccurrence',
            index=models.Index(fields=['estrogen_receptor_status'], name='condition_o_estroge_1f89c4_idx'),
        ),
        migrations.AddIndex(
            model_name='conditionoccurrence',
            index=models.Index(fields=['progesterone_receptor_status'], name='condition_o_progest_04192c_idx'),
        ),
        migrations.AddIndex(
            model_name='conditionoccurrence',
            index=models.Index(fields=['her2_status'], name='condition_o_her2_st_d3b23a_idx'),
        ),
        migrations.AddIndex(
            model_name='conditionoccurrence',
            index=models.Index(fields=['cancer_episode'], name='condition_o_cancer__3d85ce_idx'),
        ),
        migrations.AddIndex(
            model_name='conditionoccurrence',
            index=models.Index(fields=['staging_system'], name='condition_o_staging_725be7_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicaltrialparticipation',
            index=models.Index(fields=['person'], name='clinical_tr_person__0bf4c7_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicaltrialparticipation',
            index=models.Index(fields=['trial_source_id'], name='clinical_tr_trial_s_e3ab8e_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicaltrialparticipation',
            index=models.Index(fields=['enrollment_date'], name='clinical_tr_enrollm_28a041_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicaltrialparticipation',
            index=models.Index(fields=['participation_status'], name='clinical_tr_partici_abd241_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='clinicaltrialparticipation',
            unique_together={('person', 'trial_source_id')},
        ),
        migrations.AddIndex(
            model_name='clinicaltrialbiomarker',
            index=models.Index(fields=['person'], name='clinical_tr_person__88dff0_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicaltrialbiomarker',
            index=models.Index(fields=['biomarker_type'], name='clinical_tr_biomark_297e33_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicaltrialbiomarker',
            index=models.Index(fields=['test_date'], name='clinical_tr_test_da_f051ca_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicaltrialbiomarker',
            index=models.Index(fields=['categorical_result'], name='clinical_tr_categor_a7b21f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='clinicaltrialbiomarker',
            unique_together={('person', 'biomarker_type', 'test_date', 'assay_name')},
        ),
        migrations.AddIndex(
            model_name='clinicaltrial',
            index=models.Index(fields=['person'], name='clinical_tr_person__a9869d_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicaltrial',
            index=models.Index(fields=['nct_number'], name='clinical_tr_nct_num_ebe288_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicaltrial',
            index=models.Index(fields=['enrollment_date'], name='clinical_tr_enrollm_78d968_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicaltrial',
            index=models.Index(fields=['trial_phase'], name='clinical_tr_trial_p_b5c866_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicaltrial',
            index=models.Index(fields=['trial_type'], name='clinical_tr_trial_t_c60717_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicallabtest',
            index=models.Index(fields=['person'], name='clinical_la_person__c7099a_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicallabtest',
            index=models.Index(fields=['test_date'], name='clinical_la_test_da_e90c02_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicallabtest',
            index=models.Index(fields=['test_category'], name='clinical_la_test_ca_7858a0_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicallabtest',
            index=models.Index(fields=['abnormal_flag'], name='clinical_la_abnorma_4b5e21_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicallabtest',
            index=models.Index(fields=['ctcae_grade'], name='clinical_la_ctcae_g_2a2b38_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicallabtest',
            index=models.Index(fields=['loinc_code'], name='clinical_la_loinc_c_2fcf1d_idx'),
        ),
        migrations.AddIndex(
            model_name='biospecimencollection',
            index=models.Index(fields=['person'], name='biospecimen_person__8bc5fe_idx'),
        ),
        migrations.AddIndex(
            model_name='biospecimencollection',
            index=models.Index(fields=['collection_date'], name='biospecimen_collect_ff12cf_idx'),
        ),
        migrations.AddIndex(
            model_name='biospecimencollection',
            index=models.Index(fields=['specimen_type'], name='biospecimen_specime_b13d7f_idx'),
        ),
        migrations.AddIndex(
            model_name='biospecimencollection',
            index=models.Index(fields=['collection_method'], name='biospecimen_collect_c1bc24_idx'),
        ),
        migrations.AddIndex(
            model_name='biospecimencollection',
            index=models.Index(fields=['biobank_id'], name='biospecimen_biobank_54fbe1_idx'),
        ),
        migrations.AddIndex(
            model_name='biomarkermeasurement',
            index=models.Index(fields=['person'], name='biomarker_m_person__7a9fb3_idx'),
        ),
        migrations.AddIndex(
            model_name='biomarkermeasurement',
            index=models.Index(fields=['biomarker_name'], name='biomarker_m_biomark_111ec5_idx'),
        ),
        migrations.AddIndex(
            model_name='biomarkermeasurement',
            index=models.Index(fields=['measurement_date'], name='biomarker_m_measure_4c4306_idx'),
        ),
        migrations.AddIndex(
            model_name='biomarkermeasurement',
            index=models.Index(fields=['biomarker_category'], name='biomarker_m_biomark_c53f75_idx'),
        ),
        migrations.AddIndex(
            model_name='biomarkermeasurement',
            index=models.Index(fields=['result_interpretation'], name='biomarker_m_result__2ed69c_idx'),
        ),
        migrations.AddIndex(
            model_name='procedureoccurrence',
            index=models.Index(fields=['person'], name='procedure_o_person__40b754_idx'),
        ),
        migrations.AddIndex(
            model_name='procedureoccurrence',
            index=models.Index(fields=['procedure_concept'], name='procedure_o_procedu_4c2dc4_idx'),
        ),
        migrations.AddIndex(
            model_name='procedureoccurrence',
            index=models.Index(fields=['procedure_datetime'], name='procedure_o_procedu_d865a1_idx'),
        ),
        migrations.AddIndex(
            model_name='procedureoccurrence',
            index=models.Index(fields=['transplant_type'], name='procedure_o_transpl_828f09_idx'),
        ),
        migrations.AddIndex(
            model_name='procedureoccurrence',
            index=models.Index(fields=['imaging_modality'], name='procedure_o_imaging_e79646_idx'),
        ),
        migrations.AddIndex(
            model_name='procedureoccurrence',
            index=models.Index(fields=['surgical_approach'], name='procedure_o_surgica_1d9594_idx'),
        ),
        migrations.AddIndex(
            model_name='procedureoccurrence',
            index=models.Index(fields=['resection_type'], name='procedure_o_resecti_b0da8c_idx'),
        ),
        migrations.AddIndex(
            model_name='procedureoccurrence',
            index=models.Index(fields=['margin_status'], name='procedure_o_margin__7446f2_idx'),
        ),
        migrations.AddIndex(
            model_name='procedureoccurrence',
            index=models.Index(fields=['surgical_intent'], name='procedure_o_surgica_038636_idx'),
        ),
        migrations.AddIndex(
            model_name='imagingstudy',
            index=models.Index(fields=['person'], name='imaging_stu_person__20820a_idx'),
        ),
        migrations.AddIndex(
            model_name='imagingstudy',
            index=models.Index(fields=['study_date'], name='imaging_stu_study_d_51cdad_idx'),
        ),
        migrations.AddIndex(
            model_name='imagingstudy',
            index=models.Index(fields=['modality'], name='imaging_stu_modalit_2241d0_idx'),
        ),
        migrations.AddIndex(
            model_name='imagingstudy',
            index=models.Index(fields=['baseline_imaging'], name='imaging_stu_baselin_e78909_idx'),
        ),
        migrations.AddIndex(
            model_name='imagingstudy',
            index=models.Index(fields=['response_assessment'], name='imaging_stu_respons_6bd022_idx'),
        ),
        migrations.AddIndex(
            model_name='imagingstudy',
            index=models.Index(fields=['study_uid'], name='imaging_stu_study_u_d9b006_idx'),
        ),
        migrations.AddIndex(
            model_name='radiationoccurrence',
            index=models.Index(fields=['person'], name='radiation_o_person__93ea4c_idx'),
        ),
        migrations.AddIndex(
            model_name='radiationoccurrence',
            index=models.Index(fields=['radiation_concept'], name='radiation_o_radiati_91bd5c_idx'),
        ),
        migrations.AddIndex(
            model_name='radiationoccurrence',
            index=models.Index(fields=['radiation_occurrence_start_date'], name='radiation_o_radiati_ab0fba_idx'),
        ),
        migrations.AddIndex(
            model_name='radiationoccurrence',
            index=models.Index(fields=['anatomical_site_concept'], name='radiation_o_anatomi_c90073_idx'),
        ),
        migrations.AddIndex(
            model_name='radiationoccurrence',
            index=models.Index(fields=['treatment_intent'], name='radiation_o_treatme_b895d6_idx'),
        ),
        migrations.AddIndex(
            model_name='socialdeterminantsvocabulary',
            index=models.Index(fields=['determinant_category'], name='social_dete_determi_beed9d_idx'),
        ),
        migrations.AddIndex(
            model_name='socialdeterminantsvocabulary',
            index=models.Index(fields=['determinant_name'], name='social_dete_determi_7fa611_idx'),
        ),
        migrations.AddIndex(
            model_name='socialdeterminantsvocabulary',
            index=models.Index(fields=['z_code'], name='social_dete_z_code_3de774_idx'),
        ),
        migrations.AddIndex(
            model_name='socialdeterminantsvocabulary',
            index=models.Index(fields=['health_impact_level'], name='social_dete_health__8ac675_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='socialdeterminantsvocabulary',
            unique_together={('determinant_category', 'determinant_name')},
        ),
        migrations.AddIndex(
            model_name='specimen',
            index=models.Index(fields=['person'], name='specimen_person__257c32_idx'),
        ),
        migrations.AddIndex(
            model_name='specimen',
            index=models.Index(fields=['specimen_concept_id'], name='specimen_specime_95c57b_idx'),
        ),
        migrations.AddIndex(
            model_name='specimen',
            index=models.Index(fields=['specimen_date'], name='specimen_specime_d278e4_idx'),
        ),
        migrations.AddIndex(
            model_name='stagingmeasurementconcept',
            index=models.Index(fields=['staging_system', 'staging_component'], name='staging_mea_staging_71ade5_idx'),
        ),
        migrations.AddIndex(
            model_name='stagingmeasurementconcept',
            index=models.Index(fields=['staging_system_version'], name='staging_mea_staging_02c6c4_idx'),
        ),
        migrations.AddIndex(
            model_name='stemcelltransplant',
            index=models.Index(fields=['person'], name='stem_cell_t_person__aedbdc_idx'),
        ),
        migrations.AddIndex(
            model_name='stemcelltransplant',
            index=models.Index(fields=['transplant_date'], name='stem_cell_t_transpl_f8d595_idx'),
        ),
        migrations.AddIndex(
            model_name='stemcelltransplant',
            index=models.Index(fields=['transplant_type'], name='stem_cell_t_transpl_c87d01_idx'),
        ),
        migrations.AddIndex(
            model_name='stemcelltransplant',
            index=models.Index(fields=['stem_cell_source'], name='stem_cell_t_stem_ce_90ded7_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentline',
            index=models.Index(fields=['person'], name='treatment_l_person__c9b0c4_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentline',
            index=models.Index(fields=['condition_occurrence'], name='treatment_l_conditi_836edf_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentline',
            index=models.Index(fields=['line_number'], name='treatment_l_line_nu_d23dc8_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentline',
            index=models.Index(fields=['line_start_date'], name='treatment_l_line_st_41f98e_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentline',
            index=models.Index(fields=['treatment_intent'], name='treatment_l_treatme_a72b58_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentline',
            index=models.Index(fields=['platinum_based'], name='treatment_l_platinu_f5fcff_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentline',
            index=models.Index(fields=['immunotherapy_based'], name='treatment_l_immunot_c05b72_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentline',
            index=models.Index(fields=['targeted_therapy_based'], name='treatment_l_targete_c5d591_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentline',
            index=models.Index(fields=['treatment_response'], name='treatment_l_treatme_1bf729_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='treatmentline',
            unique_together={('person', 'condition_occurrence', 'line_number')},
        ),
        migrations.AddIndex(
            model_name='treatmentregimen',
            index=models.Index(fields=['person'], name='treatment_r_person__c4e0a5_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentregimen',
            index=models.Index(fields=['regimen_start_date'], name='treatment_r_regimen_8e3c16_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentregimen',
            index=models.Index(fields=['line_number'], name='treatment_r_line_nu_6010b7_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentregimen',
            index=models.Index(fields=['regimen_type'], name='treatment_r_regimen_8b490a_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentregimen',
            index=models.Index(fields=['treatment_intent'], name='treatment_r_treatme_04a1e9_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentlinecomponent',
            index=models.Index(fields=['treatment_line'], name='treatment_l_treatme_8a0bb7_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentlinecomponent',
            index=models.Index(fields=['treatment_regimen'], name='treatment_l_treatme_15a3a8_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentlinecomponent',
            index=models.Index(fields=['person'], name='treatment_l_person__a453f4_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentlinecomponent',
            index=models.Index(fields=['component_type'], name='treatment_l_compone_280aec_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentlinecomponent',
            index=models.Index(fields=['drug_classification'], name='treatment_l_drug_cl_0eaf47_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentlinecomponent',
            index=models.Index(fields=['is_platinum_agent'], name='treatment_l_is_plat_a333e5_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentlinecomponent',
            index=models.Index(fields=['is_immunotherapy'], name='treatment_l_is_immu_072ae1_idx'),
        ),
        migrations.AddIndex(
            model_name='treatmentlinecomponent',
            index=models.Index(fields=['component_start_date'], name='treatment_l_compone_57b3e4_idx'),
        ),
        migrations.AddIndex(
            model_name='drugexposure',
            index=models.Index(fields=['person'], name='drug_exposu_person__997885_idx'),
        ),
        migrations.AddIndex(
            model_name='drugexposure',
            index=models.Index(fields=['drug_concept'], name='drug_exposu_drug_co_ff492c_idx'),
        ),
        migrations.AddIndex(
            model_name='drugexposure',
            index=models.Index(fields=['drug_exposure_start_datetime'], name='drug_exposu_drug_ex_7dff0f_idx'),
        ),
        migrations.AddIndex(
            model_name='drugexposure',
            index=models.Index(fields=['line_of_therapy'], name='drug_exposu_line_of_9e6c5e_idx'),
        ),
        migrations.AddIndex(
            model_name='drugexposure',
            index=models.Index(fields=['therapy_intent'], name='drug_exposu_therapy_de70f9_idx'),
        ),
        migrations.AddIndex(
            model_name='drugexposure',
            index=models.Index(fields=['treatment_response'], name='drug_exposu_treatme_d69693_idx'),
        ),
        migrations.AddIndex(
            model_name='drugexposure',
            index=models.Index(fields=['treatment_line'], name='drug_exposu_treatme_dee604_idx'),
        ),
        migrations.AddIndex(
            model_name='drugexposure',
            index=models.Index(fields=['treatment_regimen'], name='drug_exposu_treatme_03527e_idx'),
        ),
        migrations.AddIndex(
            model_name='drugexposure',
            index=models.Index(fields=['drug_classification'], name='drug_exposu_drug_cl_42ff5b_idx'),
        ),
        migrations.AddIndex(
            model_name='drugexposure',
            index=models.Index(fields=['is_platinum_agent'], name='drug_exposu_is_plat_733c83_idx'),
        ),
        migrations.AddIndex(
            model_name='drugexposure',
            index=models.Index(fields=['is_immunotherapy'], name='drug_exposu_is_immu_736d14_idx'),
        ),
        migrations.AddIndex(
            model_name='drugexposure',
            index=models.Index(fields=['is_targeted_therapy'], name='drug_exposu_is_targ_d67010_idx'),
        ),
        migrations.AddIndex(
            model_name='drugexposure',
            index=models.Index(fields=['clinical_trial_drug'], name='drug_exposu_clinica_768a5f_idx'),
        ),
        migrations.AddIndex(
            model_name='tumorassessment',
            index=models.Index(fields=['person'], name='tumor_asses_person__2e3d5e_idx'),
        ),
        migrations.AddIndex(
            model_name='tumorassessment',
            index=models.Index(fields=['assessment_date'], name='tumor_asses_assessm_247ca6_idx'),
        ),
        migrations.AddIndex(
            model_name='tumorassessment',
            index=models.Index(fields=['overall_response'], name='tumor_asses_overall_041200_idx'),
        ),
        migrations.AddIndex(
            model_name='tumorassessment',
            index=models.Index(fields=['assessment_method'], name='tumor_asses_assessm_e22dc3_idx'),
        ),
        migrations.AddIndex(
            model_name='tumorassessmentmeasurement',
            index=models.Index(fields=['tumor_assessment'], name='tumor_asses_tumor_a_3c7e6a_idx'),
        ),
        migrations.AddIndex(
            model_name='tumorassessmentmeasurement',
            index=models.Index(fields=['person'], name='tumor_asses_person__22079a_idx'),
        ),
        migrations.AddIndex(
            model_name='tumorassessmentmeasurement',
            index=models.Index(fields=['lesion_id'], name='tumor_asses_lesion__0b394d_idx'),
        ),
        migrations.AddIndex(
            model_name='tumorassessmentmeasurement',
            index=models.Index(fields=['lesion_type'], name='tumor_asses_lesion__652ed6_idx'),
        ),
        migrations.AddIndex(
            model_name='visitoccurrence',
            index=models.Index(fields=['person'], name='visit_occur_person__28355c_idx'),
        ),
        migrations.AddIndex(
            model_name='visitoccurrence',
            index=models.Index(fields=['visit_concept_id'], name='visit_occur_visit_c_7892d3_idx'),
        ),
        migrations.AddIndex(
            model_name='visitoccurrence',
            index=models.Index(fields=['visit_start_date'], name='visit_occur_visit_s_2e2b86_idx'),
        ),
        migrations.AddIndex(
            model_name='visitoccurrence',
            index=models.Index(fields=['provider_id'], name='visit_occur_provide_03836c_idx'),
        ),
        migrations.AddIndex(
            model_name='measurementconcept',
            index=models.Index(fields=['patient_info_field'], name='measurement_patient_e18509_idx'),
        ),
        migrations.AddIndex(
            model_name='measurementconcept',
            index=models.Index(fields=['measurement_category'], name='measurement_measure_cce5a4_idx'),
        ),
        migrations.AddIndex(
            model_name='unitconcept',
            index=models.Index(fields=['unit_type'], name='unit_concep_unit_ty_f06e8e_idx'),
        ),
        migrations.AddIndex(
            model_name='unitconcept',
            index=models.Index(fields=['patient_info_choice_value'], name='unit_concep_patient_0a0140_idx'),
        ),
    ]
